# 1 "ksync_uint_dep128.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
# 61 "/usr/local/cuda-7.0//include/device_types.h"
#if 0
# 61
enum cudaRoundMode { 
# 63
cudaRoundNearest, 
# 64
cudaRoundZero, 
# 65
cudaRoundPosInf, 
# 66
cudaRoundMinInf
# 67
}; 
#endif
# 147 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3
typedef long ptrdiff_t; 
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3
typedef unsigned long size_t; 
#include "crt/host_runtime.h"
# 150 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 150
enum cudaError { 
# 157
cudaSuccess, 
# 163
cudaErrorMissingConfiguration, 
# 169
cudaErrorMemoryAllocation, 
# 175
cudaErrorInitializationError, 
# 185 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorLaunchFailure, 
# 194 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 204 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorLaunchTimeout, 
# 213 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 219
cudaErrorInvalidDeviceFunction, 
# 228 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 234
cudaErrorInvalidDevice, 
# 240
cudaErrorInvalidValue, 
# 246
cudaErrorInvalidPitchValue, 
# 252
cudaErrorInvalidSymbol, 
# 257
cudaErrorMapBufferObjectFailed, 
# 262
cudaErrorUnmapBufferObjectFailed, 
# 268
cudaErrorInvalidHostPointer, 
# 274
cudaErrorInvalidDevicePointer, 
# 280
cudaErrorInvalidTexture, 
# 286
cudaErrorInvalidTextureBinding, 
# 293
cudaErrorInvalidChannelDescriptor, 
# 299
cudaErrorInvalidMemcpyDirection, 
# 309 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorAddressOfConstant, 
# 318 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 327 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorTextureNotBound, 
# 336 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorSynchronizationError, 
# 342
cudaErrorInvalidFilterSetting, 
# 348
cudaErrorInvalidNormSetting, 
# 356
cudaErrorMixedDeviceExecution, 
# 363
cudaErrorCudartUnloading, 
# 368
cudaErrorUnknown, 
# 376
cudaErrorNotYetImplemented, 
# 385 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 392
cudaErrorInvalidResourceHandle, 
# 400
cudaErrorNotReady, 
# 407
cudaErrorInsufficientDriver, 
# 420 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorSetOnActiveProcess, 
# 426
cudaErrorInvalidSurface, 
# 432
cudaErrorNoDevice, 
# 438
cudaErrorECCUncorrectable, 
# 443
cudaErrorSharedObjectSymbolNotFound, 
# 448
cudaErrorSharedObjectInitFailed, 
# 454
cudaErrorUnsupportedLimit, 
# 460
cudaErrorDuplicateVariableName, 
# 466
cudaErrorDuplicateTextureName, 
# 472
cudaErrorDuplicateSurfaceName, 
# 482 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 487
cudaErrorInvalidKernelImage, 
# 495
cudaErrorNoKernelImageForDevice, 
# 508 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorIncompatibleDriverContext, 
# 515
cudaErrorPeerAccessAlreadyEnabled, 
# 522
cudaErrorPeerAccessNotEnabled, 
# 528
cudaErrorDeviceAlreadyInUse = 54, 
# 535
cudaErrorProfilerDisabled, 
# 543
cudaErrorProfilerNotInitialized, 
# 550
cudaErrorProfilerAlreadyStarted, 
# 557
cudaErrorProfilerAlreadyStopped, 
# 565
cudaErrorAssert, 
# 572
cudaErrorTooManyPeers, 
# 578
cudaErrorHostMemoryAlreadyRegistered, 
# 584
cudaErrorHostMemoryNotRegistered, 
# 589
cudaErrorOperatingSystem, 
# 595
cudaErrorPeerAccessUnsupported, 
# 602
cudaErrorLaunchMaxDepthExceeded, 
# 610
cudaErrorLaunchFileScopedTex, 
# 618
cudaErrorLaunchFileScopedSurf, 
# 633 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 645 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 650
cudaErrorNotPermitted, 
# 656
cudaErrorNotSupported, 
# 665 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorHardwareStackError, 
# 673
cudaErrorIllegalInstruction, 
# 682 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorMisalignedAddress, 
# 693 "/usr/local/cuda-7.0//include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 701
cudaErrorInvalidPc, 
# 709
cudaErrorIllegalAddress, 
# 715
cudaErrorInvalidPtx, 
# 720
cudaErrorInvalidGraphicsContext, 
# 726
cudaErrorStartupFailure = 127, 
# 734
cudaErrorApiFailureBase = 10000
# 735
}; 
#endif
# 740 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 740
enum cudaChannelFormatKind { 
# 742
cudaChannelFormatKindSigned, 
# 743
cudaChannelFormatKindUnsigned, 
# 744
cudaChannelFormatKindFloat, 
# 745
cudaChannelFormatKindNone
# 746
}; 
#endif
# 751 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 751
struct cudaChannelFormatDesc { 
# 753
int x; 
# 754
int y; 
# 755
int z; 
# 756
int w; 
# 757
cudaChannelFormatKind f; 
# 758
}; 
#endif
# 763 "/usr/local/cuda-7.0//include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 768
typedef const cudaArray *cudaArray_const_t; 
# 770
struct cudaArray; 
# 775
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 780
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 782
struct cudaMipmappedArray; 
# 787
#if 0
# 787
enum cudaMemoryType { 
# 789
cudaMemoryTypeHost = 1, 
# 790
cudaMemoryTypeDevice
# 791
}; 
#endif
# 796 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 796
enum cudaMemcpyKind { 
# 798
cudaMemcpyHostToHost, 
# 799
cudaMemcpyHostToDevice, 
# 800
cudaMemcpyDeviceToHost, 
# 801
cudaMemcpyDeviceToDevice, 
# 802
cudaMemcpyDefault
# 803
}; 
#endif
# 810 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 810
struct cudaPitchedPtr { 
# 812
void *ptr; 
# 813
size_t pitch; 
# 814
size_t xsize; 
# 815
size_t ysize; 
# 816
}; 
#endif
# 823 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 823
struct cudaExtent { 
# 825
size_t width; 
# 826
size_t height; 
# 827
size_t depth; 
# 828
}; 
#endif
# 835 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 835
struct cudaPos { 
# 837
size_t x; 
# 838
size_t y; 
# 839
size_t z; 
# 840
}; 
#endif
# 845 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 845
struct cudaMemcpy3DParms { 
# 847
cudaArray_t srcArray; 
# 848
cudaPos srcPos; 
# 849
cudaPitchedPtr srcPtr; 
# 851
cudaArray_t dstArray; 
# 852
cudaPos dstPos; 
# 853
cudaPitchedPtr dstPtr; 
# 855
cudaExtent extent; 
# 856
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 857
}; 
#endif
# 862 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 862
struct cudaMemcpy3DPeerParms { 
# 864
cudaArray_t srcArray; 
# 865
cudaPos srcPos; 
# 866
cudaPitchedPtr srcPtr; 
# 867
int srcDevice; 
# 869
cudaArray_t dstArray; 
# 870
cudaPos dstPos; 
# 871
cudaPitchedPtr dstPtr; 
# 872
int dstDevice; 
# 874
cudaExtent extent; 
# 875
}; 
#endif
# 880 "/usr/local/cuda-7.0//include/driver_types.h"
struct cudaGraphicsResource; 
# 885
#if 0
# 885
enum cudaGraphicsRegisterFlags { 
# 887
cudaGraphicsRegisterFlagsNone, 
# 888
cudaGraphicsRegisterFlagsReadOnly, 
# 889
cudaGraphicsRegisterFlagsWriteDiscard, 
# 890
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 891
cudaGraphicsRegisterFlagsTextureGather = 8
# 892
}; 
#endif
# 897 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 897
enum cudaGraphicsMapFlags { 
# 899
cudaGraphicsMapFlagsNone, 
# 900
cudaGraphicsMapFlagsReadOnly, 
# 901
cudaGraphicsMapFlagsWriteDiscard
# 902
}; 
#endif
# 907 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 907
enum cudaGraphicsCubeFace { 
# 909
cudaGraphicsCubeFacePositiveX, 
# 910
cudaGraphicsCubeFaceNegativeX, 
# 911
cudaGraphicsCubeFacePositiveY, 
# 912
cudaGraphicsCubeFaceNegativeY, 
# 913
cudaGraphicsCubeFacePositiveZ, 
# 914
cudaGraphicsCubeFaceNegativeZ
# 915
}; 
#endif
# 920 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 920
enum cudaResourceType { 
# 922
cudaResourceTypeArray, 
# 923
cudaResourceTypeMipmappedArray, 
# 924
cudaResourceTypeLinear, 
# 925
cudaResourceTypePitch2D
# 926
}; 
#endif
# 931 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 931
enum cudaResourceViewFormat { 
# 933
cudaResViewFormatNone, 
# 934
cudaResViewFormatUnsignedChar1, 
# 935
cudaResViewFormatUnsignedChar2, 
# 936
cudaResViewFormatUnsignedChar4, 
# 937
cudaResViewFormatSignedChar1, 
# 938
cudaResViewFormatSignedChar2, 
# 939
cudaResViewFormatSignedChar4, 
# 940
cudaResViewFormatUnsignedShort1, 
# 941
cudaResViewFormatUnsignedShort2, 
# 942
cudaResViewFormatUnsignedShort4, 
# 943
cudaResViewFormatSignedShort1, 
# 944
cudaResViewFormatSignedShort2, 
# 945
cudaResViewFormatSignedShort4, 
# 946
cudaResViewFormatUnsignedInt1, 
# 947
cudaResViewFormatUnsignedInt2, 
# 948
cudaResViewFormatUnsignedInt4, 
# 949
cudaResViewFormatSignedInt1, 
# 950
cudaResViewFormatSignedInt2, 
# 951
cudaResViewFormatSignedInt4, 
# 952
cudaResViewFormatHalf1, 
# 953
cudaResViewFormatHalf2, 
# 954
cudaResViewFormatHalf4, 
# 955
cudaResViewFormatFloat1, 
# 956
cudaResViewFormatFloat2, 
# 957
cudaResViewFormatFloat4, 
# 958
cudaResViewFormatUnsignedBlockCompressed1, 
# 959
cudaResViewFormatUnsignedBlockCompressed2, 
# 960
cudaResViewFormatUnsignedBlockCompressed3, 
# 961
cudaResViewFormatUnsignedBlockCompressed4, 
# 962
cudaResViewFormatSignedBlockCompressed4, 
# 963
cudaResViewFormatUnsignedBlockCompressed5, 
# 964
cudaResViewFormatSignedBlockCompressed5, 
# 965
cudaResViewFormatUnsignedBlockCompressed6H, 
# 966
cudaResViewFormatSignedBlockCompressed6H, 
# 967
cudaResViewFormatUnsignedBlockCompressed7
# 968
}; 
#endif
# 973 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 973
struct cudaResourceDesc { 
# 974
cudaResourceType resType; 
# 976
union { 
# 977
struct { 
# 978
cudaArray_t array; 
# 979
} array; 
# 980
struct { 
# 981
cudaMipmappedArray_t mipmap; 
# 982
} mipmap; 
# 983
struct { 
# 984
void *devPtr; 
# 985
cudaChannelFormatDesc desc; 
# 986
size_t sizeInBytes; 
# 987
} linear; 
# 988
struct { 
# 989
void *devPtr; 
# 990
cudaChannelFormatDesc desc; 
# 991
size_t width; 
# 992
size_t height; 
# 993
size_t pitchInBytes; 
# 994
} pitch2D; 
# 995
} res; 
# 996
}; 
#endif
# 1001 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1001
struct cudaResourceViewDesc { 
# 1003
cudaResourceViewFormat format; 
# 1004
size_t width; 
# 1005
size_t height; 
# 1006
size_t depth; 
# 1007
unsigned firstMipmapLevel; 
# 1008
unsigned lastMipmapLevel; 
# 1009
unsigned firstLayer; 
# 1010
unsigned lastLayer; 
# 1011
}; 
#endif
# 1016 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1016
struct cudaPointerAttributes { 
# 1022
cudaMemoryType memoryType; 
# 1033 "/usr/local/cuda-7.0//include/driver_types.h"
int device; 
# 1039
void *devicePointer; 
# 1045
void *hostPointer; 
# 1050
int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1051
}; 
#endif
# 1056 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1056
struct cudaFuncAttributes { 
# 1063
size_t sharedSizeBytes; 
# 1069
size_t constSizeBytes; 
# 1074
size_t localSizeBytes; 
# 1081
int maxThreadsPerBlock; 
# 1086
int numRegs; 
# 1093
int ptxVersion; 
# 1100
int binaryVersion; 
# 1106
int cacheModeCA; 
# 1107
}; 
#endif
# 1112 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1112
enum cudaFuncCache { 
# 1114
cudaFuncCachePreferNone, 
# 1115
cudaFuncCachePreferShared, 
# 1116
cudaFuncCachePreferL1, 
# 1117
cudaFuncCachePreferEqual
# 1118
}; 
#endif
# 1124 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1124
enum cudaSharedMemConfig { 
# 1126
cudaSharedMemBankSizeDefault, 
# 1127
cudaSharedMemBankSizeFourByte, 
# 1128
cudaSharedMemBankSizeEightByte
# 1129
}; 
#endif
# 1134 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1134
enum cudaComputeMode { 
# 1136
cudaComputeModeDefault, 
# 1137
cudaComputeModeExclusive, 
# 1138
cudaComputeModeProhibited, 
# 1139
cudaComputeModeExclusiveProcess
# 1140
}; 
#endif
# 1145 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1145
enum cudaLimit { 
# 1147
cudaLimitStackSize, 
# 1148
cudaLimitPrintfFifoSize, 
# 1149
cudaLimitMallocHeapSize, 
# 1150
cudaLimitDevRuntimeSyncDepth, 
# 1151
cudaLimitDevRuntimePendingLaunchCount
# 1152
}; 
#endif
# 1157 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1157
enum cudaOutputMode { 
# 1159
cudaKeyValuePair, 
# 1160
cudaCSV
# 1161
}; 
#endif
# 1166 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1166
enum cudaDeviceAttr { 
# 1168
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1169
cudaDevAttrMaxBlockDimX, 
# 1170
cudaDevAttrMaxBlockDimY, 
# 1171
cudaDevAttrMaxBlockDimZ, 
# 1172
cudaDevAttrMaxGridDimX, 
# 1173
cudaDevAttrMaxGridDimY, 
# 1174
cudaDevAttrMaxGridDimZ, 
# 1175
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1176
cudaDevAttrTotalConstantMemory, 
# 1177
cudaDevAttrWarpSize, 
# 1178
cudaDevAttrMaxPitch, 
# 1179
cudaDevAttrMaxRegistersPerBlock, 
# 1180
cudaDevAttrClockRate, 
# 1181
cudaDevAttrTextureAlignment, 
# 1182
cudaDevAttrGpuOverlap, 
# 1183
cudaDevAttrMultiProcessorCount, 
# 1184
cudaDevAttrKernelExecTimeout, 
# 1185
cudaDevAttrIntegrated, 
# 1186
cudaDevAttrCanMapHostMemory, 
# 1187
cudaDevAttrComputeMode, 
# 1188
cudaDevAttrMaxTexture1DWidth, 
# 1189
cudaDevAttrMaxTexture2DWidth, 
# 1190
cudaDevAttrMaxTexture2DHeight, 
# 1191
cudaDevAttrMaxTexture3DWidth, 
# 1192
cudaDevAttrMaxTexture3DHeight, 
# 1193
cudaDevAttrMaxTexture3DDepth, 
# 1194
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1195
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1196
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1197
cudaDevAttrSurfaceAlignment, 
# 1198
cudaDevAttrConcurrentKernels, 
# 1199
cudaDevAttrEccEnabled, 
# 1200
cudaDevAttrPciBusId, 
# 1201
cudaDevAttrPciDeviceId, 
# 1202
cudaDevAttrTccDriver, 
# 1203
cudaDevAttrMemoryClockRate, 
# 1204
cudaDevAttrGlobalMemoryBusWidth, 
# 1205
cudaDevAttrL2CacheSize, 
# 1206
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1207
cudaDevAttrAsyncEngineCount, 
# 1208
cudaDevAttrUnifiedAddressing, 
# 1209
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1210
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1211
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1212
cudaDevAttrMaxTexture2DGatherHeight, 
# 1213
cudaDevAttrMaxTexture3DWidthAlt, 
# 1214
cudaDevAttrMaxTexture3DHeightAlt, 
# 1215
cudaDevAttrMaxTexture3DDepthAlt, 
# 1216
cudaDevAttrPciDomainId, 
# 1217
cudaDevAttrTexturePitchAlignment, 
# 1218
cudaDevAttrMaxTextureCubemapWidth, 
# 1219
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1220
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1221
cudaDevAttrMaxSurface1DWidth, 
# 1222
cudaDevAttrMaxSurface2DWidth, 
# 1223
cudaDevAttrMaxSurface2DHeight, 
# 1224
cudaDevAttrMaxSurface3DWidth, 
# 1225
cudaDevAttrMaxSurface3DHeight, 
# 1226
cudaDevAttrMaxSurface3DDepth, 
# 1227
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1228
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1229
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1230
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1231
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1232
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1233
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1234
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1235
cudaDevAttrMaxTexture1DLinearWidth, 
# 1236
cudaDevAttrMaxTexture2DLinearWidth, 
# 1237
cudaDevAttrMaxTexture2DLinearHeight, 
# 1238
cudaDevAttrMaxTexture2DLinearPitch, 
# 1239
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1240
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1241
cudaDevAttrComputeCapabilityMajor, 
# 1242
cudaDevAttrComputeCapabilityMinor, 
# 1243
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1244
cudaDevAttrStreamPrioritiesSupported, 
# 1245
cudaDevAttrGlobalL1CacheSupported, 
# 1246
cudaDevAttrLocalL1CacheSupported, 
# 1247
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1248
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1249
cudaDevAttrManagedMemory, 
# 1250
cudaDevAttrIsMultiGpuBoard, 
# 1251
cudaDevAttrMultiGpuBoardGroupID
# 1252
}; 
#endif
# 1257 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
# 1257
struct cudaDeviceProp { 
# 1259
char name[256]; 
# 1260
size_t totalGlobalMem; 
# 1261
size_t sharedMemPerBlock; 
# 1262
int regsPerBlock; 
# 1263
int warpSize; 
# 1264
size_t memPitch; 
# 1265
int maxThreadsPerBlock; 
# 1266
int maxThreadsDim[3]; 
# 1267
int maxGridSize[3]; 
# 1268
int clockRate; 
# 1269
size_t totalConstMem; 
# 1270
int major; 
# 1271
int minor; 
# 1272
size_t textureAlignment; 
# 1273
size_t texturePitchAlignment; 
# 1274
int deviceOverlap; 
# 1275
int multiProcessorCount; 
# 1276
int kernelExecTimeoutEnabled; 
# 1277
int integrated; 
# 1278
int canMapHostMemory; 
# 1279
int computeMode; 
# 1280
int maxTexture1D; 
# 1281
int maxTexture1DMipmap; 
# 1282
int maxTexture1DLinear; 
# 1283
int maxTexture2D[2]; 
# 1284
int maxTexture2DMipmap[2]; 
# 1285
int maxTexture2DLinear[3]; 
# 1286
int maxTexture2DGather[2]; 
# 1287
int maxTexture3D[3]; 
# 1288
int maxTexture3DAlt[3]; 
# 1289
int maxTextureCubemap; 
# 1290
int maxTexture1DLayered[2]; 
# 1291
int maxTexture2DLayered[3]; 
# 1292
int maxTextureCubemapLayered[2]; 
# 1293
int maxSurface1D; 
# 1294
int maxSurface2D[2]; 
# 1295
int maxSurface3D[3]; 
# 1296
int maxSurface1DLayered[2]; 
# 1297
int maxSurface2DLayered[3]; 
# 1298
int maxSurfaceCubemap; 
# 1299
int maxSurfaceCubemapLayered[2]; 
# 1300
size_t surfaceAlignment; 
# 1301
int concurrentKernels; 
# 1302
int ECCEnabled; 
# 1303
int pciBusID; 
# 1304
int pciDeviceID; 
# 1305
int pciDomainID; 
# 1306
int tccDriver; 
# 1307
int asyncEngineCount; 
# 1308
int unifiedAddressing; 
# 1309
int memoryClockRate; 
# 1310
int memoryBusWidth; 
# 1311
int l2CacheSize; 
# 1312
int maxThreadsPerMultiProcessor; 
# 1313
int streamPrioritiesSupported; 
# 1314
int globalL1CacheSupported; 
# 1315
int localL1CacheSupported; 
# 1316
size_t sharedMemPerMultiprocessor; 
# 1317
int regsPerMultiprocessor; 
# 1318
int managedMemory; 
# 1319
int isMultiGpuBoard; 
# 1320
int multiGpuBoardGroupID; 
# 1321
}; 
#endif
# 1400 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef 
# 1397
struct cudaIpcEventHandle_st { 
# 1399
char reserved[64]; 
# 1400
} cudaIpcEventHandle_t; 
#endif
# 1408 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef 
# 1405
struct cudaIpcMemHandle_st { 
# 1407
char reserved[64]; 
# 1408
} cudaIpcMemHandle_t; 
#endif
# 1419 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef cudaError 
# 1419
cudaError_t; 
#endif
# 1424 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 1424
cudaStream_t; 
#endif
# 1429 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 1429
cudaEvent_t; 
#endif
# 1434 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 1434
cudaGraphicsResource_t; 
#endif
# 1439 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef struct CUuuid_st 
# 1439
cudaUUID_t; 
#endif
# 1444 "/usr/local/cuda-7.0//include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 1444
cudaOutputMode_t; 
#endif
# 84 "/usr/local/cuda-7.0//include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-7.0//include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-7.0//include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/local/cuda-7.0//include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 155
int __cudaReserved[15]; 
# 156
}; 
#endif
# 161 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
# 161
struct cudaTextureDesc { 
# 166
cudaTextureAddressMode addressMode[3]; 
# 170
cudaTextureFilterMode filterMode; 
# 174
cudaTextureReadMode readMode; 
# 178
int sRGB; 
# 182
int normalizedCoords; 
# 186
unsigned maxAnisotropy; 
# 190
cudaTextureFilterMode mipmapFilterMode; 
# 194
float mipmapLevelBias; 
# 198
float minMipmapLevelClamp; 
# 202
float maxMipmapLevelClamp; 
# 203
}; 
#endif
# 208 "/usr/local/cuda-7.0//include/texture_types.h"
#if 0
typedef unsigned long long 
# 208
cudaTextureObject_t; 
#endif
# 98 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 98
struct char1 { 
# 100
signed char x; 
# 101
}; 
#endif
# 103 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 103
struct uchar1 { 
# 105
unsigned char x; 
# 106
}; 
#endif
# 109 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 109
struct __attribute((aligned(2))) char2 { 
# 111
signed char x, y; 
# 112
}; 
#endif
# 114 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 114
struct __attribute((aligned(2))) uchar2 { 
# 116
unsigned char x, y; 
# 117
}; 
#endif
# 119 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 119
struct char3 { 
# 121
signed char x, y, z; 
# 122
}; 
#endif
# 124 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 124
struct uchar3 { 
# 126
unsigned char x, y, z; 
# 127
}; 
#endif
# 129 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 129
struct __attribute((aligned(4))) char4 { 
# 131
signed char x, y, z, w; 
# 132
}; 
#endif
# 134 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 134
struct __attribute((aligned(4))) uchar4 { 
# 136
unsigned char x, y, z, w; 
# 137
}; 
#endif
# 139 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 139
struct short1 { 
# 141
short x; 
# 142
}; 
#endif
# 144 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 144
struct ushort1 { 
# 146
unsigned short x; 
# 147
}; 
#endif
# 149 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 149
struct __attribute((aligned(4))) short2 { 
# 151
short x, y; 
# 152
}; 
#endif
# 154 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 154
struct __attribute((aligned(4))) ushort2 { 
# 156
unsigned short x, y; 
# 157
}; 
#endif
# 159 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 159
struct short3 { 
# 161
short x, y, z; 
# 162
}; 
#endif
# 164 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 164
struct ushort3 { 
# 166
unsigned short x, y, z; 
# 167
}; 
#endif
# 169 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 169
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 170 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 170
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 172 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 172
struct int1 { 
# 174
int x; 
# 175
}; 
#endif
# 177 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 177
struct uint1 { 
# 179
unsigned x; 
# 180
}; 
#endif
# 182 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 182
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 183 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 183
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 185 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 185
struct int3 { 
# 187
int x, y, z; 
# 188
}; 
#endif
# 190 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 190
struct uint3 { 
# 192
unsigned x, y, z; 
# 193
}; 
#endif
# 195 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 195
struct __attribute((aligned(16))) int4 { 
# 197
int x, y, z, w; 
# 198
}; 
#endif
# 200 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 200
struct __attribute((aligned(16))) uint4 { 
# 202
unsigned x, y, z, w; 
# 203
}; 
#endif
# 205 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 205
struct long1 { 
# 207
long x; 
# 208
}; 
#endif
# 210 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 210
struct ulong1 { 
# 212
unsigned long x; 
# 213
}; 
#endif
# 220 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 220
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 222
long x, y; 
# 223
}; 
#endif
# 225 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 225
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 227
unsigned long x, y; 
# 228
}; 
#endif
# 232 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 232
struct long3 { 
# 234
long x, y, z; 
# 235
}; 
#endif
# 237 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 237
struct ulong3 { 
# 239
unsigned long x, y, z; 
# 240
}; 
#endif
# 242 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 242
struct __attribute((aligned(16))) long4 { 
# 244
long x, y, z, w; 
# 245
}; 
#endif
# 247 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 247
struct __attribute((aligned(16))) ulong4 { 
# 249
unsigned long x, y, z, w; 
# 250
}; 
#endif
# 252 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 252
struct float1 { 
# 254
float x; 
# 255
}; 
#endif
# 274 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 274
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 279 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 279
struct float3 { 
# 281
float x, y, z; 
# 282
}; 
#endif
# 284 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 284
struct __attribute((aligned(16))) float4 { 
# 286
float x, y, z, w; 
# 287
}; 
#endif
# 289 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 289
struct longlong1 { 
# 291
long long x; 
# 292
}; 
#endif
# 294 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 294
struct ulonglong1 { 
# 296
unsigned long long x; 
# 297
}; 
#endif
# 299 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 299
struct __attribute((aligned(16))) longlong2 { 
# 301
long long x, y; 
# 302
}; 
#endif
# 304 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 304
struct __attribute((aligned(16))) ulonglong2 { 
# 306
unsigned long long x, y; 
# 307
}; 
#endif
# 309 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 309
struct longlong3 { 
# 311
long long x, y, z; 
# 312
}; 
#endif
# 314 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 314
struct ulonglong3 { 
# 316
unsigned long long x, y, z; 
# 317
}; 
#endif
# 319 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 319
struct __attribute((aligned(16))) longlong4 { 
# 321
long long x, y, z, w; 
# 322
}; 
#endif
# 324 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 324
struct __attribute((aligned(16))) ulonglong4 { 
# 326
unsigned long long x, y, z, w; 
# 327
}; 
#endif
# 329 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 329
struct double1 { 
# 331
double x; 
# 332
}; 
#endif
# 334 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 334
struct __attribute((aligned(16))) double2 { 
# 336
double x, y; 
# 337
}; 
#endif
# 339 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 339
struct double3 { 
# 341
double x, y, z; 
# 342
}; 
#endif
# 344 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 344
struct __attribute((aligned(16))) double4 { 
# 346
double x, y, z, w; 
# 347
}; 
#endif
# 362 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef char1 
# 362
char1; 
#endif
# 363 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uchar1 
# 363
uchar1; 
#endif
# 364 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef char2 
# 364
char2; 
#endif
# 365 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uchar2 
# 365
uchar2; 
#endif
# 366 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef char3 
# 366
char3; 
#endif
# 367 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uchar3 
# 367
uchar3; 
#endif
# 368 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef char4 
# 368
char4; 
#endif
# 369 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uchar4 
# 369
uchar4; 
#endif
# 370 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef short1 
# 370
short1; 
#endif
# 371 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ushort1 
# 371
ushort1; 
#endif
# 372 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef short2 
# 372
short2; 
#endif
# 373 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ushort2 
# 373
ushort2; 
#endif
# 374 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef short3 
# 374
short3; 
#endif
# 375 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ushort3 
# 375
ushort3; 
#endif
# 376 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef short4 
# 376
short4; 
#endif
# 377 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ushort4 
# 377
ushort4; 
#endif
# 378 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef int1 
# 378
int1; 
#endif
# 379 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uint1 
# 379
uint1; 
#endif
# 380 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef int2 
# 380
int2; 
#endif
# 381 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uint2 
# 381
uint2; 
#endif
# 382 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef int3 
# 382
int3; 
#endif
# 383 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uint3 
# 383
uint3; 
#endif
# 384 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef int4 
# 384
int4; 
#endif
# 385 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef uint4 
# 385
uint4; 
#endif
# 386 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef long1 
# 386
long1; 
#endif
# 387 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulong1 
# 387
ulong1; 
#endif
# 388 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef long2 
# 388
long2; 
#endif
# 389 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulong2 
# 389
ulong2; 
#endif
# 390 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef long3 
# 390
long3; 
#endif
# 391 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulong3 
# 391
ulong3; 
#endif
# 392 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef long4 
# 392
long4; 
#endif
# 393 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulong4 
# 393
ulong4; 
#endif
# 394 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef float1 
# 394
float1; 
#endif
# 395 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef float2 
# 395
float2; 
#endif
# 396 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef float3 
# 396
float3; 
#endif
# 397 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef float4 
# 397
float4; 
#endif
# 398 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef longlong1 
# 398
longlong1; 
#endif
# 399 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulonglong1 
# 399
ulonglong1; 
#endif
# 400 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef longlong2 
# 400
longlong2; 
#endif
# 401 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulonglong2 
# 401
ulonglong2; 
#endif
# 402 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef longlong3 
# 402
longlong3; 
#endif
# 403 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulonglong3 
# 403
ulonglong3; 
#endif
# 404 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef longlong4 
# 404
longlong4; 
#endif
# 405 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef ulonglong4 
# 405
ulonglong4; 
#endif
# 406 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef double1 
# 406
double1; 
#endif
# 407 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef double2 
# 407
double2; 
#endif
# 408 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef double3 
# 408
double3; 
#endif
# 409 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef double4 
# 409
double4; 
#endif
# 417 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
# 417
struct dim3 { 
# 419
unsigned x, y, z; 
# 425
}; 
#endif
# 427 "/usr/local/cuda-7.0//include/vector_types.h"
#if 0
typedef dim3 
# 427
dim3; 
#endif
# 106 "/usr/local/cuda-7.0//include/cuda_device_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 107
extern "C" cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 108
extern "C" cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 109
extern "C" cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 110
extern "C" cudaError_t cudaDeviceSynchronize(); 
# 111
extern "C" cudaError_t cudaGetLastError(); 
# 112
extern "C" cudaError_t cudaPeekAtLastError(); 
# 113
extern "C" const char *cudaGetErrorString(cudaError_t error); 
# 114
extern "C" const char *cudaGetErrorName(cudaError_t error); 
# 115
extern "C" cudaError_t cudaGetDeviceCount(int * count); 
# 116
extern "C" cudaError_t cudaGetDevice(int * device); 
# 117
extern "C" cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 118
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 119
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 120
extern "C" { __attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); } 
# 121
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 122
extern "C" cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 123
extern "C" { __attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); } 
# 124
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 125
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 126
extern "C" cudaError_t cudaFree(void * devPtr); 
# 127
extern "C" cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 128
extern "C" cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 129
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); } 
# 130
extern "C" cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 131
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); } 
# 132
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 133
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); } 
# 134
extern "C" cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 135
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); } 
# 136
extern "C" cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 137
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); } 
# 138
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 139
extern "C" { __attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); } 
# 140
extern "C" cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 161 "/usr/local/cuda-7.0//include/cuda_device_runtime_api.h"
extern "C" { __attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size); } 
# 189 "/usr/local/cuda-7.0//include/cuda_device_runtime_api.h"
extern "C" { __attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); } 
# 190
extern "C" { __attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); } 
# 191
extern "C" { __attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); } 
# 209 "/usr/local/cuda-7.0//include/cuda_device_runtime_api.h"
extern "C" { __attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); } 
# 210
extern "C" { __attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); } 
# 213
extern "C" cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 214
extern "C" cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 218
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 219
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 220
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 221
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 257 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceReset(); 
# 274 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSynchronize(); 
# 349 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 378 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 409 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 444 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 486 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 515 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 557 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 580 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 607 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 649 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 684 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 722 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 772 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 802 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 842 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit(); 
# 866 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize(); 
# 913 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 944 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 979 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1025 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1079 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError(); 
# 1120 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPeekAtLastError(); 
# 1135 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorName(cudaError_t error); 
# 1150 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t error); 
# 1180 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int * count); 
# 1416 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1576 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1595 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 1629 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int device); 
# 1646 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int * device); 
# 1675 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 1737 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 1778 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 1815 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 1844 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 1887 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 1911 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 1932 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 1953 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 1985 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 1999 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" { typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); }
# 2056 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2076 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2097 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2163 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length, unsigned flags); 
# 2199 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 2233 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 2264 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 2296 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t event); 
# 2328 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 2353 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 2394 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 2450 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 2499 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 2550 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 2583 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 2604 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double * d); 
# 2625 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double * d); 
# 2681 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 2725 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 2776 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); 
# 2805 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void * arg, size_t size, size_t offset); 
# 2842 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const void * func); 
# 2931 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags); 
# 2957 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 2986 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 3025 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 3067 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 3094 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void * devPtr); 
# 3114 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void * ptr); 
# 3136 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray_t array); 
# 3158 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 3217 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 3274 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 3293 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostUnregister(void * ptr); 
# 3320 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 3339 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 3374 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 3509 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 3630 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 3656 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 3753 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 3781 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 3889 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 3912 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 3931 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 3952 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 3987 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 4019 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 4053 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 4087 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 4122 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 4164 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 4206 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 4248 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 4288 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 4323 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 4358 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 4404 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4436 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 4478 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4520 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4575 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4626 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4676 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4719 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4762 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4788 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 4818 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 4861 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 4893 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 4930 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 4980 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 5003 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 5025 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 5178 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 5216 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 5253 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 5272 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 5330 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 5362 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 5398 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 5430 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 5459 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 5493 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 5518 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 5558 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 5593 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 5640 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U); 
# 5691 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
# 5719 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 5747 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 5768 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 5793 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
# 5818 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 5858 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 5877 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 6094 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 6109 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 6125 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 6141 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 6158 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 6197 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 6212 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 6227 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 6254 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 6271 "/usr/local/cuda-7.0//include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 6276
extern "C" cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 107 "/usr/local/cuda-7.0//include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 108
{ 
# 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 110
} 
# 112
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 113
{ 
# 114
int e = (((int)sizeof(unsigned short)) * 8); 
# 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 117
} 
# 119
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 120
{ 
# 121
int e = (((int)sizeof(unsigned short)) * 8); 
# 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 124
} 
# 126
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 127
{ 
# 128
int e = (((int)sizeof(unsigned short)) * 8); 
# 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 131
} 
# 133
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 134
{ 
# 135
int e = (((int)sizeof(unsigned short)) * 8); 
# 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 138
} 
# 140
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 141
{ 
# 142
int e = (((int)sizeof(char)) * 8); 
# 147
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 149
} 
# 151
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 152
{ 
# 153
int e = (((int)sizeof(signed char)) * 8); 
# 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 156
} 
# 158
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 159
{ 
# 160
int e = (((int)sizeof(unsigned char)) * 8); 
# 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 163
} 
# 165
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 166
{ 
# 167
int e = (((int)sizeof(signed char)) * 8); 
# 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 170
} 
# 172
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 173
{ 
# 174
int e = (((int)sizeof(unsigned char)) * 8); 
# 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 177
} 
# 179
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 180
{ 
# 181
int e = (((int)sizeof(signed char)) * 8); 
# 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 184
} 
# 186
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 187
{ 
# 188
int e = (((int)sizeof(unsigned char)) * 8); 
# 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 191
} 
# 193
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 194
{ 
# 195
int e = (((int)sizeof(signed char)) * 8); 
# 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 198
} 
# 200
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 201
{ 
# 202
int e = (((int)sizeof(unsigned char)) * 8); 
# 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 205
} 
# 207
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 208
{ 
# 209
int e = (((int)sizeof(short)) * 8); 
# 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 212
} 
# 214
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 215
{ 
# 216
int e = (((int)sizeof(unsigned short)) * 8); 
# 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 219
} 
# 221
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 222
{ 
# 223
int e = (((int)sizeof(short)) * 8); 
# 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 226
} 
# 228
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 229
{ 
# 230
int e = (((int)sizeof(unsigned short)) * 8); 
# 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 233
} 
# 235
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 236
{ 
# 237
int e = (((int)sizeof(short)) * 8); 
# 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 240
} 
# 242
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 243
{ 
# 244
int e = (((int)sizeof(unsigned short)) * 8); 
# 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 247
} 
# 249
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 250
{ 
# 251
int e = (((int)sizeof(short)) * 8); 
# 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 254
} 
# 256
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 257
{ 
# 258
int e = (((int)sizeof(unsigned short)) * 8); 
# 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 261
} 
# 263
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 264
{ 
# 265
int e = (((int)sizeof(int)) * 8); 
# 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 268
} 
# 270
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 271
{ 
# 272
int e = (((int)sizeof(unsigned)) * 8); 
# 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 275
} 
# 277
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 278
{ 
# 279
int e = (((int)sizeof(int)) * 8); 
# 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 282
} 
# 284
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 285
{ 
# 286
int e = (((int)sizeof(unsigned)) * 8); 
# 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 289
} 
# 291
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 292
{ 
# 293
int e = (((int)sizeof(int)) * 8); 
# 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 296
} 
# 298
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 299
{ 
# 300
int e = (((int)sizeof(unsigned)) * 8); 
# 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 303
} 
# 305
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 306
{ 
# 307
int e = (((int)sizeof(int)) * 8); 
# 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 310
} 
# 312
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 313
{ 
# 314
int e = (((int)sizeof(unsigned)) * 8); 
# 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 317
} 
# 379 "/usr/local/cuda-7.0//include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 380
{ 
# 381
int e = (((int)sizeof(float)) * 8); 
# 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 384
} 
# 386
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 387
{ 
# 388
int e = (((int)sizeof(float)) * 8); 
# 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 391
} 
# 393
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 394
{ 
# 395
int e = (((int)sizeof(float)) * 8); 
# 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 398
} 
# 400
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 401
{ 
# 402
int e = (((int)sizeof(float)) * 8); 
# 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 405
} 
# 79 "/usr/local/cuda-7.0//include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda-7.0//include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda-7.0//include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 75 "/usr/local/cuda-7.0//include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 77
static inline uchar1 make_uchar1(unsigned char x); 
# 79
static inline char2 make_char2(signed char x, signed char y); 
# 81
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 83
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 85
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 87
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 89
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 91
static inline short1 make_short1(short x); 
# 93
static inline ushort1 make_ushort1(unsigned short x); 
# 95
static inline short2 make_short2(short x, short y); 
# 97
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 99
static inline short3 make_short3(short x, short y, short z); 
# 101
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 103
static inline short4 make_short4(short x, short y, short z, short w); 
# 105
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 107
static inline int1 make_int1(int x); 
# 109
static inline uint1 make_uint1(unsigned x); 
# 111
static inline int2 make_int2(int x, int y); 
# 113
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 115
static inline int3 make_int3(int x, int y, int z); 
# 117
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 119
static inline int4 make_int4(int x, int y, int z, int w); 
# 121
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 123
static inline long1 make_long1(long x); 
# 125
static inline ulong1 make_ulong1(unsigned long x); 
# 127
static inline long2 make_long2(long x, long y); 
# 129
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 131
static inline long3 make_long3(long x, long y, long z); 
# 133
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 135
static inline long4 make_long4(long x, long y, long z, long w); 
# 137
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 139
static inline float1 make_float1(float x); 
# 141
static inline float2 make_float2(float x, float y); 
# 143
static inline float3 make_float3(float x, float y, float z); 
# 145
static inline float4 make_float4(float x, float y, float z, float w); 
# 147
static inline longlong1 make_longlong1(long long x); 
# 149
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 151
static inline longlong2 make_longlong2(long long x, long long y); 
# 153
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 155
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 157
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 159
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 161
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 163
static inline double1 make_double1(double x); 
# 165
static inline double2 make_double2(double x, double y); 
# 167
static inline double3 make_double3(double x, double y, double z); 
# 169
static inline double4 make_double4(double x, double y, double z, double w); 
# 75 "/usr/local/cuda-7.0//include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 76
{ 
# 77
char1 t; (t.x) = x; return t; 
# 78
} 
# 80
static inline uchar1 make_uchar1(unsigned char x) 
# 81
{ 
# 82
uchar1 t; (t.x) = x; return t; 
# 83
} 
# 85
static inline char2 make_char2(signed char x, signed char y) 
# 86
{ 
# 87
char2 t; (t.x) = x; (t.y) = y; return t; 
# 88
} 
# 90
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 91
{ 
# 92
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 93
} 
# 95
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 96
{ 
# 97
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 98
} 
# 100
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 101
{ 
# 102
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 103
} 
# 105
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 106
{ 
# 107
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 108
} 
# 110
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 111
{ 
# 112
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 113
} 
# 115
static inline short1 make_short1(short x) 
# 116
{ 
# 117
short1 t; (t.x) = x; return t; 
# 118
} 
# 120
static inline ushort1 make_ushort1(unsigned short x) 
# 121
{ 
# 122
ushort1 t; (t.x) = x; return t; 
# 123
} 
# 125
static inline short2 make_short2(short x, short y) 
# 126
{ 
# 127
short2 t; (t.x) = x; (t.y) = y; return t; 
# 128
} 
# 130
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 131
{ 
# 132
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 133
} 
# 135
static inline short3 make_short3(short x, short y, short z) 
# 136
{ 
# 137
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 138
} 
# 140
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 141
{ 
# 142
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 143
} 
# 145
static inline short4 make_short4(short x, short y, short z, short w) 
# 146
{ 
# 147
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 148
} 
# 150
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 151
{ 
# 152
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 153
} 
# 155
static inline int1 make_int1(int x) 
# 156
{ 
# 157
int1 t; (t.x) = x; return t; 
# 158
} 
# 160
static inline uint1 make_uint1(unsigned x) 
# 161
{ 
# 162
uint1 t; (t.x) = x; return t; 
# 163
} 
# 165
static inline int2 make_int2(int x, int y) 
# 166
{ 
# 167
int2 t; (t.x) = x; (t.y) = y; return t; 
# 168
} 
# 170
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 171
{ 
# 172
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 173
} 
# 175
static inline int3 make_int3(int x, int y, int z) 
# 176
{ 
# 177
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 178
} 
# 180
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 181
{ 
# 182
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 183
} 
# 185
static inline int4 make_int4(int x, int y, int z, int w) 
# 186
{ 
# 187
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 188
} 
# 190
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 191
{ 
# 192
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 193
} 
# 195
static inline long1 make_long1(long x) 
# 196
{ 
# 197
long1 t; (t.x) = x; return t; 
# 198
} 
# 200
static inline ulong1 make_ulong1(unsigned long x) 
# 201
{ 
# 202
ulong1 t; (t.x) = x; return t; 
# 203
} 
# 205
static inline long2 make_long2(long x, long y) 
# 206
{ 
# 207
long2 t; (t.x) = x; (t.y) = y; return t; 
# 208
} 
# 210
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 211
{ 
# 212
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 213
} 
# 215
static inline long3 make_long3(long x, long y, long z) 
# 216
{ 
# 217
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 218
} 
# 220
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 221
{ 
# 222
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 223
} 
# 225
static inline long4 make_long4(long x, long y, long z, long w) 
# 226
{ 
# 227
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 228
} 
# 230
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 231
{ 
# 232
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 233
} 
# 235
static inline float1 make_float1(float x) 
# 236
{ 
# 237
float1 t; (t.x) = x; return t; 
# 238
} 
# 240
static inline float2 make_float2(float x, float y) 
# 241
{ 
# 242
float2 t; (t.x) = x; (t.y) = y; return t; 
# 243
} 
# 245
static inline float3 make_float3(float x, float y, float z) 
# 246
{ 
# 247
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 248
} 
# 250
static inline float4 make_float4(float x, float y, float z, float w) 
# 251
{ 
# 252
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 253
} 
# 255
static inline longlong1 make_longlong1(long long x) 
# 256
{ 
# 257
longlong1 t; (t.x) = x; return t; 
# 258
} 
# 260
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 261
{ 
# 262
ulonglong1 t; (t.x) = x; return t; 
# 263
} 
# 265
static inline longlong2 make_longlong2(long long x, long long y) 
# 266
{ 
# 267
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 268
} 
# 270
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 271
{ 
# 272
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 273
} 
# 275
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 276
{ 
# 277
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 278
} 
# 280
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 281
{ 
# 282
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 283
} 
# 285
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 286
{ 
# 287
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 288
} 
# 290
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 291
{ 
# 292
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 293
} 
# 295
static inline double1 make_double1(double x) 
# 296
{ 
# 297
double1 t; (t.x) = x; return t; 
# 298
} 
# 300
static inline double2 make_double2(double x, double y) 
# 301
{ 
# 302
double2 t; (t.x) = x; (t.y) = y; return t; 
# 303
} 
# 305
static inline double3 make_double3(double x, double y, double z) 
# 306
{ 
# 307
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 308
} 
# 310
static inline double4 make_double4(double x, double y, double z, double w) 
# 311
{ 
# 312
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 313
} 
# 50 "/usr/include/string.h" 3
extern "C" { extern __attribute((gnu_inline)) inline void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 51
 __attribute((__nonnull__(1, 2))); } 
# 58
extern "C" void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 60
 __attribute((__nonnull__(1, 2))); 
# 69
extern "C" int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 70
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 76
extern __attribute((gnu_inline)) inline void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern __attribute((gnu_inline)) inline const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 82
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline void *
# 83
memchr(void *__s, int __c, size_t __n) throw() 
# 84
{ 
# 85
return __builtin_memchr(__s, __c, __n); 
# 86
} 
# 88
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const void *
# 89
memchr(const void *__s, int __c, size_t __n) throw() 
# 90
{ 
# 91
return __builtin_memchr(__s, __c, __n); 
# 92
} 
# 105
void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 106
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 107
const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 108
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 116
void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 118
const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 119
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 129
extern "C" { extern __attribute((gnu_inline)) inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 130
 __attribute((__nonnull__(1, 2))); } 
# 132
extern "C" { extern __attribute((gnu_inline)) inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 134
 __attribute((__nonnull__(1, 2))); } 
# 137
extern "C" { extern __attribute((gnu_inline)) inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 138
 __attribute((__nonnull__(1, 2))); } 
# 140
extern "C" { extern __attribute((gnu_inline)) inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 141
 __attribute((__nonnull__(1, 2))); } 
# 144
extern "C" int strcmp(const char * __s1, const char * __s2) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern "C" int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 151
extern "C" int strcoll(const char * __s1, const char * __s2) throw()
# 152
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 154
extern "C" size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 156
 __attribute((__nonnull__(2))); 
# 39 "/usr/include/xlocale.h" 3
extern "C" { typedef 
# 27
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
} *__locale_t; }
# 42
extern "C" { typedef __locale_t locale_t; }
# 166 "/usr/include/string.h" 3
extern "C" int strcoll_l(const char * __s1, const char * __s2, __locale_t __l) throw()
# 167
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 169
extern "C" size_t strxfrm_l(char * __dest, const char * __src, size_t __n, __locale_t __l) throw()
# 170
 __attribute((__nonnull__(2, 4))); 
# 176
extern "C" char *strdup(const char * __s) throw()
# 177
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 184
extern "C" char *strndup(const char * __string, size_t __n) throw()
# 185
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 216 "/usr/include/string.h" 3
extern __attribute((gnu_inline)) inline char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 217
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 218
extern __attribute((gnu_inline)) inline const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 219
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 222
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 223
strchr(char *__s, int __c) throw() 
# 224
{ 
# 225
return __builtin_strchr(__s, __c); 
# 226
} 
# 228
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 229
strchr(const char *__s, int __c) throw() 
# 230
{ 
# 231
return __builtin_strchr(__s, __c); 
# 232
} 
# 243
extern __attribute((gnu_inline)) inline char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 244
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 245
extern __attribute((gnu_inline)) inline const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 246
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 249
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 250
strrchr(char *__s, int __c) throw() 
# 251
{ 
# 252
return __builtin_strrchr(__s, __c); 
# 253
} 
# 255
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 256
strrchr(const char *__s, int __c) throw() 
# 257
{ 
# 258
return __builtin_strrchr(__s, __c); 
# 259
} 
# 272
char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 273
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 274
const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 275
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 285
extern "C" size_t strcspn(const char * __s, const char * __reject) throw()
# 286
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 289
extern "C" size_t strspn(const char * __s, const char * __accept) throw()
# 290
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 295
extern __attribute((gnu_inline)) inline char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 296
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
extern __attribute((gnu_inline)) inline const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 298
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 302
strpbrk(char *__s, const char *__accept) throw() 
# 303
{ 
# 304
return __builtin_strpbrk(__s, __accept); 
# 305
} 
# 307
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 308
strpbrk(const char *__s, const char *__accept) throw() 
# 309
{ 
# 310
return __builtin_strpbrk(__s, __accept); 
# 311
} 
# 322
extern __attribute((gnu_inline)) inline char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 323
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 324
extern __attribute((gnu_inline)) inline const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 325
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 328
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 329
strstr(char *__haystack, const char *__needle) throw() 
# 330
{ 
# 331
return __builtin_strstr(__haystack, __needle); 
# 332
} 
# 334
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 335
strstr(const char *__haystack, const char *__needle) throw() 
# 336
{ 
# 337
return __builtin_strstr(__haystack, __needle); 
# 338
} 
# 348
extern "C" char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 349
 __attribute((__nonnull__(2))); 
# 354
extern "C" char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 357
 __attribute((__nonnull__(2, 3))); 
# 359
extern "C" char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 361
 __attribute((__nonnull__(2, 3))); 
# 367
char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 368
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369
const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 382 "/usr/include/string.h" 3
extern "C" void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 384
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 388
extern "C" void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 390
 __attribute((__nonnull__(1, 2))); 
# 391
extern "C" { extern __attribute((gnu_inline)) inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 393
 __attribute((__nonnull__(1, 2))); } 
# 399
extern "C" size_t strlen(const char * __s) throw()
# 400
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 406
extern "C" size_t strnlen(const char * __string, size_t __maxlen) throw()
# 407
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern "C" char *strerror(int __errnum) throw(); 
# 438 "/usr/include/string.h" 3
extern "C" char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 439
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 445
extern "C" char *strerror_l(int __errnum, __locale_t __l) throw(); 
# 451
extern "C" void __bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 455
extern "C" { extern __attribute((gnu_inline)) inline void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 456
 __attribute((__nonnull__(1, 2))); } 
# 459
extern "C" { extern __attribute((gnu_inline)) inline void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); } 
# 462
extern "C" int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 463
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 469
extern __attribute((gnu_inline)) inline char *index(char * __s, int __c) throw() __asm__("index")
# 470
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 471
extern __attribute((gnu_inline)) inline const char *index(const char * __s, int __c) throw() __asm__("index")
# 472
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 475
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 476
index(char *__s, int __c) throw() 
# 477
{ 
# 478
return __builtin_index(__s, __c); 
# 479
} 
# 481
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 482
index(const char *__s, int __c) throw() 
# 483
{ 
# 484
return __builtin_index(__s, __c); 
# 485
} 
# 497
extern __attribute((gnu_inline)) inline char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 498
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 499
extern __attribute((gnu_inline)) inline const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 500
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 503
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 504
rindex(char *__s, int __c) throw() 
# 505
{ 
# 506
return __builtin_rindex(__s, __c); 
# 507
} 
# 509
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 510
rindex(const char *__s, int __c) throw() 
# 511
{ 
# 512
return __builtin_rindex(__s, __c); 
# 513
} 
# 523
extern "C" int ffs(int __i) throw() __attribute((const)); 
# 528
extern "C" int ffsl(long __l) throw() __attribute((const)); 
# 529
__extension__ extern "C" int ffsll(long long __ll) throw()
# 530
 __attribute((const)); 
# 534
extern "C" int strcasecmp(const char * __s1, const char * __s2) throw()
# 535
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 538
extern "C" int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 539
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 545
extern "C" int strcasecmp_l(const char * __s1, const char * __s2, __locale_t __loc) throw()
# 547
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 549
extern "C" int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, __locale_t __loc) throw()
# 551
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 557
extern "C" char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 559
 __attribute((__nonnull__(1, 2))); 
# 564
extern "C" char *strsignal(int __sig) throw(); 
# 567
extern "C" char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 568
 __attribute((__nonnull__(1, 2))); 
# 569
extern "C" { extern __attribute((gnu_inline)) inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 570
 __attribute((__nonnull__(1, 2))); } 
# 574
extern "C" char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 576
 __attribute((__nonnull__(1, 2))); 
# 577
extern "C" { extern __attribute((gnu_inline)) inline char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 579
 __attribute((__nonnull__(1, 2))); } 
# 584
extern "C" int strverscmp(const char * __s1, const char * __s2) throw()
# 585
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 588
extern "C" char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 591
extern "C" void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 599
char *basename(char * __filename) throw() __asm__("basename")
# 600
 __attribute((__nonnull__(1))); 
# 601
const char *basename(const char * __filename) throw() __asm__("basename")
# 602
 __attribute((__nonnull__(1))); 
# 22 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3
extern "C" void __warn_memset_zero_len() __attribute((__warning__("memset used with constant zero length parameter; this could be due to transposed parameters"))); 
# 55 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3
extern "C" { 
# 54
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 55
__attribute((__leaf__)) extern inline void *memmove(void *__dest, const void *__src, size_t __len) throw() 
# 56
{ 
# 57
return __builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 58
} } 
# 62
extern "C" { 
# 61
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 62
__attribute((__leaf__)) extern inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __len) throw() 
# 64
{ 
# 65
return __builtin___mempcpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 66
} } 
# 89 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3
extern "C" { 
# 88
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void
# 89
 __attribute((__leaf__)) bcopy(const void *__src, void *__dest, size_t __len) throw() 
# 90
{ 
# 91
(void)__builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 92
} } 
# 95
extern "C" { 
# 94
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void
# 95
 __attribute((__leaf__)) bzero(void *__dest, size_t __len) throw() 
# 96
{ 
# 97
(void)__builtin___memset_chk(__dest, '\000', __len, __builtin_object_size(__dest, 0)); 
# 98
} } 
# 102
extern "C" { 
# 101
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 102
__attribute((__leaf__)) extern inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 103
{ 
# 104
return __builtin___strcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 105
} } 
# 109
extern "C" { 
# 108
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 109
__attribute((__leaf__)) extern inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 110
{ 
# 111
return __builtin___stpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 112
} } 
# 117
extern "C" { 
# 116
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 117
__attribute((__leaf__)) extern inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __len) throw() 
# 119
{ 
# 120
return __builtin___strncpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 121
} } 
# 124
extern "C" char *__stpncpy_chk(char * __dest, const char * __src, size_t __n, size_t __destlen) throw(); 
# 126
extern "C" char *__stpncpy_alias(char * __dest, const char * __src, size_t __n) throw() __asm__("stpncpy"); 
# 130
extern "C" { 
# 129
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 130
__attribute((__leaf__)) extern inline char *stpncpy(char *__dest, const char *__src, size_t __n) throw() 
# 131
{ 
# 132
if ((__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) && ((!(0)) || (__n <= __builtin_object_size(__dest, 2 > 1)))) { 
# 134
return __stpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1)); }  
# 135
return __stpncpy_alias(__dest, __src, __n); 
# 136
} } 
# 140
extern "C" { 
# 139
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 140
__attribute((__leaf__)) extern inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 141
{ 
# 142
return __builtin___strcat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 143
} } 
# 147
extern "C" { 
# 146
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 147
__attribute((__leaf__)) extern inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __len) throw() 
# 149
{ 
# 150
return __builtin___strncat_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 151
} } 
# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
extern "C" { typedef unsigned char __u_char; }
# 31
extern "C" { typedef unsigned short __u_short; }
# 32
extern "C" { typedef unsigned __u_int; }
# 33
extern "C" { typedef unsigned long __u_long; }
# 36
extern "C" { typedef signed char __int8_t; }
# 37
extern "C" { typedef unsigned char __uint8_t; }
# 38
extern "C" { typedef signed short __int16_t; }
# 39
extern "C" { typedef unsigned short __uint16_t; }
# 40
extern "C" { typedef signed int __int32_t; }
# 41
extern "C" { typedef unsigned __uint32_t; }
# 43
extern "C" { typedef signed long __int64_t; }
# 44
extern "C" { typedef unsigned long __uint64_t; }
# 52
extern "C" { typedef long __quad_t; }
# 53
extern "C" { typedef unsigned long __u_quad_t; }
# 124 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
extern "C" { typedef unsigned long __dev_t; }
# 125
extern "C" { typedef unsigned __uid_t; }
# 126
extern "C" { typedef unsigned __gid_t; }
# 127
extern "C" { typedef unsigned long __ino_t; }
# 128
extern "C" { typedef unsigned long __ino64_t; }
# 129
extern "C" { typedef unsigned __mode_t; }
# 130
extern "C" { typedef unsigned long __nlink_t; }
# 131
extern "C" { typedef long __off_t; }
# 132
extern "C" { typedef long __off64_t; }
# 133
extern "C" { typedef int __pid_t; }
# 134
extern "C" { typedef struct { int __val[2]; } __fsid_t; }
# 135
extern "C" { typedef long __clock_t; }
# 136
extern "C" { typedef unsigned long __rlim_t; }
# 137
extern "C" { typedef unsigned long __rlim64_t; }
# 138
extern "C" { typedef unsigned __id_t; }
# 139
extern "C" { typedef long __time_t; }
# 140
extern "C" { typedef unsigned __useconds_t; }
# 141
extern "C" { typedef long __suseconds_t; }
# 143
extern "C" { typedef int __daddr_t; }
# 144
extern "C" { typedef int __key_t; }
# 147
extern "C" { typedef int __clockid_t; }
# 150
extern "C" { typedef void *__timer_t; }
# 153
extern "C" { typedef long __blksize_t; }
# 158
extern "C" { typedef long __blkcnt_t; }
# 159
extern "C" { typedef long __blkcnt64_t; }
# 162
extern "C" { typedef unsigned long __fsblkcnt_t; }
# 163
extern "C" { typedef unsigned long __fsblkcnt64_t; }
# 166
extern "C" { typedef unsigned long __fsfilcnt_t; }
# 167
extern "C" { typedef unsigned long __fsfilcnt64_t; }
# 170
extern "C" { typedef long __fsword_t; }
# 172
extern "C" { typedef long __ssize_t; }
# 175
extern "C" { typedef long __syscall_slong_t; }
# 177
extern "C" { typedef unsigned long __syscall_ulong_t; }
# 181
extern "C" { typedef __off64_t __loff_t; }
# 182
extern "C" { typedef __quad_t *__qaddr_t; }
# 183
extern "C" { typedef char *__caddr_t; }
# 186
extern "C" { typedef long __intptr_t; }
# 189
extern "C" { typedef unsigned __socklen_t; }
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" { struct timeval { 
# 32
__time_t tv_sec; 
# 33
__suseconds_t tv_usec; 
# 34
}; }
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
extern "C" { struct timex { 
# 27
unsigned modes; 
# 28
__syscall_slong_t offset; 
# 29
__syscall_slong_t freq; 
# 30
__syscall_slong_t maxerror; 
# 31
__syscall_slong_t esterror; 
# 32
int status; 
# 33
__syscall_slong_t constant; 
# 34
__syscall_slong_t precision; 
# 35
__syscall_slong_t tolerance; 
# 36
timeval time; 
# 37
__syscall_slong_t tick; 
# 38
__syscall_slong_t ppsfreq; 
# 39
__syscall_slong_t jitter; 
# 40
int shift; 
# 41
__syscall_slong_t stabil; 
# 42
__syscall_slong_t jitcnt; 
# 43
__syscall_slong_t calcnt; 
# 44
__syscall_slong_t errcnt; 
# 45
__syscall_slong_t stbcnt; 
# 47
int tai; 
# 50
int:32; int:32; int:32; int:32; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; 
# 53
}; }
# 91 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 59 "/usr/include/time.h" 3
extern "C" { typedef __clock_t clock_t; }
# 75 "/usr/include/time.h" 3
extern "C" { typedef __time_t time_t; }
# 91 "/usr/include/time.h" 3
extern "C" { typedef __clockid_t clockid_t; }
# 103 "/usr/include/time.h" 3
extern "C" { typedef __timer_t timer_t; }
# 120 "/usr/include/time.h" 3
extern "C" { struct timespec { 
# 122
__time_t tv_sec; 
# 123
__syscall_slong_t tv_nsec; 
# 124
}; }
# 133
extern "C" { struct tm { 
# 135
int tm_sec; 
# 136
int tm_min; 
# 137
int tm_hour; 
# 138
int tm_mday; 
# 139
int tm_mon; 
# 140
int tm_year; 
# 141
int tm_wday; 
# 142
int tm_yday; 
# 143
int tm_isdst; 
# 146
long tm_gmtoff; 
# 147
const char *tm_zone; 
# 152
}; }
# 161
extern "C" { struct itimerspec { 
# 163
timespec it_interval; 
# 164
timespec it_value; 
# 165
}; }
# 168
struct sigevent; 
# 174
extern "C" { typedef __pid_t pid_t; }
# 189 "/usr/include/time.h" 3
extern "C" clock_t clock() throw(); 
# 192
extern "C" time_t time(time_t * __timer) throw(); 
# 195
extern "C" double difftime(time_t __time1, time_t __time0) throw()
# 196
 __attribute((const)); 
# 199
extern "C" time_t mktime(tm * __tp) throw(); 
# 205
extern "C" size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 213
extern "C" char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 223
extern "C" size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw(); 
# 230
extern "C" char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, __locale_t __loc) throw(); 
# 239
extern "C" tm *gmtime(const time_t * __timer) throw(); 
# 243
extern "C" tm *localtime(const time_t * __timer) throw(); 
# 249
extern "C" tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 254
extern "C" tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 261
extern "C" char *asctime(const tm * __tp) throw(); 
# 264
extern "C" char *ctime(const time_t * __timer) throw(); 
# 272
extern "C" char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 276
extern "C" char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 282
extern "C" { extern char *__tzname[2]; } 
# 283
extern "C" { extern int __daylight; } 
# 284
extern "C" { extern long __timezone; } 
# 289
extern "C" { extern char *tzname[2]; } 
# 293
extern "C" void tzset() throw(); 
# 297
extern "C" { extern int daylight; } 
# 298
extern "C" { extern long timezone; } 
# 304
extern "C" int stime(const time_t * __when) throw(); 
# 319 "/usr/include/time.h" 3
extern "C" time_t timegm(tm * __tp) throw(); 
# 322
extern "C" time_t timelocal(tm * __tp) throw(); 
# 325
extern "C" int dysize(int __year) throw() __attribute((const)); 
# 334 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 339
extern "C" int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 342
extern "C" int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 345
extern "C" int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 353
extern "C" int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 358
extern "C" int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 363
extern "C" int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 368
extern "C" int timer_delete(timer_t __timerid) throw(); 
# 371
extern "C" int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 376
extern "C" int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 380
extern "C" int timer_getoverrun(timer_t __timerid) throw(); 
# 386
extern "C" int timespec_get(timespec * __ts, int __base) throw()
# 387
 __attribute((__nonnull__(1))); 
# 403 "/usr/include/time.h" 3
extern "C" { extern int getdate_err; } 
# 412 "/usr/include/time.h" 3
extern "C" tm *getdate(const char * __string); 
# 426 "/usr/include/time.h" 3
extern "C" int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 71 "/usr/local/cuda-7.0//include/common_functions.h"
extern "C" clock_t clock() throw(); 
# 72
extern "C" void *memset(void *, int, size_t) throw(); 
# 73
extern "C" void *memcpy(void *, const void *, size_t) throw(); 
# 151 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" int abs(int) throw(); 
# 152
extern "C" long labs(long) throw(); 
# 153
extern "C" long long llabs(long long) throw(); 
# 200 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fabs(double x) throw(); 
# 241 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fabsf(float x) throw(); 
# 245
extern "C" int min(int, int); 
# 247
extern "C" unsigned umin(unsigned, unsigned); 
# 248
extern "C" long long llmin(long long, long long); 
# 249
extern "C" unsigned long long ullmin(unsigned long long, unsigned long long); 
# 270 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fminf(float x, float y) throw(); 
# 290 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fmin(double x, double y) throw(); 
# 297
extern "C" int max(int, int); 
# 299
extern "C" unsigned umax(unsigned, unsigned); 
# 300
extern "C" long long llmax(long long, long long); 
# 301
extern "C" unsigned long long ullmax(unsigned long long, unsigned long long); 
# 322 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fmaxf(float x, float y) throw(); 
# 342 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fmax(double, double) throw(); 
# 386 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double sin(double x) throw(); 
# 419 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cos(double x) throw(); 
# 438 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" void sincos(double x, double * sptr, double * cptr) throw(); 
# 454 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" void sincosf(float x, float * sptr, float * cptr) throw(); 
# 499 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double tan(double x) throw(); 
# 568 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double sqrt(double x) throw(); 
# 640 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double rsqrt(double x); 
# 710 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float rsqrtf(float x); 
# 766 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double log2(double x) throw(); 
# 791 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double exp2(double x) throw(); 
# 816 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float exp2f(float x) throw(); 
# 843 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double exp10(double x) throw(); 
# 866 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float exp10f(float x) throw(); 
# 912 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double expm1(double x) throw(); 
# 957 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float expm1f(float x) throw(); 
# 1012 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float log2f(float x) throw(); 
# 1066 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double log10(double x) throw(); 
# 1137 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double log(double x) throw(); 
# 1231 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double log1p(double x) throw(); 
# 1328 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float log1pf(float x) throw(); 
# 1403 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double floor(double x) throw(); 
# 1442 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double exp(double x) throw(); 
# 1473 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cosh(double x) throw(); 
# 1503 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double sinh(double x) throw(); 
# 1533 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double tanh(double x) throw(); 
# 1568 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double acosh(double x) throw(); 
# 1606 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float acoshf(float x) throw(); 
# 1622 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double asinh(double x) throw(); 
# 1638 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float asinhf(float x) throw(); 
# 1692 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double atanh(double x) throw(); 
# 1746 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float atanhf(float x) throw(); 
# 1805 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double ldexp(double x, int exp) throw(); 
# 1861 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float ldexpf(float x, int exp) throw(); 
# 1913 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double logb(double x) throw(); 
# 1968 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float logbf(float x) throw(); 
# 1998 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" int ilogb(double x) throw(); 
# 2028 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" int ilogbf(float x) throw(); 
# 2104 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double scalbn(double x, int n) throw(); 
# 2180 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float scalbnf(float x, int n) throw(); 
# 2256 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double scalbln(double x, long n) throw(); 
# 2332 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float scalblnf(float x, long n) throw(); 
# 2410 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double frexp(double x, int * nptr) throw(); 
# 2485 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float frexpf(float x, int * nptr) throw(); 
# 2499 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double round(double x) throw(); 
# 2516 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float roundf(float x) throw(); 
# 2534 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long lround(double x) throw(); 
# 2552 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long lroundf(float x) throw(); 
# 2570 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long long llround(double x) throw(); 
# 2588 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long long llroundf(float x) throw(); 
# 2603 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double rint(double x) throw(); 
# 2618 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float rintf(float x) throw(); 
# 2634 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long lrint(double x) throw(); 
# 2650 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long lrintf(float x) throw(); 
# 2666 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long long llrint(double x) throw(); 
# 2682 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" long long llrintf(float x) throw(); 
# 2735 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double nearbyint(double x) throw(); 
# 2788 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float nearbyintf(float x) throw(); 
# 2850 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double ceil(double x) throw(); 
# 2862 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double trunc(double x) throw(); 
# 2877 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float truncf(float x) throw(); 
# 2903 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fdim(double x, double y) throw(); 
# 2929 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fdimf(float x, float y) throw(); 
# 2965 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double atan2(double y, double x) throw(); 
# 2996 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double atan(double x) throw(); 
# 3019 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double acos(double x) throw(); 
# 3051 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double asin(double x) throw(); 
# 3093 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double hypot(double x, double y) throw(); 
# 3145 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double rhypot(double x, double y) throw(); 
# 3191 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float hypotf(float x, float y) throw(); 
# 3243 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float rhypotf(float x, float y) throw(); 
# 3290 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double norm3d(double a, double b, double c) throw(); 
# 3341 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double rnorm3d(double a, double b, double c) throw(); 
# 3390 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double norm4d(double a, double b, double c, double d) throw(); 
# 3434 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float norm3df(float a, float b, float c) throw(); 
# 3485 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float rnorm3df(float a, float b, float c) throw(); 
# 3534 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float norm4df(float a, float b, float c, float d) throw(); 
# 3618 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cbrt(double x) throw(); 
# 3704 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float cbrtf(float x) throw(); 
# 3759 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double rcbrt(double x); 
# 3809 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float rcbrtf(float x); 
# 3869 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double sinpi(double x); 
# 3929 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float sinpif(float x); 
# 3981 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cospi(double x); 
# 4033 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float cospif(float x); 
# 4063 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" void sincospi(double x, double * sptr, double * cptr); 
# 4093 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" void sincospif(float x, float * sptr, float * cptr); 
# 4405 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double pow(double x, double y) throw(); 
# 4461 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double modf(double x, double * iptr) throw(); 
# 4520 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fmod(double x, double y) throw(); 
# 4606 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double remainder(double x, double y) throw(); 
# 4696 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float remainderf(float x, float y) throw(); 
# 4750 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double remquo(double x, double y, int * quo) throw(); 
# 4804 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float remquof(float x, float y, int * quo) throw(); 
# 4845 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double j0(double x) throw(); 
# 4887 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float j0f(float x) throw(); 
# 4948 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double j1(double x) throw(); 
# 5009 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float j1f(float x) throw(); 
# 5052 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double jn(int n, double x) throw(); 
# 5095 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float jnf(int n, float x) throw(); 
# 5147 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double y0(double x) throw(); 
# 5199 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float y0f(float x) throw(); 
# 5251 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double y1(double x) throw(); 
# 5303 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float y1f(float x) throw(); 
# 5356 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double yn(int n, double x) throw(); 
# 5409 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float ynf(int n, float x) throw(); 
# 5436 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cyl_bessel_i0(double x) throw(); 
# 5462 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float cyl_bessel_i0f(float x) throw(); 
# 5489 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double cyl_bessel_i1(double x) throw(); 
# 5515 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float cyl_bessel_i1f(float x) throw(); 
# 5598 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double erf(double x) throw(); 
# 5680 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float erff(float x) throw(); 
# 5744 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double erfinv(double y); 
# 5801 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float erfinvf(float y); 
# 5840 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double erfc(double x) throw(); 
# 5878 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float erfcf(float x) throw(); 
# 6006 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double lgamma(double x) throw(); 
# 6069 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double erfcinv(double y); 
# 6125 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float erfcinvf(float y); 
# 6183 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double normcdfinv(double y); 
# 6241 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float normcdfinvf(float y); 
# 6284 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double normcdf(double y); 
# 6327 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float normcdff(float y); 
# 6402 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double erfcx(double x); 
# 6477 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float erfcxf(float x); 
# 6611 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float lgammaf(float x) throw(); 
# 6720 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double tgamma(double x) throw(); 
# 6829 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float tgammaf(float x) throw(); 
# 6842 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double copysign(double x, double y) throw(); 
# 6855 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float copysignf(float x, float y) throw(); 
# 6892 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double nextafter(double x, double y) throw(); 
# 6929 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float nextafterf(float x, float y) throw(); 
# 6945 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double nan(const char * tagp) throw(); 
# 6961 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float nanf(const char * tagp) throw(); 
# 6968
extern "C" int __isinff(float) throw(); 
# 6969
extern "C" int __isnanf(float) throw(); 
# 6979 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" int __finite(double) throw(); 
# 6980
extern "C" int __finitef(float) throw(); 
# 6981
extern "C" { extern __attribute((gnu_inline)) inline int __signbit(double) throw(); } 
# 6982
extern "C" int __isnan(double) throw(); 
# 6983
extern "C" int __isinf(double) throw(); 
# 6986
extern "C" { extern __attribute((gnu_inline)) inline int __signbitf(float) throw(); } 
# 7145 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" double fma(double x, double y, double z) throw(); 
# 7303 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fmaf(float x, float y, float z) throw(); 
# 7314 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" { extern __attribute((gnu_inline)) inline int __signbitl(long double) throw(); } 
# 7320
extern "C" int __finitel(long double) throw(); 
# 7321
extern "C" int __isinfl(long double) throw(); 
# 7322
extern "C" int __isnanl(long double) throw(); 
# 7372 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float acosf(float x) throw(); 
# 7412 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float asinf(float x) throw(); 
# 7452 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float atanf(float x) throw(); 
# 7485 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float atan2f(float y, float x) throw(); 
# 7509 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float cosf(float x) throw(); 
# 7551 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float sinf(float x) throw(); 
# 7593 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float tanf(float x) throw(); 
# 7617 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float coshf(float x) throw(); 
# 7658 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float sinhf(float x) throw(); 
# 7688 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float tanhf(float x) throw(); 
# 7739 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float logf(float x) throw(); 
# 7789 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float expf(float x) throw(); 
# 7840 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float log10f(float x) throw(); 
# 7895 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float modff(float x, float * iptr) throw(); 
# 8203 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float powf(float x, float y) throw(); 
# 8272 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float sqrtf(float x) throw(); 
# 8331 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float ceilf(float x) throw(); 
# 8403 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float floorf(float x) throw(); 
# 8462 "/usr/local/cuda-7.0//include/math_functions.h"
extern "C" float fmodf(float x, float y) throw(); 
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3
extern "C" { typedef float float_t; }
# 29
extern "C" { typedef double double_t; }
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" double acos(double __x) throw(); extern "C" double __acos(double __x) throw(); 
# 56
extern "C" double asin(double __x) throw(); extern "C" double __asin(double __x) throw(); 
# 58
extern "C" double atan(double __x) throw(); extern "C" double __atan(double __x) throw(); 
# 60
extern "C" double atan2(double __y, double __x) throw(); extern "C" double __atan2(double __y, double __x) throw(); 
# 63
extern "C" double cos(double __x) throw(); extern "C" double __cos(double __x) throw(); 
# 65
extern "C" double sin(double __x) throw(); extern "C" double __sin(double __x) throw(); 
# 67
extern "C" double tan(double __x) throw(); extern "C" double __tan(double __x) throw(); 
# 72
extern "C" double cosh(double __x) throw(); extern "C" double __cosh(double __x) throw(); 
# 74
extern "C" double sinh(double __x) throw(); extern "C" double __sinh(double __x) throw(); 
# 76
extern "C" double tanh(double __x) throw(); extern "C" double __tanh(double __x) throw(); 
# 81
extern "C" void sincos(double __x, double * __sinx, double * __cosx) throw(); extern "C" void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 88
extern "C" double acosh(double __x) throw(); extern "C" double __acosh(double __x) throw(); 
# 90
extern "C" double asinh(double __x) throw(); extern "C" double __asinh(double __x) throw(); 
# 92
extern "C" double atanh(double __x) throw(); extern "C" double __atanh(double __x) throw(); 
# 100
extern "C" double exp(double __x) throw(); extern "C" double __exp(double __x) throw(); 
# 103
extern "C" double frexp(double __x, int * __exponent) throw(); extern "C" double __frexp(double __x, int * __exponent) throw(); 
# 106
extern "C" double ldexp(double __x, int __exponent) throw(); extern "C" double __ldexp(double __x, int __exponent) throw(); 
# 109
extern "C" double log(double __x) throw(); extern "C" double __log(double __x) throw(); 
# 112
extern "C" double log10(double __x) throw(); extern "C" double __log10(double __x) throw(); 
# 115
extern "C" double modf(double __x, double * __iptr) throw(); extern "C" double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern "C" double exp10(double __x) throw(); extern "C" double __exp10(double __x) throw(); 
# 122
extern "C" double pow10(double __x) throw(); extern "C" double __pow10(double __x) throw(); 
# 128
extern "C" double expm1(double __x) throw(); extern "C" double __expm1(double __x) throw(); 
# 131
extern "C" double log1p(double __x) throw(); extern "C" double __log1p(double __x) throw(); 
# 134
extern "C" double logb(double __x) throw(); extern "C" double __logb(double __x) throw(); 
# 141
extern "C" double exp2(double __x) throw(); extern "C" double __exp2(double __x) throw(); 
# 144
extern "C" double log2(double __x) throw(); extern "C" double __log2(double __x) throw(); 
# 153
extern "C" double pow(double __x, double __y) throw(); extern "C" double __pow(double __x, double __y) throw(); 
# 156
extern "C" double sqrt(double __x) throw(); extern "C" double __sqrt(double __x) throw(); 
# 162
extern "C" double hypot(double __x, double __y) throw(); extern "C" double __hypot(double __x, double __y) throw(); 
# 169
extern "C" double cbrt(double __x) throw(); extern "C" double __cbrt(double __x) throw(); 
# 178
extern "C" double ceil(double __x) throw() __attribute((const)); extern "C" double __ceil(double __x) throw() __attribute((const)); 
# 181
extern "C" double fabs(double __x) throw() __attribute((const)); extern "C" double __fabs(double __x) throw() __attribute((const)); 
# 184
extern "C" double floor(double __x) throw() __attribute((const)); extern "C" double __floor(double __x) throw() __attribute((const)); 
# 187
extern "C" double fmod(double __x, double __y) throw(); extern "C" double __fmod(double __x, double __y) throw(); 
# 192
extern "C" int __isinf(double __value) throw() __attribute((const)); 
# 195
extern "C" int __finite(double __value) throw() __attribute((const)); 
# 201
extern "C" { extern inline int isinf(double __value) throw() __attribute((const)); } 
# 204
extern "C" int finite(double __value) throw() __attribute((const)); 
# 207
extern "C" double drem(double __x, double __y) throw(); extern "C" double __drem(double __x, double __y) throw(); 
# 211
extern "C" double significand(double __x) throw(); extern "C" double __significand(double __x) throw(); 
# 217
extern "C" double copysign(double __x, double __y) throw() __attribute((const)); extern "C" double __copysign(double __x, double __y) throw() __attribute((const)); 
# 224
extern "C" double nan(const char * __tagb) throw() __attribute((const)); extern "C" double __nan(const char * __tagb) throw() __attribute((const)); 
# 230
extern "C" int __isnan(double __value) throw() __attribute((const)); 
# 234
extern "C" { extern inline int isnan(double __value) throw() __attribute((const)); } 
# 237
extern "C" double j0(double) throw(); extern "C" double __j0(double) throw(); 
# 238
extern "C" double j1(double) throw(); extern "C" double __j1(double) throw(); 
# 239
extern "C" double jn(int, double) throw(); extern "C" double __jn(int, double) throw(); 
# 240
extern "C" double y0(double) throw(); extern "C" double __y0(double) throw(); 
# 241
extern "C" double y1(double) throw(); extern "C" double __y1(double) throw(); 
# 242
extern "C" double yn(int, double) throw(); extern "C" double __yn(int, double) throw(); 
# 249
extern "C" double erf(double) throw(); extern "C" double __erf(double) throw(); 
# 250
extern "C" double erfc(double) throw(); extern "C" double __erfc(double) throw(); 
# 251
extern "C" double lgamma(double) throw(); extern "C" double __lgamma(double) throw(); 
# 258
extern "C" double tgamma(double) throw(); extern "C" double __tgamma(double) throw(); 
# 264
extern "C" double gamma(double) throw(); extern "C" double __gamma(double) throw(); 
# 271
extern "C" double lgamma_r(double, int * __signgamp) throw(); extern "C" double __lgamma_r(double, int * __signgamp) throw(); 
# 279
extern "C" double rint(double __x) throw(); extern "C" double __rint(double __x) throw(); 
# 282
extern "C" double nextafter(double __x, double __y) throw() __attribute((const)); extern "C" double __nextafter(double __x, double __y) throw() __attribute((const)); 
# 284
extern "C" double nexttoward(double __x, long double __y) throw() __attribute((const)); extern "C" double __nexttoward(double __x, long double __y) throw() __attribute((const)); 
# 288
extern "C" double remainder(double __x, double __y) throw(); extern "C" double __remainder(double __x, double __y) throw(); 
# 292
extern "C" double scalbn(double __x, int __n) throw(); extern "C" double __scalbn(double __x, int __n) throw(); 
# 296
extern "C" int ilogb(double __x) throw(); extern "C" int __ilogb(double __x) throw(); 
# 301
extern "C" double scalbln(double __x, long __n) throw(); extern "C" double __scalbln(double __x, long __n) throw(); 
# 305
extern "C" double nearbyint(double __x) throw(); extern "C" double __nearbyint(double __x) throw(); 
# 309
extern "C" double round(double __x) throw() __attribute((const)); extern "C" double __round(double __x) throw() __attribute((const)); 
# 313
extern "C" double trunc(double __x) throw() __attribute((const)); extern "C" double __trunc(double __x) throw() __attribute((const)); 
# 318
extern "C" double remquo(double __x, double __y, int * __quo) throw(); extern "C" double __remquo(double __x, double __y, int * __quo) throw(); 
# 325
extern "C" long lrint(double __x) throw(); extern "C" long __lrint(double __x) throw(); 
# 327
__extension__ extern "C" long long llrint(double __x) throw(); extern "C" long long __llrint(double __x) throw(); 
# 331
extern "C" long lround(double __x) throw(); extern "C" long __lround(double __x) throw(); 
# 333
__extension__ extern "C" long long llround(double __x) throw(); extern "C" long long __llround(double __x) throw(); 
# 337
extern "C" double fdim(double __x, double __y) throw(); extern "C" double __fdim(double __x, double __y) throw(); 
# 340
extern "C" double fmax(double __x, double __y) throw() __attribute((const)); extern "C" double __fmax(double __x, double __y) throw() __attribute((const)); 
# 343
extern "C" double fmin(double __x, double __y) throw() __attribute((const)); extern "C" double __fmin(double __x, double __y) throw() __attribute((const)); 
# 347
extern "C" int __fpclassify(double __value) throw()
# 348
 __attribute((const)); 
# 351
extern "C" { extern __attribute((gnu_inline)) inline int __signbit(double __value) throw()
# 352
 __attribute((const)); } 
# 356
extern "C" double fma(double __x, double __y, double __z) throw(); extern "C" double __fma(double __x, double __y, double __z) throw(); 
# 365
extern "C" int __issignaling(double __value) throw()
# 366
 __attribute((const)); 
# 371
extern "C" double scalb(double __x, double __n) throw(); extern "C" double __scalb(double __x, double __n) throw(); 
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" float acosf(float __x) throw(); extern "C" float __acosf(float __x) throw(); 
# 56
extern "C" float asinf(float __x) throw(); extern "C" float __asinf(float __x) throw(); 
# 58
extern "C" float atanf(float __x) throw(); extern "C" float __atanf(float __x) throw(); 
# 60
extern "C" float atan2f(float __y, float __x) throw(); extern "C" float __atan2f(float __y, float __x) throw(); 
# 63
extern "C" float cosf(float __x) throw(); 
# 65
extern "C" float sinf(float __x) throw(); 
# 67
extern "C" float tanf(float __x) throw(); 
# 72
extern "C" float coshf(float __x) throw(); extern "C" float __coshf(float __x) throw(); 
# 74
extern "C" float sinhf(float __x) throw(); extern "C" float __sinhf(float __x) throw(); 
# 76
extern "C" float tanhf(float __x) throw(); extern "C" float __tanhf(float __x) throw(); 
# 81
extern "C" void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 88
extern "C" float acoshf(float __x) throw(); extern "C" float __acoshf(float __x) throw(); 
# 90
extern "C" float asinhf(float __x) throw(); extern "C" float __asinhf(float __x) throw(); 
# 92
extern "C" float atanhf(float __x) throw(); extern "C" float __atanhf(float __x) throw(); 
# 100
extern "C" float expf(float __x) throw(); 
# 103
extern "C" float frexpf(float __x, int * __exponent) throw(); extern "C" float __frexpf(float __x, int * __exponent) throw(); 
# 106
extern "C" float ldexpf(float __x, int __exponent) throw(); extern "C" float __ldexpf(float __x, int __exponent) throw(); 
# 109
extern "C" float logf(float __x) throw(); 
# 112
extern "C" float log10f(float __x) throw(); 
# 115
extern "C" float modff(float __x, float * __iptr) throw(); extern "C" float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern "C" float exp10f(float __x) throw(); 
# 122
extern "C" float pow10f(float __x) throw(); extern "C" float __pow10f(float __x) throw(); 
# 128
extern "C" float expm1f(float __x) throw(); extern "C" float __expm1f(float __x) throw(); 
# 131
extern "C" float log1pf(float __x) throw(); extern "C" float __log1pf(float __x) throw(); 
# 134
extern "C" float logbf(float __x) throw(); extern "C" float __logbf(float __x) throw(); 
# 141
extern "C" float exp2f(float __x) throw(); extern "C" float __exp2f(float __x) throw(); 
# 144
extern "C" float log2f(float __x) throw(); 
# 153
extern "C" float powf(float __x, float __y) throw(); 
# 156
extern "C" float sqrtf(float __x) throw(); extern "C" float __sqrtf(float __x) throw(); 
# 162
extern "C" float hypotf(float __x, float __y) throw(); extern "C" float __hypotf(float __x, float __y) throw(); 
# 169
extern "C" float cbrtf(float __x) throw(); extern "C" float __cbrtf(float __x) throw(); 
# 178
extern "C" float ceilf(float __x) throw() __attribute((const)); extern "C" float __ceilf(float __x) throw() __attribute((const)); 
# 181
extern "C" float fabsf(float __x) throw() __attribute((const)); extern "C" float __fabsf(float __x) throw() __attribute((const)); 
# 184
extern "C" float floorf(float __x) throw() __attribute((const)); extern "C" float __floorf(float __x) throw() __attribute((const)); 
# 187
extern "C" float fmodf(float __x, float __y) throw(); extern "C" float __fmodf(float __x, float __y) throw(); 
# 192
extern "C" int __isinff(float __value) throw() __attribute((const)); 
# 195
extern "C" int __finitef(float __value) throw() __attribute((const)); 
# 201
extern "C" int isinff(float __value) throw() __attribute((const)); 
# 204
extern "C" int finitef(float __value) throw() __attribute((const)); 
# 207
extern "C" float dremf(float __x, float __y) throw(); extern "C" float __dremf(float __x, float __y) throw(); 
# 211
extern "C" float significandf(float __x) throw(); extern "C" float __significandf(float __x) throw(); 
# 217
extern "C" float copysignf(float __x, float __y) throw() __attribute((const)); extern "C" float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 224
extern "C" float nanf(const char * __tagb) throw() __attribute((const)); extern "C" float __nanf(const char * __tagb) throw() __attribute((const)); 
# 230
extern "C" int __isnanf(float __value) throw() __attribute((const)); 
# 234
extern "C" int isnanf(float __value) throw() __attribute((const)); 
# 237
extern "C" float j0f(float) throw(); extern "C" float __j0f(float) throw(); 
# 238
extern "C" float j1f(float) throw(); extern "C" float __j1f(float) throw(); 
# 239
extern "C" float jnf(int, float) throw(); extern "C" float __jnf(int, float) throw(); 
# 240
extern "C" float y0f(float) throw(); extern "C" float __y0f(float) throw(); 
# 241
extern "C" float y1f(float) throw(); extern "C" float __y1f(float) throw(); 
# 242
extern "C" float ynf(int, float) throw(); extern "C" float __ynf(int, float) throw(); 
# 249
extern "C" float erff(float) throw(); extern "C" float __erff(float) throw(); 
# 250
extern "C" float erfcf(float) throw(); extern "C" float __erfcf(float) throw(); 
# 251
extern "C" float lgammaf(float) throw(); extern "C" float __lgammaf(float) throw(); 
# 258
extern "C" float tgammaf(float) throw(); extern "C" float __tgammaf(float) throw(); 
# 264
extern "C" float gammaf(float) throw(); extern "C" float __gammaf(float) throw(); 
# 271
extern "C" float lgammaf_r(float, int * __signgamp) throw(); extern "C" float __lgammaf_r(float, int * __signgamp) throw(); 
# 279
extern "C" float rintf(float __x) throw(); extern "C" float __rintf(float __x) throw(); 
# 282
extern "C" float nextafterf(float __x, float __y) throw() __attribute((const)); extern "C" float __nextafterf(float __x, float __y) throw() __attribute((const)); 
# 284
extern "C" float nexttowardf(float __x, long double __y) throw() __attribute((const)); extern "C" float __nexttowardf(float __x, long double __y) throw() __attribute((const)); 
# 288
extern "C" float remainderf(float __x, float __y) throw(); extern "C" float __remainderf(float __x, float __y) throw(); 
# 292
extern "C" float scalbnf(float __x, int __n) throw(); extern "C" float __scalbnf(float __x, int __n) throw(); 
# 296
extern "C" int ilogbf(float __x) throw(); extern "C" int __ilogbf(float __x) throw(); 
# 301
extern "C" float scalblnf(float __x, long __n) throw(); extern "C" float __scalblnf(float __x, long __n) throw(); 
# 305
extern "C" float nearbyintf(float __x) throw(); extern "C" float __nearbyintf(float __x) throw(); 
# 309
extern "C" float roundf(float __x) throw() __attribute((const)); extern "C" float __roundf(float __x) throw() __attribute((const)); 
# 313
extern "C" float truncf(float __x) throw() __attribute((const)); extern "C" float __truncf(float __x) throw() __attribute((const)); 
# 318
extern "C" float remquof(float __x, float __y, int * __quo) throw(); extern "C" float __remquof(float __x, float __y, int * __quo) throw(); 
# 325
extern "C" long lrintf(float __x) throw(); extern "C" long __lrintf(float __x) throw(); 
# 327
__extension__ extern "C" long long llrintf(float __x) throw(); extern "C" long long __llrintf(float __x) throw(); 
# 331
extern "C" long lroundf(float __x) throw(); extern "C" long __lroundf(float __x) throw(); 
# 333
__extension__ extern "C" long long llroundf(float __x) throw(); extern "C" long long __llroundf(float __x) throw(); 
# 337
extern "C" float fdimf(float __x, float __y) throw(); extern "C" float __fdimf(float __x, float __y) throw(); 
# 340
extern "C" float fmaxf(float __x, float __y) throw() __attribute((const)); extern "C" float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 343
extern "C" float fminf(float __x, float __y) throw() __attribute((const)); extern "C" float __fminf(float __x, float __y) throw() __attribute((const)); 
# 347
extern "C" int __fpclassifyf(float __value) throw()
# 348
 __attribute((const)); 
# 351
extern "C" { extern __attribute((gnu_inline)) inline int __signbitf(float __value) throw()
# 352
 __attribute((const)); } 
# 356
extern "C" float fmaf(float __x, float __y, float __z) throw(); extern "C" float __fmaf(float __x, float __y, float __z) throw(); 
# 365
extern "C" int __issignalingf(float __value) throw()
# 366
 __attribute((const)); 
# 371
extern "C" float scalbf(float __x, float __n) throw(); extern "C" float __scalbf(float __x, float __n) throw(); 
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" long double acosl(long double __x) throw(); extern "C" long double __acosl(long double __x) throw(); 
# 56
extern "C" long double asinl(long double __x) throw(); extern "C" long double __asinl(long double __x) throw(); 
# 58
extern "C" long double atanl(long double __x) throw(); extern "C" long double __atanl(long double __x) throw(); 
# 60
extern "C" long double atan2l(long double __y, long double __x) throw(); extern "C" long double __atan2l(long double __y, long double __x) throw(); 
# 63
extern "C" long double cosl(long double __x) throw(); extern "C" long double __cosl(long double __x) throw(); 
# 65
extern "C" long double sinl(long double __x) throw(); extern "C" long double __sinl(long double __x) throw(); 
# 67
extern "C" long double tanl(long double __x) throw(); extern "C" long double __tanl(long double __x) throw(); 
# 72
extern "C" long double coshl(long double __x) throw(); extern "C" long double __coshl(long double __x) throw(); 
# 74
extern "C" long double sinhl(long double __x) throw(); extern "C" long double __sinhl(long double __x) throw(); 
# 76
extern "C" long double tanhl(long double __x) throw(); extern "C" long double __tanhl(long double __x) throw(); 
# 81
extern "C" void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern "C" void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 88
extern "C" long double acoshl(long double __x) throw(); extern "C" long double __acoshl(long double __x) throw(); 
# 90
extern "C" long double asinhl(long double __x) throw(); extern "C" long double __asinhl(long double __x) throw(); 
# 92
extern "C" long double atanhl(long double __x) throw(); extern "C" long double __atanhl(long double __x) throw(); 
# 100
extern "C" long double expl(long double __x) throw(); extern "C" long double __expl(long double __x) throw(); 
# 103
extern "C" long double frexpl(long double __x, int * __exponent) throw(); extern "C" long double __frexpl(long double __x, int * __exponent) throw(); 
# 106
extern "C" long double ldexpl(long double __x, int __exponent) throw(); extern "C" long double __ldexpl(long double __x, int __exponent) throw(); 
# 109
extern "C" long double logl(long double __x) throw(); extern "C" long double __logl(long double __x) throw(); 
# 112
extern "C" long double log10l(long double __x) throw(); extern "C" long double __log10l(long double __x) throw(); 
# 115
extern "C" long double modfl(long double __x, long double * __iptr) throw(); extern "C" long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern "C" long double exp10l(long double __x) throw(); extern "C" long double __exp10l(long double __x) throw(); 
# 122
extern "C" long double pow10l(long double __x) throw(); extern "C" long double __pow10l(long double __x) throw(); 
# 128
extern "C" long double expm1l(long double __x) throw(); extern "C" long double __expm1l(long double __x) throw(); 
# 131
extern "C" long double log1pl(long double __x) throw(); extern "C" long double __log1pl(long double __x) throw(); 
# 134
extern "C" long double logbl(long double __x) throw(); extern "C" long double __logbl(long double __x) throw(); 
# 141
extern "C" long double exp2l(long double __x) throw(); extern "C" long double __exp2l(long double __x) throw(); 
# 144
extern "C" long double log2l(long double __x) throw(); extern "C" long double __log2l(long double __x) throw(); 
# 153
extern "C" long double powl(long double __x, long double __y) throw(); extern "C" long double __powl(long double __x, long double __y) throw(); 
# 156
extern "C" long double sqrtl(long double __x) throw(); extern "C" long double __sqrtl(long double __x) throw(); 
# 162
extern "C" long double hypotl(long double __x, long double __y) throw(); extern "C" long double __hypotl(long double __x, long double __y) throw(); 
# 169
extern "C" long double cbrtl(long double __x) throw(); extern "C" long double __cbrtl(long double __x) throw(); 
# 178
extern "C" long double ceill(long double __x) throw() __attribute((const)); extern "C" long double __ceill(long double __x) throw() __attribute((const)); 
# 181
extern "C" long double fabsl(long double __x) throw() __attribute((const)); extern "C" long double __fabsl(long double __x) throw() __attribute((const)); 
# 184
extern "C" long double floorl(long double __x) throw() __attribute((const)); extern "C" long double __floorl(long double __x) throw() __attribute((const)); 
# 187
extern "C" long double fmodl(long double __x, long double __y) throw(); extern "C" long double __fmodl(long double __x, long double __y) throw(); 
# 192
extern "C" int __isinfl(long double __value) throw() __attribute((const)); 
# 195
extern "C" int __finitel(long double __value) throw() __attribute((const)); 
# 201
extern "C" int isinfl(long double __value) throw() __attribute((const)); 
# 204
extern "C" int finitel(long double __value) throw() __attribute((const)); 
# 207
extern "C" long double dreml(long double __x, long double __y) throw(); extern "C" long double __dreml(long double __x, long double __y) throw(); 
# 211
extern "C" long double significandl(long double __x) throw(); extern "C" long double __significandl(long double __x) throw(); 
# 217
extern "C" long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern "C" long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 224
extern "C" long double nanl(const char * __tagb) throw() __attribute((const)); extern "C" long double __nanl(const char * __tagb) throw() __attribute((const)); 
# 230
extern "C" int __isnanl(long double __value) throw() __attribute((const)); 
# 234
extern "C" int isnanl(long double __value) throw() __attribute((const)); 
# 237
extern "C" long double j0l(long double) throw(); extern "C" long double __j0l(long double) throw(); 
# 238
extern "C" long double j1l(long double) throw(); extern "C" long double __j1l(long double) throw(); 
# 239
extern "C" long double jnl(int, long double) throw(); extern "C" long double __jnl(int, long double) throw(); 
# 240
extern "C" long double y0l(long double) throw(); extern "C" long double __y0l(long double) throw(); 
# 241
extern "C" long double y1l(long double) throw(); extern "C" long double __y1l(long double) throw(); 
# 242
extern "C" long double ynl(int, long double) throw(); extern "C" long double __ynl(int, long double) throw(); 
# 249
extern "C" long double erfl(long double) throw(); extern "C" long double __erfl(long double) throw(); 
# 250
extern "C" long double erfcl(long double) throw(); extern "C" long double __erfcl(long double) throw(); 
# 251
extern "C" long double lgammal(long double) throw(); extern "C" long double __lgammal(long double) throw(); 
# 258
extern "C" long double tgammal(long double) throw(); extern "C" long double __tgammal(long double) throw(); 
# 264
extern "C" long double gammal(long double) throw(); extern "C" long double __gammal(long double) throw(); 
# 271
extern "C" long double lgammal_r(long double, int * __signgamp) throw(); extern "C" long double __lgammal_r(long double, int * __signgamp) throw(); 
# 279
extern "C" long double rintl(long double __x) throw(); extern "C" long double __rintl(long double __x) throw(); 
# 282
extern "C" long double nextafterl(long double __x, long double __y) throw() __attribute((const)); extern "C" long double __nextafterl(long double __x, long double __y) throw() __attribute((const)); 
# 284
extern "C" long double nexttowardl(long double __x, long double __y) throw() __attribute((const)); extern "C" long double __nexttowardl(long double __x, long double __y) throw() __attribute((const)); 
# 288
extern "C" long double remainderl(long double __x, long double __y) throw(); extern "C" long double __remainderl(long double __x, long double __y) throw(); 
# 292
extern "C" long double scalbnl(long double __x, int __n) throw(); extern "C" long double __scalbnl(long double __x, int __n) throw(); 
# 296
extern "C" int ilogbl(long double __x) throw(); extern "C" int __ilogbl(long double __x) throw(); 
# 301
extern "C" long double scalblnl(long double __x, long __n) throw(); extern "C" long double __scalblnl(long double __x, long __n) throw(); 
# 305
extern "C" long double nearbyintl(long double __x) throw(); extern "C" long double __nearbyintl(long double __x) throw(); 
# 309
extern "C" long double roundl(long double __x) throw() __attribute((const)); extern "C" long double __roundl(long double __x) throw() __attribute((const)); 
# 313
extern "C" long double truncl(long double __x) throw() __attribute((const)); extern "C" long double __truncl(long double __x) throw() __attribute((const)); 
# 318
extern "C" long double remquol(long double __x, long double __y, int * __quo) throw(); extern "C" long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 325
extern "C" long lrintl(long double __x) throw(); extern "C" long __lrintl(long double __x) throw(); 
# 327
__extension__ extern "C" long long llrintl(long double __x) throw(); extern "C" long long __llrintl(long double __x) throw(); 
# 331
extern "C" long lroundl(long double __x) throw(); extern "C" long __lroundl(long double __x) throw(); 
# 333
__extension__ extern "C" long long llroundl(long double __x) throw(); extern "C" long long __llroundl(long double __x) throw(); 
# 337
extern "C" long double fdiml(long double __x, long double __y) throw(); extern "C" long double __fdiml(long double __x, long double __y) throw(); 
# 340
extern "C" long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern "C" long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 343
extern "C" long double fminl(long double __x, long double __y) throw() __attribute((const)); extern "C" long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 347
extern "C" int __fpclassifyl(long double __value) throw()
# 348
 __attribute((const)); 
# 351
extern "C" { extern __attribute((gnu_inline)) inline int __signbitl(long double __value) throw()
# 352
 __attribute((const)); } 
# 356
extern "C" long double fmal(long double __x, long double __y, long double __z) throw(); extern "C" long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 365
extern "C" int __issignalingl(long double __value) throw()
# 366
 __attribute((const)); 
# 371
extern "C" long double scalbl(long double __x, long double __n) throw(); extern "C" long double __scalbl(long double __x, long double __n) throw(); 
# 148 "/usr/include/math.h" 3
extern "C" { extern int signgam; } 
# 190 "/usr/include/math.h" 3
enum { 
# 191
FP_NAN, 
# 194
FP_INFINITE, 
# 197
FP_ZERO, 
# 200
FP_SUBNORMAL, 
# 203
FP_NORMAL
# 206
}; 
# 308 "/usr/include/math.h" 3
extern "C" { typedef 
# 302
enum { 
# 303
_IEEE_ = (-1), 
# 304
_SVID_ = 0, 
# 305
_XOPEN_, 
# 306
_POSIX_, 
# 307
_ISOC_
# 308
} _LIB_VERSION_TYPE; }
# 313
extern "C" { extern _LIB_VERSION_TYPE _LIB_VERSION; } 
# 324 "/usr/include/math.h" 3
extern "C" { struct __exception { 
# 329
int type; 
# 330
char *name; 
# 331
double arg1; 
# 332
double arg2; 
# 333
double retval; 
# 334
}; }
# 337
extern "C" int matherr(__exception * __exc) throw(); 
# 127 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3
extern "C" { 
# 126
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 127
 __attribute((__leaf__)) __signbitf(float __x) throw() 
# 128
{ 
# 130
int __m; 
# 131
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 132
return (__m & 8) != 0; 
# 137
} } 
# 139
extern "C" { 
# 138
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 139
 __attribute((__leaf__)) __signbit(double __x) throw() 
# 140
{ 
# 142
int __m; 
# 143
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 144
return (__m & 128) != 0; 
# 149
} } 
# 151
extern "C" { 
# 150
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 151
 __attribute((__leaf__)) __signbitl(long double __x) throw() 
# 152
{ 
# 153
__extension__ union { long double __l; int __i[3]; } __u = {__l: __x}; 
# 154
return (((__u.__i)[2]) & 32768) != 0; 
# 155
} } 
# 55 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
extern "C" { typedef 
# 51
enum { 
# 52
P_ALL, 
# 53
P_PID, 
# 54
P_PGID
# 55
} idtype_t; }
# 45 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
extern "C" { static inline unsigned __bswap_32(unsigned __bsx) 
# 46
{ 
# 47
return __builtin_bswap32(__bsx); 
# 48
} } 
# 109 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
extern "C" { static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 110
{ 
# 111
return __builtin_bswap64(__bsx); 
# 112
} } 
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
extern "C" { union wait { 
# 68
int w_status; 
# 70
struct { 
# 72
unsigned __w_termsig:7; 
# 73
unsigned __w_coredump:1; 
# 74
unsigned __w_retcode:8; 
# 75
unsigned:16; 
# 83
} __wait_terminated; 
# 85
struct { 
# 87
unsigned __w_stopval:8; 
# 88
unsigned __w_stopsig:8; 
# 89
unsigned:16; 
# 96
} __wait_stopped; 
# 97
}; }
# 101 "/usr/include/stdlib.h" 3
extern "C" { typedef 
# 98
struct { 
# 99
int quot; 
# 100
int rem; 
# 101
} div_t; }
# 109
extern "C" { typedef 
# 106
struct { 
# 107
long quot; 
# 108
long rem; 
# 109
} ldiv_t; }
# 121
__extension__ extern "C" { typedef 
# 118
struct { 
# 119
long long quot; 
# 120
long long rem; 
# 121
} lldiv_t; }
# 139 "/usr/include/stdlib.h" 3
extern "C" size_t __ctype_get_mb_cur_max() throw() __attribute((__warn_unused_result__)); 
# 144
extern "C" { extern __attribute((gnu_inline)) inline double atof(const char * __nptr) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); } 
# 147
extern "C" { extern __attribute((gnu_inline)) inline int atoi(const char * __nptr) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); } 
# 150
extern "C" { extern __attribute((gnu_inline)) inline long atol(const char * __nptr) throw()
# 151
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); } 
# 157
__extension__ extern "C" { extern __attribute((gnu_inline)) inline long long atoll(const char * __nptr) throw()
# 158
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); } 
# 164
extern "C" double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 172
extern "C" float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 173
 __attribute((__nonnull__(1))); 
# 175
extern "C" long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 177
 __attribute((__nonnull__(1))); 
# 183
extern "C" long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 185
 __attribute((__nonnull__(1))); 
# 187
extern "C" unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 195
__extension__ extern "C" long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 197
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern "C" unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 209
__extension__ extern "C" long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 211
 __attribute((__nonnull__(1))); 
# 214
__extension__ extern "C" unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 216
 __attribute((__nonnull__(1))); 
# 239 "/usr/include/stdlib.h" 3
extern "C" long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 241
 __attribute((__nonnull__(1, 4))); 
# 243
extern "C" unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 246
 __attribute((__nonnull__(1, 4))); 
# 249
__extension__ extern "C" long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 252
 __attribute((__nonnull__(1, 4))); 
# 255
__extension__ extern "C" unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 258
 __attribute((__nonnull__(1, 4))); 
# 260
extern "C" double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 262
 __attribute((__nonnull__(1, 3))); 
# 264
extern "C" float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 266
 __attribute((__nonnull__(1, 3))); 
# 268
extern "C" long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 271
 __attribute((__nonnull__(1, 3))); 
# 278
extern "C" { 
# 277
__attribute((__gnu_inline__)) extern inline int
# 278
 __attribute((__leaf__)) atoi(const char *__nptr) throw() 
# 279
{ 
# 280
return (int)strtol(__nptr, (char **)__null, 10); 
# 281
} } 
# 283
extern "C" { 
# 282
__attribute((__gnu_inline__)) extern inline long
# 283
 __attribute((__leaf__)) atol(const char *__nptr) throw() 
# 284
{ 
# 285
return strtol(__nptr, (char **)__null, 10); 
# 286
} } 
# 292
__extension__ extern "C" { 
# 291
__attribute((__gnu_inline__)) extern inline long long
# 292
 __attribute((__leaf__)) atoll(const char *__nptr) throw() 
# 293
{ 
# 294
return strtoll(__nptr, (char **)__null, 10); 
# 295
} } 
# 305 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long __n) throw() __attribute((__warn_unused_result__)); 
# 308
extern "C" long a64l(const char * __s) throw()
# 309
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 33 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __u_char u_char; }
# 34
extern "C" { typedef __u_short u_short; }
# 35
extern "C" { typedef __u_int u_int; }
# 36
extern "C" { typedef __u_long u_long; }
# 37
extern "C" { typedef __quad_t quad_t; }
# 38
extern "C" { typedef __u_quad_t u_quad_t; }
# 39
extern "C" { typedef __fsid_t fsid_t; }
# 44
extern "C" { typedef __loff_t loff_t; }
# 48
extern "C" { typedef __ino_t ino_t; }
# 55
extern "C" { typedef __ino64_t ino64_t; }
# 60
extern "C" { typedef __dev_t dev_t; }
# 65
extern "C" { typedef __gid_t gid_t; }
# 70
extern "C" { typedef __mode_t mode_t; }
# 75
extern "C" { typedef __nlink_t nlink_t; }
# 80
extern "C" { typedef __uid_t uid_t; }
# 86
extern "C" { typedef __off_t off_t; }
# 93
extern "C" { typedef __off64_t off64_t; }
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __id_t id_t; }
# 109
extern "C" { typedef __ssize_t ssize_t; }
# 115
extern "C" { typedef __daddr_t daddr_t; }
# 116
extern "C" { typedef __caddr_t caddr_t; }
# 122
extern "C" { typedef __key_t key_t; }
# 136 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __useconds_t useconds_t; }
# 140
extern "C" { typedef __suseconds_t suseconds_t; }
# 150 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef unsigned long ulong; }
# 151
extern "C" { typedef unsigned short ushort; }
# 152
extern "C" { typedef unsigned uint; }
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef signed char int8_t __attribute((__mode__(__QI__))); }
# 195
extern "C" { typedef short int16_t __attribute((__mode__(__HI__))); }
# 196
extern "C" { typedef int int32_t __attribute((__mode__(__SI__))); }
# 197
extern "C" { typedef long int64_t __attribute((__mode__(__DI__))); }
# 200
extern "C" { typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); }
# 201
extern "C" { typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); }
# 202
extern "C" { typedef unsigned u_int32_t __attribute((__mode__(__SI__))); }
# 203
extern "C" { typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); }
# 205
extern "C" { typedef long register_t __attribute((__mode__(__word__))); }
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
extern "C" { typedef int __sig_atomic_t; }
# 30
extern "C" { typedef 
# 28
struct { 
# 29
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 30
} __sigset_t; }
# 37 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef __sigset_t sigset_t; }
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef long __fd_mask; }
# 75 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef 
# 65
struct { 
# 69
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 75
} fd_set; }
# 82
extern "C" { typedef __fd_mask fd_mask; }
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3
extern "C" long __fdelt_chk(long __d); 
# 25
extern "C" long __fdelt_warn(long __d)
# 26
 __attribute((__warning__("bit outside of fd_set selected"))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
__extension__ extern "C" { extern __attribute((gnu_inline)) inline unsigned gnu_dev_major(unsigned long long __dev) throw()
# 28
 __attribute((const)); } 
# 30
__extension__ extern "C" { extern __attribute((gnu_inline)) inline unsigned gnu_dev_minor(unsigned long long __dev) throw()
# 31
 __attribute((const)); } 
# 33
__extension__ extern "C" { extern __attribute((gnu_inline)) inline unsigned long long gnu_dev_makedev(unsigned __major, unsigned __minor) throw()
# 35
 __attribute((const)); } 
# 39
__extension__ extern "C" { 
# 38
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 39
 __attribute((__leaf__)) gnu_dev_major(unsigned long long __dev) throw() 
# 40
{ 
# 41
return ((__dev >> 8) & (4095)) | (((unsigned)(__dev >> 32)) & (~4095)); 
# 42
} } 
# 45
__extension__ extern "C" { 
# 44
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 45
 __attribute((__leaf__)) gnu_dev_minor(unsigned long long __dev) throw() 
# 46
{ 
# 47
return (__dev & (255)) | (((unsigned)(__dev >> 12)) & (~255)); 
# 48
} } 
# 51
__extension__ extern "C" { 
# 50
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned long long
# 51
 __attribute((__leaf__)) gnu_dev_makedev(unsigned __major, unsigned __minor) throw() 
# 52
{ 
# 53
return (((__minor & (255)) | ((__major & (4095)) << 8)) | (((unsigned long long)(__minor & (~255))) << 12)) | (((unsigned long long)(__major & (~4095))) << 32); 
# 56
} } 
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __blksize_t blksize_t; }
# 235
extern "C" { typedef __blkcnt_t blkcnt_t; }
# 239
extern "C" { typedef __fsblkcnt_t fsblkcnt_t; }
# 243
extern "C" { typedef __fsfilcnt_t fsfilcnt_t; }
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __blkcnt64_t blkcnt64_t; }
# 263
extern "C" { typedef __fsblkcnt64_t fsblkcnt64_t; }
# 264
extern "C" { typedef __fsfilcnt64_t fsfilcnt64_t; }
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned long pthread_t; }
# 63
extern "C" { union pthread_attr_t { 
# 65
char __size[56]; 
# 66
long __align; 
# 67
}; }
# 69
extern "C" { typedef pthread_attr_t pthread_attr_t; }
# 79
extern "C" { typedef 
# 75
struct __pthread_internal_list { 
# 77
__pthread_internal_list *__prev; 
# 78
__pthread_internal_list *__next; 
# 79
} __pthread_list_t; }
# 127 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 91 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union { 
# 92
struct __pthread_mutex_s { 
# 94
int __lock; 
# 95
unsigned __count; 
# 96
int __owner; 
# 98
unsigned __nusers; 
# 102
int __kind; 
# 104
short __spins; 
# 105
short __elision; 
# 106
__pthread_list_t __list; 
# 124 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __data; 
# 125
char __size[40]; 
# 126
long __align; 
# 127
} pthread_mutex_t; }
# 133
extern "C" { typedef 
# 130
union { 
# 131
char __size[4]; 
# 132
int __align; 
# 133
} pthread_mutexattr_t; }
# 153
extern "C" { typedef 
# 139
union { 
# 141
struct { 
# 142
int __lock; 
# 143
unsigned __futex; 
# 144
__extension__ unsigned long long __total_seq; 
# 145
__extension__ unsigned long long __wakeup_seq; 
# 146
__extension__ unsigned long long __woken_seq; 
# 147
void *__mutex; 
# 148
unsigned __nwaiters; 
# 149
unsigned __broadcast_seq; 
# 150
} __data; 
# 151
char __size[48]; 
# 152
__extension__ long long __align; 
# 153
} pthread_cond_t; }
# 159
extern "C" { typedef 
# 156
union { 
# 157
char __size[4]; 
# 158
int __align; 
# 159
} pthread_condattr_t; }
# 163
extern "C" { typedef unsigned pthread_key_t; }
# 167
extern "C" { typedef int pthread_once_t; }
# 213 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 174 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union { 
# 177
struct { 
# 178
int __lock; 
# 179
unsigned __nr_readers; 
# 180
unsigned __readers_wakeup; 
# 181
unsigned __writer_wakeup; 
# 182
unsigned __nr_readers_queued; 
# 183
unsigned __nr_writers_queued; 
# 184
int __writer; 
# 185
int __shared; 
# 186
unsigned long __pad1; 
# 187
unsigned long __pad2; 
# 190
unsigned __flags; 
# 192
} __data; 
# 211 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[56]; 
# 212
long __align; 
# 213
} pthread_rwlock_t; }
# 219
extern "C" { typedef 
# 216
union { 
# 217
char __size[8]; 
# 218
long __align; 
# 219
} pthread_rwlockattr_t; }
# 225
extern "C" { typedef volatile int pthread_spinlock_t; }
# 234
extern "C" { typedef 
# 231
union { 
# 232
char __size[32]; 
# 233
long __align; 
# 234
} pthread_barrier_t; }
# 240
extern "C" { typedef 
# 237
union { 
# 238
char __size[4]; 
# 239
int __align; 
# 240
} pthread_barrierattr_t; }
# 321 "/usr/include/stdlib.h" 3
extern "C" long random() throw(); 
# 324
extern "C" void srandom(unsigned __seed) throw(); 
# 330
extern "C" char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 331
 __attribute((__nonnull__(2))); 
# 335
extern "C" char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 343
extern "C" { struct random_data { 
# 345
int32_t *fptr; 
# 346
int32_t *rptr; 
# 347
int32_t *state; 
# 348
int rand_type; 
# 349
int rand_deg; 
# 350
int rand_sep; 
# 351
int32_t *end_ptr; 
# 352
}; }
# 354
extern "C" int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 355
 __attribute((__nonnull__(1, 2))); 
# 357
extern "C" int srandom_r(unsigned __seed, random_data * __buf) throw()
# 358
 __attribute((__nonnull__(2))); 
# 360
extern "C" int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 363
 __attribute((__nonnull__(2, 4))); 
# 365
extern "C" int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 367
 __attribute((__nonnull__(1, 2))); 
# 374
extern "C" int rand() throw(); 
# 376
extern "C" void srand(unsigned __seed) throw(); 
# 381
extern "C" int rand_r(unsigned * __seed) throw(); 
# 389
extern "C" double drand48() throw(); 
# 390
extern "C" double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 393
extern "C" long lrand48() throw(); 
# 394
extern "C" long nrand48(unsigned short  __xsubi[3]) throw()
# 395
 __attribute((__nonnull__(1))); 
# 398
extern "C" long mrand48() throw(); 
# 399
extern "C" long jrand48(unsigned short  __xsubi[3]) throw()
# 400
 __attribute((__nonnull__(1))); 
# 403
extern "C" void srand48(long __seedval) throw(); 
# 404
extern "C" unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 405
 __attribute((__nonnull__(1))); 
# 406
extern "C" void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 412
extern "C" { struct drand48_data { 
# 414
unsigned short __x[3]; 
# 415
unsigned short __old_x[3]; 
# 416
unsigned short __c; 
# 417
unsigned short __init; 
# 418
__extension__ unsigned long long __a; 
# 420
}; }
# 423
extern "C" int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 424
 __attribute((__nonnull__(1, 2))); 
# 425
extern "C" int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 427
 __attribute((__nonnull__(1, 2))); 
# 430
extern "C" int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 432
 __attribute((__nonnull__(1, 2))); 
# 433
extern "C" int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 436
 __attribute((__nonnull__(1, 2))); 
# 439
extern "C" int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 441
 __attribute((__nonnull__(1, 2))); 
# 442
extern "C" int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 445
 __attribute((__nonnull__(1, 2))); 
# 448
extern "C" int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 449
 __attribute((__nonnull__(2))); 
# 451
extern "C" int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 452
 __attribute((__nonnull__(1, 2))); 
# 454
extern "C" int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 456
 __attribute((__nonnull__(1, 2))); 
# 466
extern "C" void *malloc(size_t __size) throw() __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 468
extern "C" void *calloc(size_t __nmemb, size_t __size) throw()
# 469
 __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 480
extern "C" void *realloc(void * __ptr, size_t __size) throw()
# 481
 __attribute((__warn_unused_result__)); 
# 483
extern "C" void free(void * __ptr) throw(); 
# 488
extern "C" void cfree(void * __ptr) throw(); 
# 32 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t __size) throw(); 
# 498 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t __size) throw() __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 503
extern "C" int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 504
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 509
extern "C" void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 510
 __attribute((__malloc__)) __attribute((__alloc_size__(2))) __attribute((__warn_unused_result__)); 
# 515
extern "C" void abort() throw() __attribute((__noreturn__)); 
# 519
extern "C" int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 524
int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 525
 __attribute((__nonnull__(1))); 
# 535
extern "C" int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 536
 __attribute((__nonnull__(1))); 
# 543
extern "C" void exit(int __status) throw() __attribute((__noreturn__)); 
# 549
extern "C" void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 557
extern "C" void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 564
extern "C" char *getenv(const char * __name) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 570
extern "C" char *secure_getenv(const char * __name) throw()
# 571
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 578
extern "C" int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 584
extern "C" int setenv(const char * __name, const char * __value, int __replace) throw()
# 585
 __attribute((__nonnull__(2))); 
# 588
extern "C" int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 595
extern "C" int clearenv() throw(); 
# 606 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 620 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 630 "/usr/include/stdlib.h" 3
extern "C" int mkstemp64(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 642 "/usr/include/stdlib.h" 3
extern "C" int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 652 "/usr/include/stdlib.h" 3
extern "C" int mkstemps64(char * __template, int __suffixlen)
# 653
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 663 "/usr/include/stdlib.h" 3
extern "C" char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 674 "/usr/include/stdlib.h" 3
extern "C" int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 684 "/usr/include/stdlib.h" 3
extern "C" int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 694 "/usr/include/stdlib.h" 3
extern "C" int mkostemps(char * __template, int __suffixlen, int __flags)
# 695
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 706 "/usr/include/stdlib.h" 3
extern "C" int mkostemps64(char * __template, int __suffixlen, int __flags)
# 707
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 717
extern "C" int system(const char * __command) __attribute((__warn_unused_result__)); 
# 724
extern "C" char *canonicalize_file_name(const char * __name) throw()
# 725
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 734 "/usr/include/stdlib.h" 3
extern "C" { extern __attribute((gnu_inline)) inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw()
# 735
 __attribute((__warn_unused_result__)); } 
# 742
extern "C" { typedef int (*__compar_fn_t)(const void *, const void *); }
# 745
extern "C" { typedef __compar_fn_t comparison_fn_t; }
# 749
extern "C" { typedef int (*__compar_d_fn_t)(const void *, const void *, void *); }
# 755
extern "C" { extern __attribute((gnu_inline)) inline void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 757
 __attribute((__nonnull__(1, 2, 5))) __attribute((__warn_unused_result__)); } 
# 20 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3
extern "C" { 
# 19
__attribute((__gnu_inline__)) extern inline void *
# 20
bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t 
# 21
__compar) 
# 22
{ 
# 23
size_t __l, __u, __idx; 
# 24
const void *__p; 
# 25
int __comparison; 
# 27
__l = (0); 
# 28
__u = __nmemb; 
# 29
while (__l < __u) 
# 30
{ 
# 31
__idx = ((__l + __u) / (2)); 
# 32
__p = ((void *)(((const char *)__base) + (__idx * __size))); 
# 33
__comparison = (*__compar)(__key, __p); 
# 34
if (__comparison < 0) { 
# 35
__u = __idx; } else { 
# 36
if (__comparison > 0) { 
# 37
__l = (__idx + (1)); } else { 
# 39
return (void *)__p; }  }  
# 40
}  
# 42
return __null; 
# 43
} } 
# 765 "/usr/include/stdlib.h" 3
extern "C" void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 766
 __attribute((__nonnull__(1, 4))); 
# 768
extern "C" void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 770
 __attribute((__nonnull__(1, 4))); 
# 775
extern "C" int abs(int __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 776
extern "C" long labs(long __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 780
__extension__ extern "C" long long llabs(long long __x) throw()
# 781
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 789
extern "C" div_t div(int __numer, int __denom) throw()
# 790
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 791
extern "C" ldiv_t ldiv(long __numer, long __denom) throw()
# 792
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 797
__extension__ extern "C" lldiv_t lldiv(long long __numer, long long __denom) throw()
# 799
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 812 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 813
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 818
extern "C" char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 819
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 824
extern "C" char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 825
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 830
extern "C" char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 832
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 833
extern "C" char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 835
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 836
extern "C" char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 837
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 842
extern "C" int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 844
 __attribute((__nonnull__(3, 4, 5))); 
# 845
extern "C" int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 847
 __attribute((__nonnull__(3, 4, 5))); 
# 849
extern "C" int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 852
 __attribute((__nonnull__(3, 4, 5))); 
# 853
extern "C" int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 856
 __attribute((__nonnull__(3, 4, 5))); 
# 863
extern "C" int mblen(const char * __s, size_t __n) throw(); 
# 866
extern "C" int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw(); 
# 870
extern "C" { extern __attribute((gnu_inline)) inline int wctomb(char * __s, wchar_t __wchar) throw(); } 
# 874
extern "C" { extern __attribute((gnu_inline)) inline size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw(); } 
# 877
extern "C" { extern __attribute((gnu_inline)) inline size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw(); } 
# 888
extern "C" int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 899 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 902
 __attribute((__nonnull__(1, 2, 3))) __attribute((__warn_unused_result__)); 
# 908
extern "C" void setkey(const char * __key) throw() __attribute((__nonnull__(1))); 
# 916
extern "C" int posix_openpt(int __oflag) __attribute((__warn_unused_result__)); 
# 924
extern "C" int grantpt(int __fd) throw(); 
# 928
extern "C" int unlockpt(int __fd) throw(); 
# 933
extern "C" char *ptsname(int __fd) throw() __attribute((__warn_unused_result__)); 
# 940
extern "C" { extern __attribute((gnu_inline)) inline int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 941
 __attribute((__nonnull__(2))); } 
# 944
extern "C" int getpt(); 
# 951
extern "C" int getloadavg(double  __loadavg[], int __nelem) throw()
# 952
 __attribute((__nonnull__(1))); 
# 26 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3
extern "C" { 
# 25
__attribute((__gnu_inline__)) extern inline double
# 26
 __attribute((__leaf__)) atof(const char *__nptr) throw() 
# 27
{ 
# 28
return strtod(__nptr, (char **)__null); 
# 29
} } 
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3
extern "C" char *__realpath_chk(const char *__restrict__ __name, char *__restrict__ __resolved, size_t __resolvedlen) throw()
# 25
 __attribute((__warn_unused_result__)); 
# 26
extern "C" char *__realpath_alias(const char *__restrict__ __name, char *__restrict__ __resolved) throw() __asm__("realpath")
# 28
 __attribute((__warn_unused_result__)); 
# 29
extern "C" char *__realpath_chk_warn(const char *__restrict__ __name, char *__restrict__ __resolved, size_t __resolvedlen) throw() __asm__("__realpath_chk")
# 32
 __attribute((__warn_unused_result__))
# 33
 __attribute((__warning__("second argument of realpath must be either NULL or at least PATH_MAX bytes long buffer"))); 
# 37
extern "C" { 
# 36
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) 
# 37
__attribute((__leaf__)) extern inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw() 
# 38
{ 
# 39
if (__builtin_object_size(__resolved, 2 > 1) != ((size_t)(-1))) 
# 40
{ 
# 42
if (__builtin_object_size(__resolved, 2 > 1) < (4096)) { 
# 43
return __realpath_chk_warn(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); }  
# 45
return __realpath_chk(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); 
# 46
}  
# 48
return __realpath_alias(__name, __resolved); 
# 49
} } 
# 52
extern "C" int __ptsname_r_chk(int __fd, char * __buf, size_t __buflen, size_t __nreal) throw()
# 53
 __attribute((__nonnull__(2))); 
# 54
extern "C" int __ptsname_r_alias(int __fd, char * __buf, size_t __buflen) throw() __asm__("ptsname_r")
# 56
 __attribute((__nonnull__(2))); 
# 57
extern "C" int __ptsname_r_chk_warn(int __fd, char * __buf, size_t __buflen, size_t __nreal) throw() __asm__("__ptsname_r_chk")
# 60
 __attribute((__nonnull__(2))) __attribute((__warning__("ptsname_r called with buflen bigger than size of buf"))); 
# 64
extern "C" { 
# 63
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 64
 __attribute((__leaf__)) ptsname_r(int __fd, char *__buf, size_t __buflen) throw() 
# 65
{ 
# 66
if (__builtin_object_size(__buf, 2 > 1) != ((size_t)(-1))) 
# 67
{ 
# 68
if (!(0)) { 
# 69
return __ptsname_r_chk(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 70
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 71
return __ptsname_r_chk_warn(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 72
}  
# 73
return __ptsname_r_alias(__fd, __buf, __buflen); 
# 74
} } 
# 77
extern "C" int __wctomb_chk(char * __s, wchar_t __wchar, size_t __buflen) throw()
# 78
 __attribute((__warn_unused_result__)); 
# 79
extern "C" int __wctomb_alias(char * __s, wchar_t __wchar) throw() __asm__("wctomb")
# 80
 __attribute((__warn_unused_result__)); 
# 83
extern "C" { 
# 82
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline int
# 83
 __attribute((__leaf__)) wctomb(char *__s, wchar_t __wchar) throw() 
# 84
{ 
# 92
if ((__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) && ((16) > __builtin_object_size(__s, 2 > 1))) { 
# 93
return __wctomb_chk(__s, __wchar, __builtin_object_size(__s, 2 > 1)); }  
# 94
return __wctomb_alias(__s, __wchar); 
# 95
} } 
# 98
extern "C" size_t __mbstowcs_chk(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len, size_t __dstlen) throw(); 
# 101
extern "C" size_t __mbstowcs_alias(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len) throw() __asm__("mbstowcs"); 
# 105
extern "C" size_t __mbstowcs_chk_warn(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len, size_t __dstlen) throw() __asm__("__mbstowcs_chk")
# 109
 __attribute((__warning__("mbstowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 113
extern "C" { 
# 112
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t
# 113
 __attribute((__leaf__)) mbstowcs(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len) throw() 
# 115
{ 
# 116
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 117
{ 
# 118
if (!(0)) { 
# 119
return __mbstowcs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 122
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 123
return __mbstowcs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 125
}  
# 126
return __mbstowcs_alias(__dst, __src, __len); 
# 127
} } 
# 130
extern "C" size_t __wcstombs_chk(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len, size_t __dstlen) throw(); 
# 133
extern "C" size_t __wcstombs_alias(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len) throw() __asm__("wcstombs"); 
# 137
extern "C" size_t __wcstombs_chk_warn(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len, size_t __dstlen) throw() __asm__("__wcstombs_chk")
# 141
 __attribute((__warning__("wcstombs called with dst buffer smaller than len"))); 
# 144
extern "C" { 
# 143
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t
# 144
 __attribute((__leaf__)) wcstombs(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len) throw() 
# 146
{ 
# 147
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 148
{ 
# 149
if (!(0)) { 
# 150
return __wcstombs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 151
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 152
return __wcstombs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 153
}  
# 154
return __wcstombs_alias(__dst, __src, __len); 
# 155
} } 
# 184 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 3
namespace std { 
# 186
typedef unsigned long size_t; 
# 187
typedef long ptrdiff_t; 
# 192
}
# 68 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 72
template< class _Iterator, class _Container> class __normal_iterator; 
# 76
}
# 78
namespace std __attribute((__visibility__("default"))) { 
# 82
struct __true_type { }; 
# 83
struct __false_type { }; 
# 85
template< bool > 
# 86
struct __truth_type { 
# 87
typedef __false_type __type; }; 
# 90
template<> struct __truth_type< true>  { 
# 91
typedef __true_type __type; }; 
# 95
template< class _Sp, class _Tp> 
# 96
struct __traitor { 
# 98
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 99
typedef typename __truth_type< __value> ::__type __type; 
# 100
}; 
# 103
template< class , class > 
# 104
struct __are_same { 
# 106
enum { __value}; 
# 107
typedef __false_type __type; 
# 108
}; 
# 110
template< class _Tp> 
# 111
struct __are_same< _Tp, _Tp>  { 
# 113
enum { __value = 1}; 
# 114
typedef __true_type __type; 
# 115
}; 
# 118
template< class _Tp> 
# 119
struct __is_void { 
# 121
enum { __value}; 
# 122
typedef __false_type __type; 
# 123
}; 
# 126
template<> struct __is_void< void>  { 
# 128
enum { __value = 1}; 
# 129
typedef __true_type __type; 
# 130
}; 
# 135
template< class _Tp> 
# 136
struct __is_integer { 
# 138
enum { __value}; 
# 139
typedef __false_type __type; 
# 140
}; 
# 146
template<> struct __is_integer< bool>  { 
# 148
enum { __value = 1}; 
# 149
typedef __true_type __type; 
# 150
}; 
# 153
template<> struct __is_integer< char>  { 
# 155
enum { __value = 1}; 
# 156
typedef __true_type __type; 
# 157
}; 
# 160
template<> struct __is_integer< signed char>  { 
# 162
enum { __value = 1}; 
# 163
typedef __true_type __type; 
# 164
}; 
# 167
template<> struct __is_integer< unsigned char>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 175
template<> struct __is_integer< wchar_t>  { 
# 177
enum { __value = 1}; 
# 178
typedef __true_type __type; 
# 179
}; 
# 199 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short>  { 
# 201
enum { __value = 1}; 
# 202
typedef __true_type __type; 
# 203
}; 
# 206
template<> struct __is_integer< unsigned short>  { 
# 208
enum { __value = 1}; 
# 209
typedef __true_type __type; 
# 210
}; 
# 213
template<> struct __is_integer< int>  { 
# 215
enum { __value = 1}; 
# 216
typedef __true_type __type; 
# 217
}; 
# 220
template<> struct __is_integer< unsigned>  { 
# 222
enum { __value = 1}; 
# 223
typedef __true_type __type; 
# 224
}; 
# 227
template<> struct __is_integer< long>  { 
# 229
enum { __value = 1}; 
# 230
typedef __true_type __type; 
# 231
}; 
# 234
template<> struct __is_integer< unsigned long>  { 
# 236
enum { __value = 1}; 
# 237
typedef __true_type __type; 
# 238
}; 
# 241
template<> struct __is_integer< long long>  { 
# 243
enum { __value = 1}; 
# 244
typedef __true_type __type; 
# 245
}; 
# 248
template<> struct __is_integer< unsigned long long>  { 
# 250
enum { __value = 1}; 
# 251
typedef __true_type __type; 
# 252
}; 
# 257
template< class _Tp> 
# 258
struct __is_floating { 
# 260
enum { __value}; 
# 261
typedef __false_type __type; 
# 262
}; 
# 266
template<> struct __is_floating< float>  { 
# 268
enum { __value = 1}; 
# 269
typedef __true_type __type; 
# 270
}; 
# 273
template<> struct __is_floating< double>  { 
# 275
enum { __value = 1}; 
# 276
typedef __true_type __type; 
# 277
}; 
# 280
template<> struct __is_floating< long double>  { 
# 282
enum { __value = 1}; 
# 283
typedef __true_type __type; 
# 284
}; 
# 289
template< class _Tp> 
# 290
struct __is_pointer { 
# 292
enum { __value}; 
# 293
typedef __false_type __type; 
# 294
}; 
# 296
template< class _Tp> 
# 297
struct __is_pointer< _Tp *>  { 
# 299
enum { __value = 1}; 
# 300
typedef __true_type __type; 
# 301
}; 
# 306
template< class _Tp> 
# 307
struct __is_normal_iterator { 
# 309
enum { __value}; 
# 310
typedef __false_type __type; 
# 311
}; 
# 313
template< class _Iterator, class _Container> 
# 314
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> >  { 
# 317
enum { __value = 1}; 
# 318
typedef __true_type __type; 
# 319
}; 
# 324
template< class _Tp> 
# 325
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 327
}; 
# 332
template< class _Tp> 
# 333
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> >  { 
# 335
}; 
# 340
template< class _Tp> 
# 341
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 343
}; 
# 348
template< class _Tp> 
# 349
struct __is_char { 
# 351
enum { __value}; 
# 352
typedef __false_type __type; 
# 353
}; 
# 356
template<> struct __is_char< char>  { 
# 358
enum { __value = 1}; 
# 359
typedef __true_type __type; 
# 360
}; 
# 364
template<> struct __is_char< wchar_t>  { 
# 366
enum { __value = 1}; 
# 367
typedef __true_type __type; 
# 368
}; 
# 371
template< class _Tp> 
# 372
struct __is_byte { 
# 374
enum { __value}; 
# 375
typedef __false_type __type; 
# 376
}; 
# 379
template<> struct __is_byte< char>  { 
# 381
enum { __value = 1}; 
# 382
typedef __true_type __type; 
# 383
}; 
# 386
template<> struct __is_byte< signed char>  { 
# 388
enum { __value = 1}; 
# 389
typedef __true_type __type; 
# 390
}; 
# 393
template<> struct __is_byte< unsigned char>  { 
# 395
enum { __value = 1}; 
# 396
typedef __true_type __type; 
# 397
}; 
# 402
template< class _Tp> 
# 403
struct __is_move_iterator { 
# 405
enum { __value}; 
# 406
typedef __false_type __type; 
# 407
}; 
# 422 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/4.8/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 42
template< bool , class > 
# 43
struct __enable_if { 
# 44
}; 
# 46
template< class _Tp> 
# 47
struct __enable_if< true, _Tp>  { 
# 48
typedef _Tp __type; }; 
# 52
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 53
struct __conditional_type { 
# 54
typedef _Iftrue __type; }; 
# 56
template< class _Iftrue, class _Iffalse> 
# 57
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 58
typedef _Iffalse __type; }; 
# 62
template< class _Tp> 
# 63
struct __add_unsigned { 
# 66
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 69
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 70
}; 
# 73
template<> struct __add_unsigned< char>  { 
# 74
typedef unsigned char __type; }; 
# 77
template<> struct __add_unsigned< signed char>  { 
# 78
typedef unsigned char __type; }; 
# 81
template<> struct __add_unsigned< short>  { 
# 82
typedef unsigned short __type; }; 
# 85
template<> struct __add_unsigned< int>  { 
# 86
typedef unsigned __type; }; 
# 89
template<> struct __add_unsigned< long>  { 
# 90
typedef unsigned long __type; }; 
# 93
template<> struct __add_unsigned< long long>  { 
# 94
typedef unsigned long long __type; }; 
# 98
template<> struct __add_unsigned< bool> ; 
# 101
template<> struct __add_unsigned< wchar_t> ; 
# 105
template< class _Tp> 
# 106
struct __remove_unsigned { 
# 109
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 112
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 113
}; 
# 116
template<> struct __remove_unsigned< char>  { 
# 117
typedef signed char __type; }; 
# 120
template<> struct __remove_unsigned< unsigned char>  { 
# 121
typedef signed char __type; }; 
# 124
template<> struct __remove_unsigned< unsigned short>  { 
# 125
typedef short __type; }; 
# 128
template<> struct __remove_unsigned< unsigned>  { 
# 129
typedef int __type; }; 
# 132
template<> struct __remove_unsigned< unsigned long>  { 
# 133
typedef long __type; }; 
# 136
template<> struct __remove_unsigned< unsigned long long>  { 
# 137
typedef long long __type; }; 
# 141
template<> struct __remove_unsigned< bool> ; 
# 144
template<> struct __remove_unsigned< wchar_t> ; 
# 148
template< class _Type> inline bool 
# 150
__is_null_pointer(_Type *__ptr) 
# 151
{ return __ptr == 0; } 
# 153
template< class _Type> inline bool 
# 155
__is_null_pointer(_Type) 
# 156
{ return false; } 
# 160
template< class _Tp, bool  = std::__is_integer< _Tp> ::__value> 
# 161
struct __promote { 
# 162
typedef double __type; }; 
# 167
template< class _Tp> 
# 168
struct __promote< _Tp, false>  { 
# 169
}; 
# 172
template<> struct __promote< long double>  { 
# 173
typedef long double __type; }; 
# 176
template<> struct __promote< double>  { 
# 177
typedef double __type; }; 
# 180
template<> struct __promote< float>  { 
# 181
typedef float __type; }; 
# 183
template< class _Tp, class _Up, class 
# 184
_Tp2 = typename __promote< _Tp> ::__type, class 
# 185
_Up2 = typename __promote< _Up> ::__type> 
# 186
struct __promote_2 { 
# 188
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 189
}; 
# 191
template< class _Tp, class _Up, class _Vp, class 
# 192
_Tp2 = typename __promote< _Tp> ::__type, class 
# 193
_Up2 = typename __promote< _Up> ::__type, class 
# 194
_Vp2 = typename __promote< _Vp> ::__type> 
# 195
struct __promote_3 { 
# 197
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 198
}; 
# 200
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 201
_Tp2 = typename __promote< _Tp> ::__type, class 
# 202
_Up2 = typename __promote< _Up> ::__type, class 
# 203
_Vp2 = typename __promote< _Vp> ::__type, class 
# 204
_Wp2 = typename __promote< _Wp> ::__type> 
# 205
struct __promote_4 { 
# 207
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 208
}; 
# 211
}
# 75 "/usr/include/c++/4.8/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
inline double abs(double __x) 
# 82
{ return __builtin_fabs(__x); } 
# 87
inline float abs(float __x) 
# 88
{ return __builtin_fabsf(__x); } 
# 91
inline long double abs(long double __x) 
# 92
{ return __builtin_fabsl(__x); } 
# 95
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
abs(_Tp __x) 
# 100
{ return __builtin_fabs(__x); } 
# 102
using ::acos;
# 106
inline float acos(float __x) 
# 107
{ return __builtin_acosf(__x); } 
# 110
inline long double acos(long double __x) 
# 111
{ return __builtin_acosl(__x); } 
# 114
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
acos(_Tp __x) 
# 119
{ return __builtin_acos(__x); } 
# 121
using ::asin;
# 125
inline float asin(float __x) 
# 126
{ return __builtin_asinf(__x); } 
# 129
inline long double asin(long double __x) 
# 130
{ return __builtin_asinl(__x); } 
# 133
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
asin(_Tp __x) 
# 138
{ return __builtin_asin(__x); } 
# 140
using ::atan;
# 144
inline float atan(float __x) 
# 145
{ return __builtin_atanf(__x); } 
# 148
inline long double atan(long double __x) 
# 149
{ return __builtin_atanl(__x); } 
# 152
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 156
atan(_Tp __x) 
# 157
{ return __builtin_atan(__x); } 
# 159
using ::atan2;
# 163
inline float atan2(float __y, float __x) 
# 164
{ return __builtin_atan2f(__y, __x); } 
# 167
inline long double atan2(long double __y, long double __x) 
# 168
{ return __builtin_atan2l(__y, __x); } 
# 171
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 174
atan2(_Tp __y, _Up __x) 
# 175
{ 
# 176
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 177
return atan2((__type)__y, (__type)__x); 
# 178
} 
# 180
using ::ceil;
# 184
inline float ceil(float __x) 
# 185
{ return __builtin_ceilf(__x); } 
# 188
inline long double ceil(long double __x) 
# 189
{ return __builtin_ceill(__x); } 
# 192
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
ceil(_Tp __x) 
# 197
{ return __builtin_ceil(__x); } 
# 199
using ::cos;
# 203
inline float cos(float __x) 
# 204
{ return __builtin_cosf(__x); } 
# 207
inline long double cos(long double __x) 
# 208
{ return __builtin_cosl(__x); } 
# 211
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cos(_Tp __x) 
# 216
{ return __builtin_cos(__x); } 
# 218
using ::cosh;
# 222
inline float cosh(float __x) 
# 223
{ return __builtin_coshf(__x); } 
# 226
inline long double cosh(long double __x) 
# 227
{ return __builtin_coshl(__x); } 
# 230
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
cosh(_Tp __x) 
# 235
{ return __builtin_cosh(__x); } 
# 237
using ::exp;
# 241
inline float exp(float __x) 
# 242
{ return __builtin_expf(__x); } 
# 245
inline long double exp(long double __x) 
# 246
{ return __builtin_expl(__x); } 
# 249
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
exp(_Tp __x) 
# 254
{ return __builtin_exp(__x); } 
# 256
using ::fabs;
# 260
inline float fabs(float __x) 
# 261
{ return __builtin_fabsf(__x); } 
# 264
inline long double fabs(long double __x) 
# 265
{ return __builtin_fabsl(__x); } 
# 268
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
fabs(_Tp __x) 
# 273
{ return __builtin_fabs(__x); } 
# 275
using ::floor;
# 279
inline float floor(float __x) 
# 280
{ return __builtin_floorf(__x); } 
# 283
inline long double floor(long double __x) 
# 284
{ return __builtin_floorl(__x); } 
# 287
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 291
floor(_Tp __x) 
# 292
{ return __builtin_floor(__x); } 
# 294
using ::fmod;
# 298
inline float fmod(float __x, float __y) 
# 299
{ return __builtin_fmodf(__x, __y); } 
# 302
inline long double fmod(long double __x, long double __y) 
# 303
{ return __builtin_fmodl(__x, __y); } 
# 306
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 309
fmod(_Tp __x, _Up __y) 
# 310
{ 
# 311
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 312
return fmod((__type)__x, (__type)__y); 
# 313
} 
# 315
using ::frexp;
# 319
inline float frexp(float __x, int *__exp) 
# 320
{ return __builtin_frexpf(__x, __exp); } 
# 323
inline long double frexp(long double __x, int *__exp) 
# 324
{ return __builtin_frexpl(__x, __exp); } 
# 327
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
frexp(_Tp __x, int *__exp) 
# 332
{ return __builtin_frexp(__x, __exp); } 
# 334
using ::ldexp;
# 338
inline float ldexp(float __x, int __exp) 
# 339
{ return __builtin_ldexpf(__x, __exp); } 
# 342
inline long double ldexp(long double __x, int __exp) 
# 343
{ return __builtin_ldexpl(__x, __exp); } 
# 346
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
ldexp(_Tp __x, int __exp) 
# 351
{ return __builtin_ldexp(__x, __exp); } 
# 353
using ::log;
# 357
inline float log(float __x) 
# 358
{ return __builtin_logf(__x); } 
# 361
inline long double log(long double __x) 
# 362
{ return __builtin_logl(__x); } 
# 365
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log(_Tp __x) 
# 370
{ return __builtin_log(__x); } 
# 372
using ::log10;
# 376
inline float log10(float __x) 
# 377
{ return __builtin_log10f(__x); } 
# 380
inline long double log10(long double __x) 
# 381
{ return __builtin_log10l(__x); } 
# 384
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 388
log10(_Tp __x) 
# 389
{ return __builtin_log10(__x); } 
# 391
using ::modf;
# 395
inline float modf(float __x, float *__iptr) 
# 396
{ return __builtin_modff(__x, __iptr); } 
# 399
inline long double modf(long double __x, long double *__iptr) 
# 400
{ return __builtin_modfl(__x, __iptr); } 
# 403
using ::pow;
# 407
inline float pow(float __x, float __y) 
# 408
{ return __builtin_powf(__x, __y); } 
# 411
inline long double pow(long double __x, long double __y) 
# 412
{ return __builtin_powl(__x, __y); } 
# 418
inline double pow(double __x, int __i) 
# 419
{ return __builtin_powi(__x, __i); } 
# 422
inline float pow(float __x, int __n) 
# 423
{ return __builtin_powif(__x, __n); } 
# 426
inline long double pow(long double __x, int __n) 
# 427
{ return __builtin_powil(__x, __n); } 
# 431
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 434
pow(_Tp __x, _Up __y) 
# 435
{ 
# 436
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 437
return pow((__type)__x, (__type)__y); 
# 438
} 
# 440
using ::sin;
# 444
inline float sin(float __x) 
# 445
{ return __builtin_sinf(__x); } 
# 448
inline long double sin(long double __x) 
# 449
{ return __builtin_sinl(__x); } 
# 452
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sin(_Tp __x) 
# 457
{ return __builtin_sin(__x); } 
# 459
using ::sinh;
# 463
inline float sinh(float __x) 
# 464
{ return __builtin_sinhf(__x); } 
# 467
inline long double sinh(long double __x) 
# 468
{ return __builtin_sinhl(__x); } 
# 471
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sinh(_Tp __x) 
# 476
{ return __builtin_sinh(__x); } 
# 478
using ::sqrt;
# 482
inline float sqrt(float __x) 
# 483
{ return __builtin_sqrtf(__x); } 
# 486
inline long double sqrt(long double __x) 
# 487
{ return __builtin_sqrtl(__x); } 
# 490
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
sqrt(_Tp __x) 
# 495
{ return __builtin_sqrt(__x); } 
# 497
using ::tan;
# 501
inline float tan(float __x) 
# 502
{ return __builtin_tanf(__x); } 
# 505
inline long double tan(long double __x) 
# 506
{ return __builtin_tanl(__x); } 
# 509
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tan(_Tp __x) 
# 514
{ return __builtin_tan(__x); } 
# 516
using ::tanh;
# 520
inline float tanh(float __x) 
# 521
{ return __builtin_tanhf(__x); } 
# 524
inline long double tanh(long double __x) 
# 525
{ return __builtin_tanhl(__x); } 
# 528
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 532
tanh(_Tp __x) 
# 533
{ return __builtin_tanh(__x); } 
# 536
}
# 555 "/usr/include/c++/4.8/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 805 "/usr/include/c++/4.8/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 808
fpclassify(_Tp __f) 
# 809
{ 
# 810
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 811
return __builtin_fpclassify(0, 1, 4, 3, 2, (__type)__f); 
# 813
} 
# 815
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 818
isfinite(_Tp __f) 
# 819
{ 
# 820
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 821
return __builtin_isfinite((__type)__f); 
# 822
} 
# 824
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 827
isinf(_Tp __f) 
# 828
{ 
# 829
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 830
return __builtin_isinf((__type)__f); 
# 831
} 
# 833
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 836
isnan(_Tp __f) 
# 837
{ 
# 838
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 839
return __builtin_isnan((__type)__f); 
# 840
} 
# 842
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 845
isnormal(_Tp __f) 
# 846
{ 
# 847
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 848
return __builtin_isnormal((__type)__f); 
# 849
} 
# 851
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 854
signbit(_Tp __f) 
# 855
{ 
# 856
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 857
return __builtin_signbit((__type)__f); 
# 858
} 
# 860
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 863
isgreater(_Tp __f1, _Tp __f2) 
# 864
{ 
# 865
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 866
return __builtin_isgreater((__type)__f1, (__type)__f2); 
# 867
} 
# 869
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 872
isgreaterequal(_Tp __f1, _Tp __f2) 
# 873
{ 
# 874
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 875
return __builtin_isgreaterequal((__type)__f1, (__type)__f2); 
# 876
} 
# 878
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 881
isless(_Tp __f1, _Tp __f2) 
# 882
{ 
# 883
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 884
return __builtin_isless((__type)__f1, (__type)__f2); 
# 885
} 
# 887
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 890
islessequal(_Tp __f1, _Tp __f2) 
# 891
{ 
# 892
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 893
return __builtin_islessequal((__type)__f1, (__type)__f2); 
# 894
} 
# 896
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 899
islessgreater(_Tp __f1, _Tp __f2) 
# 900
{ 
# 901
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 902
return __builtin_islessgreater((__type)__f1, (__type)__f2); 
# 903
} 
# 905
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 908
isunordered(_Tp __f1, _Tp __f2) 
# 909
{ 
# 910
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 911
return __builtin_isunordered((__type)__f1, (__type)__f2); 
# 912
} 
# 917
}
# 114 "/usr/include/c++/4.8/cstdlib" 3
namespace std __attribute((__visibility__("default"))) { 
# 118
using ::div_t;
# 119
using ::ldiv_t;
# 121
using ::abort;
# 122
using ::abs;
# 123
using ::atexit;
# 129
using ::atof;
# 130
using ::atoi;
# 131
using ::atol;
# 132
using ::bsearch;
# 133
using ::calloc;
# 134
using ::div;
# 135
using ::exit;
# 136
using ::free;
# 137
using ::getenv;
# 138
using ::labs;
# 139
using ::ldiv;
# 140
using ::malloc;
# 142
using ::mblen;
# 143
using ::mbstowcs;
# 144
using ::mbtowc;
# 146
using ::qsort;
# 152
using ::rand;
# 153
using ::realloc;
# 154
using ::srand;
# 155
using ::strtod;
# 156
using ::strtol;
# 157
using ::strtoul;
# 158
using ::system;
# 160
using ::wcstombs;
# 161
using ::wctomb;
# 166
inline long abs(long __i) { return __builtin_labs(__i); } 
# 169
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 174
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 179
inline __int128_t abs(__int128_t __x) { return (__x >= (0)) ? __x : (-__x); } 
# 183
}
# 196 "/usr/include/c++/4.8/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 201
using ::lldiv_t;
# 207
using ::_Exit;
# 211
using ::llabs;
# 214
inline lldiv_t div(long long __n, long long __d) 
# 215
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 217
using ::lldiv;
# 228 "/usr/include/c++/4.8/cstdlib" 3
using ::atoll;
# 229
using ::strtoll;
# 230
using ::strtoull;
# 232
using ::strtof;
# 233
using ::strtold;
# 236
}
# 238
namespace std { 
# 241
using __gnu_cxx::lldiv_t;
# 243
using __gnu_cxx::_Exit;
# 245
using __gnu_cxx::llabs;
# 246
using __gnu_cxx::div;
# 247
using __gnu_cxx::lldiv;
# 249
using __gnu_cxx::atoll;
# 250
using __gnu_cxx::strtof;
# 251
using __gnu_cxx::strtoll;
# 252
using __gnu_cxx::strtoull;
# 253
using __gnu_cxx::strtold;
# 254
}
# 8549 "/usr/local/cuda-7.0//include/math_functions.h"
__attribute((always_inline)) inline int signbit(float x); 
# 8553
__attribute((always_inline)) inline int signbit(double x); 
# 8555
__attribute((always_inline)) inline int signbit(long double x); 
# 8557
__attribute((always_inline)) inline int isfinite(float x); 
# 8561
__attribute((always_inline)) inline int isfinite(double x); 
# 8563
__attribute((always_inline)) inline int isfinite(long double x); 
# 8565
__attribute((always_inline)) inline int isnan(float x); 
# 8569
extern "C" { __attribute((always_inline)) inline int isnan(double x) throw(); } 
# 8571
__attribute((always_inline)) inline int isnan(long double x); 
# 8573
__attribute((always_inline)) inline int isinf(float x); 
# 8577
extern "C" { __attribute((always_inline)) inline int isinf(double x) throw(); } 
# 8579
__attribute((always_inline)) inline int isinf(long double x); 
# 8615 "/usr/local/cuda-7.0//include/math_functions.h"
namespace std { 
# 8617
template< class T> extern T __pow_helper(T, int); 
# 8618
template< class T> extern T __cmath_power(T, unsigned); 
# 8619
}
# 8621
using std::abs;
# 8622
using std::fabs;
# 8623
using std::ceil;
# 8624
using std::floor;
# 8625
using std::sqrt;
# 8626
using std::pow;
# 8627
using std::log;
# 8628
using std::log10;
# 8629
using std::fmod;
# 8630
using std::modf;
# 8631
using std::exp;
# 8632
using std::frexp;
# 8633
using std::ldexp;
# 8634
using std::asin;
# 8635
using std::sin;
# 8636
using std::sinh;
# 8637
using std::acos;
# 8638
using std::cos;
# 8639
using std::cosh;
# 8640
using std::atan;
# 8641
using std::atan2;
# 8642
using std::tan;
# 8643
using std::tanh;
# 8989 "/usr/local/cuda-7.0//include/math_functions.h"
namespace std { 
# 8996
extern inline long long abs(long long); 
# 9002
extern inline long abs(long); 
# 9003
extern inline float abs(float); 
# 9004
extern inline double abs(double); 
# 9005
extern inline float fabs(float); 
# 9006
extern inline float ceil(float); 
# 9007
extern inline float floor(float); 
# 9008
extern inline float sqrt(float); 
# 9009
extern inline float pow(float, float); 
# 9012
extern inline float pow(float, int); 
# 9013
extern inline double pow(double, int); 
# 9015
extern inline float log(float); 
# 9016
extern inline float log10(float); 
# 9017
extern inline float fmod(float, float); 
# 9018
extern inline float modf(float, float *); 
# 9019
extern inline float exp(float); 
# 9020
extern inline float frexp(float, int *); 
# 9021
extern inline float ldexp(float, int); 
# 9022
extern inline float asin(float); 
# 9023
extern inline float sin(float); 
# 9024
extern inline float sinh(float); 
# 9025
extern inline float acos(float); 
# 9026
extern inline float cos(float); 
# 9027
extern inline float cosh(float); 
# 9028
extern inline float atan(float); 
# 9029
extern inline float atan2(float, float); 
# 9030
extern inline float tan(float); 
# 9031
extern inline float tanh(float); 
# 9073 "/usr/local/cuda-7.0//include/math_functions.h"
}
# 9125 "/usr/local/cuda-7.0//include/math_functions.h"
static inline float logb(float a); 
# 9127
static inline int ilogb(float a); 
# 9129
static inline float scalbn(float a, int b); 
# 9131
static inline float scalbln(float a, long b); 
# 9133
static inline float exp2(float a); 
# 9135
static inline float expm1(float a); 
# 9137
static inline float log2(float a); 
# 9139
static inline float log1p(float a); 
# 9141
static inline float acosh(float a); 
# 9143
static inline float asinh(float a); 
# 9145
static inline float atanh(float a); 
# 9147
static inline float hypot(float a, float b); 
# 9149
static inline float norm3d(float a, float b, float c); 
# 9151
static inline float norm4d(float a, float b, float c, float d); 
# 9153
static inline float cbrt(float a); 
# 9155
static inline float erf(float a); 
# 9157
static inline float erfc(float a); 
# 9159
static inline float lgamma(float a); 
# 9161
static inline float tgamma(float a); 
# 9163
static inline float copysign(float a, float b); 
# 9165
static inline float nextafter(float a, float b); 
# 9167
static inline float remainder(float a, float b); 
# 9169
static inline float remquo(float a, float b, int * quo); 
# 9171
static inline float round(float a); 
# 9173
static inline long lround(float a); 
# 9175
static inline long long llround(float a); 
# 9177
static inline float trunc(float a); 
# 9179
static inline float rint(float a); 
# 9181
static inline long lrint(float a); 
# 9183
static inline long long llrint(float a); 
# 9185
static inline float nearbyint(float a); 
# 9187
static inline float fdim(float a, float b); 
# 9189
static inline float fma(float a, float b, float c); 
# 9191
static inline float fmax(float a, float b); 
# 9193
static inline float fmin(float a, float b); 
# 9233 "/usr/local/cuda-7.0//include/math_functions.h"
static inline float exp10(float a); 
# 9235
static inline float rsqrt(float a); 
# 9237
static inline float rcbrt(float a); 
# 9239
static inline float sinpi(float a); 
# 9241
static inline float cospi(float a); 
# 9243
static inline void sincospi(float a, float * sptr, float * cptr); 
# 9245
static inline void sincos(float a, float * sptr, float * cptr); 
# 9247
static inline float j0(float a); 
# 9249
static inline float j1(float a); 
# 9251
static inline float jn(int n, float a); 
# 9253
static inline float y0(float a); 
# 9255
static inline float y1(float a); 
# 9257
static inline float yn(int n, float a); 
# 9259
static inline float cyl_bessel_i0(float a); 
# 9261
static inline float cyl_bessel_i1(float a); 
# 9263
static inline float erfinv(float a); 
# 9265
static inline float erfcinv(float a); 
# 9267
static inline float normcdfinv(float a); 
# 9269
static inline float normcdf(float a); 
# 9271
static inline float erfcx(float a); 
# 9273
static inline double copysign(double a, float b); 
# 9275
static inline float copysign(float a, double b); 
# 9277
static inline unsigned min(unsigned a, unsigned b); 
# 9279
static inline unsigned min(int a, unsigned b); 
# 9281
static inline unsigned min(unsigned a, int b); 
# 9283
static inline long long min(long long a, long long b); 
# 9285
static inline unsigned long long min(unsigned long long a, unsigned long long b); 
# 9287
static inline unsigned long long min(long long a, unsigned long long b); 
# 9289
static inline unsigned long long min(unsigned long long a, long long b); 
# 9291
static inline float min(float a, float b); 
# 9293
static inline double min(double a, double b); 
# 9295
static inline double min(float a, double b); 
# 9297
static inline double min(double a, float b); 
# 9299
static inline unsigned max(unsigned a, unsigned b); 
# 9301
static inline unsigned max(int a, unsigned b); 
# 9303
static inline unsigned max(unsigned a, int b); 
# 9305
static inline long long max(long long a, long long b); 
# 9307
static inline unsigned long long max(unsigned long long a, unsigned long long b); 
# 9309
static inline unsigned long long max(long long a, unsigned long long b); 
# 9311
static inline unsigned long long max(unsigned long long a, long long b); 
# 9313
static inline float max(float a, float b); 
# 9315
static inline double max(double a, double b); 
# 9317
static inline double max(float a, double b); 
# 9319
static inline double max(double a, float b); 
# 256 "/usr/local/cuda-7.0//include/math_functions.hpp"
__attribute((always_inline)) inline int signbit(float x) { return __signbitf(x); } 
# 260
__attribute((always_inline)) inline int signbit(double x) { return __signbit(x); } 
# 262
__attribute((always_inline)) inline int signbit(long double x) { return __signbitl(x); } 
# 264
__attribute((always_inline)) inline int isfinite(float x) { return __finitef(x); } 
# 268
__attribute((always_inline)) inline int isfinite(double x) { return __finite(x); } 
# 270
__attribute((always_inline)) inline int isfinite(long double x) { return __finitel(x); } 
# 273
__attribute((always_inline)) inline int isnan(float x) { return __isnanf(x); } 
# 277
__attribute((always_inline)) inline int isnan(double x) throw() { return __isnan(x); } 
# 279
__attribute((always_inline)) inline int isnan(long double x) { return __isnanl(x); } 
# 281
__attribute((always_inline)) inline int isinf(float x) { return __isinff(x); } 
# 285
__attribute((always_inline)) inline int isinf(double x) throw() { return __isinf(x); } 
# 287
__attribute((always_inline)) inline int isinf(long double x) { return __isinfl(x); } 
# 478 "/usr/local/cuda-7.0//include/math_functions.hpp"
static inline float logb(float a) 
# 479
{ 
# 480
return logbf(a); 
# 481
} 
# 483
static inline int ilogb(float a) 
# 484
{ 
# 485
return ilogbf(a); 
# 486
} 
# 488
static inline float scalbn(float a, int b) 
# 489
{ 
# 490
return scalbnf(a, b); 
# 491
} 
# 493
static inline float scalbln(float a, long b) 
# 494
{ 
# 495
return scalblnf(a, b); 
# 496
} 
# 498
static inline float exp2(float a) 
# 499
{ 
# 500
return exp2f(a); 
# 501
} 
# 503
static inline float expm1(float a) 
# 504
{ 
# 505
return expm1f(a); 
# 506
} 
# 508
static inline float log2(float a) 
# 509
{ 
# 510
return log2f(a); 
# 511
} 
# 513
static inline float log1p(float a) 
# 514
{ 
# 515
return log1pf(a); 
# 516
} 
# 518
static inline float acosh(float a) 
# 519
{ 
# 520
return acoshf(a); 
# 521
} 
# 523
static inline float asinh(float a) 
# 524
{ 
# 525
return asinhf(a); 
# 526
} 
# 528
static inline float atanh(float a) 
# 529
{ 
# 530
return atanhf(a); 
# 531
} 
# 533
static inline float hypot(float a, float b) 
# 534
{ 
# 535
return hypotf(a, b); 
# 536
} 
# 538
static inline float norm3d(float a, float b, float c) 
# 539
{ 
# 540
return norm3df(a, b, c); 
# 541
} 
# 543
static inline float norm4d(float a, float b, float c, float d) 
# 544
{ 
# 545
return norm4df(a, b, c, d); 
# 546
} 
# 548
static inline float cbrt(float a) 
# 549
{ 
# 550
return cbrtf(a); 
# 551
} 
# 553
static inline float erf(float a) 
# 554
{ 
# 555
return erff(a); 
# 556
} 
# 558
static inline float erfc(float a) 
# 559
{ 
# 560
return erfcf(a); 
# 561
} 
# 563
static inline float lgamma(float a) 
# 564
{ 
# 565
return lgammaf(a); 
# 566
} 
# 568
static inline float tgamma(float a) 
# 569
{ 
# 570
return tgammaf(a); 
# 571
} 
# 573
static inline float copysign(float a, float b) 
# 574
{ 
# 575
return copysignf(a, b); 
# 576
} 
# 578
static inline float nextafter(float a, float b) 
# 579
{ 
# 580
return nextafterf(a, b); 
# 581
} 
# 583
static inline float remainder(float a, float b) 
# 584
{ 
# 585
return remainderf(a, b); 
# 586
} 
# 588
static inline float remquo(float a, float b, int *quo) 
# 589
{ 
# 590
return remquof(a, b, quo); 
# 591
} 
# 593
static inline float round(float a) 
# 594
{ 
# 595
return roundf(a); 
# 596
} 
# 598
static inline long lround(float a) 
# 599
{ 
# 600
return lroundf(a); 
# 601
} 
# 603
static inline long long llround(float a) 
# 604
{ 
# 605
return llroundf(a); 
# 606
} 
# 608
static inline float trunc(float a) 
# 609
{ 
# 610
return truncf(a); 
# 611
} 
# 613
static inline float rint(float a) 
# 614
{ 
# 615
return rintf(a); 
# 616
} 
# 618
static inline long lrint(float a) 
# 619
{ 
# 620
return lrintf(a); 
# 621
} 
# 623
static inline long long llrint(float a) 
# 624
{ 
# 625
return llrintf(a); 
# 626
} 
# 628
static inline float nearbyint(float a) 
# 629
{ 
# 630
return nearbyintf(a); 
# 631
} 
# 633
static inline float fdim(float a, float b) 
# 634
{ 
# 635
return fdimf(a, b); 
# 636
} 
# 638
static inline float fma(float a, float b, float c) 
# 639
{ 
# 640
return fmaf(a, b, c); 
# 641
} 
# 643
static inline float fmax(float a, float b) 
# 644
{ 
# 645
return fmaxf(a, b); 
# 646
} 
# 648
static inline float fmin(float a, float b) 
# 649
{ 
# 650
return fminf(a, b); 
# 651
} 
# 655
static inline float exp10(float a) 
# 656
{ 
# 657
return exp10f(a); 
# 658
} 
# 660
static inline float rsqrt(float a) 
# 661
{ 
# 662
return rsqrtf(a); 
# 663
} 
# 665
static inline float rcbrt(float a) 
# 666
{ 
# 667
return rcbrtf(a); 
# 668
} 
# 670
static inline float sinpi(float a) 
# 671
{ 
# 672
return sinpif(a); 
# 673
} 
# 675
static inline float cospi(float a) 
# 676
{ 
# 677
return cospif(a); 
# 678
} 
# 680
static inline void sincospi(float a, float *sptr, float *cptr) 
# 681
{ 
# 682
sincospif(a, sptr, cptr); 
# 683
} 
# 685
static inline void sincos(float a, float *sptr, float *cptr) 
# 686
{ 
# 687
sincosf(a, sptr, cptr); 
# 688
} 
# 690
static inline float j0(float a) 
# 691
{ 
# 692
return j0f(a); 
# 693
} 
# 695
static inline float j1(float a) 
# 696
{ 
# 697
return j1f(a); 
# 698
} 
# 700
static inline float jn(int n, float a) 
# 701
{ 
# 702
return jnf(n, a); 
# 703
} 
# 705
static inline float y0(float a) 
# 706
{ 
# 707
return y0f(a); 
# 708
} 
# 710
static inline float y1(float a) 
# 711
{ 
# 712
return y1f(a); 
# 713
} 
# 715
static inline float yn(int n, float a) 
# 716
{ 
# 717
return ynf(n, a); 
# 718
} 
# 720
static inline float cyl_bessel_i0(float a) 
# 721
{ 
# 722
return cyl_bessel_i0f(a); 
# 723
} 
# 725
static inline float cyl_bessel_i1(float a) 
# 726
{ 
# 727
return cyl_bessel_i1f(a); 
# 728
} 
# 730
static inline float erfinv(float a) 
# 731
{ 
# 732
return erfinvf(a); 
# 733
} 
# 735
static inline float erfcinv(float a) 
# 736
{ 
# 737
return erfcinvf(a); 
# 738
} 
# 740
static inline float normcdfinv(float a) 
# 741
{ 
# 742
return normcdfinvf(a); 
# 743
} 
# 745
static inline float normcdf(float a) 
# 746
{ 
# 747
return normcdff(a); 
# 748
} 
# 750
static inline float erfcx(float a) 
# 751
{ 
# 752
return erfcxf(a); 
# 753
} 
# 755
static inline double copysign(double a, float b) 
# 756
{ 
# 757
return copysign(a, (double)b); 
# 758
} 
# 760
static inline float copysign(float a, double b) 
# 761
{ 
# 762
return copysignf(a, (float)b); 
# 763
} 
# 765
static inline unsigned min(unsigned a, unsigned b) 
# 766
{ 
# 767
return umin(a, b); 
# 768
} 
# 770
static inline unsigned min(int a, unsigned b) 
# 771
{ 
# 772
return umin((unsigned)a, b); 
# 773
} 
# 775
static inline unsigned min(unsigned a, int b) 
# 776
{ 
# 777
return umin(a, (unsigned)b); 
# 778
} 
# 780
static inline long long min(long long a, long long b) 
# 781
{ 
# 782
return llmin(a, b); 
# 783
} 
# 785
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 786
{ 
# 787
return ullmin(a, b); 
# 788
} 
# 790
static inline unsigned long long min(long long a, unsigned long long b) 
# 791
{ 
# 792
return ullmin((unsigned long long)a, b); 
# 793
} 
# 795
static inline unsigned long long min(unsigned long long a, long long b) 
# 796
{ 
# 797
return ullmin(a, (unsigned long long)b); 
# 798
} 
# 800
static inline float min(float a, float b) 
# 801
{ 
# 802
return fminf(a, b); 
# 803
} 
# 805
static inline double min(double a, double b) 
# 806
{ 
# 807
return fmin(a, b); 
# 808
} 
# 810
static inline double min(float a, double b) 
# 811
{ 
# 812
return fmin((double)a, b); 
# 813
} 
# 815
static inline double min(double a, float b) 
# 816
{ 
# 817
return fmin(a, (double)b); 
# 818
} 
# 820
static inline unsigned max(unsigned a, unsigned b) 
# 821
{ 
# 822
return umax(a, b); 
# 823
} 
# 825
static inline unsigned max(int a, unsigned b) 
# 826
{ 
# 827
return umax((unsigned)a, b); 
# 828
} 
# 830
static inline unsigned max(unsigned a, int b) 
# 831
{ 
# 832
return umax(a, (unsigned)b); 
# 833
} 
# 835
static inline long long max(long long a, long long b) 
# 836
{ 
# 837
return llmax(a, b); 
# 838
} 
# 840
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 841
{ 
# 842
return ullmax(a, b); 
# 843
} 
# 845
static inline unsigned long long max(long long a, unsigned long long b) 
# 846
{ 
# 847
return ullmax((unsigned long long)a, b); 
# 848
} 
# 850
static inline unsigned long long max(unsigned long long a, long long b) 
# 851
{ 
# 852
return ullmax(a, (unsigned long long)b); 
# 853
} 
# 855
static inline float max(float a, float b) 
# 856
{ 
# 857
return fmaxf(a, b); 
# 858
} 
# 860
static inline double max(double a, double b) 
# 861
{ 
# 862
return fmax(a, b); 
# 863
} 
# 865
static inline double max(float a, double b) 
# 866
{ 
# 867
return fmax((double)a, b); 
# 868
} 
# 870
static inline double max(double a, float b) 
# 871
{ 
# 872
return fmax(a, (double)b); 
# 873
} 
# 77 "/usr/local/cuda-7.0//include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 78
struct surface : public surfaceReference { 
# 81
surface() 
# 82
{ 
# 83
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 84
} 
# 86
surface(cudaChannelFormatDesc desc) 
# 87
{ 
# 88
(channelDesc) = desc; 
# 89
} 
# 91
}; 
# 93
template< int dim> 
# 94
struct surface< void, dim>  : public surfaceReference { 
# 97
surface() 
# 98
{ 
# 99
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 100
} 
# 102
}; 
# 77 "/usr/local/cuda-7.0//include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 78
struct texture : public textureReference { 
# 81
texture(int norm = 0, cudaTextureFilterMode 
# 82
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 83
aMode = cudaAddressModeClamp) 
# 84
{ 
# 85
(normalized) = norm; 
# 86
(filterMode) = fMode; 
# 87
((addressMode)[0]) = aMode; 
# 88
((addressMode)[1]) = aMode; 
# 89
((addressMode)[2]) = aMode; 
# 90
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 91
(sRGB) = 0; 
# 92
} 
# 94
texture(int norm, cudaTextureFilterMode 
# 95
fMode, cudaTextureAddressMode 
# 96
aMode, cudaChannelFormatDesc 
# 97
desc) 
# 98
{ 
# 99
(normalized) = norm; 
# 100
(filterMode) = fMode; 
# 101
((addressMode)[0]) = aMode; 
# 102
((addressMode)[1]) = aMode; 
# 103
((addressMode)[2]) = aMode; 
# 104
(channelDesc) = desc; 
# 105
(sRGB) = 0; 
# 106
} 
# 108
}; 
# 3200 "/usr/local/cuda-7.0//include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b); 
# 3202
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b); 
# 3204
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b); 
# 3206
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b); 
# 3208
__attribute__((unused)) static inline long long mul64hi(long long a, long long b); 
# 3210
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b); 
# 3212
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b); 
# 3214
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b); 
# 3216
__attribute__((unused)) static inline int float_as_int(float a); 
# 3218
__attribute__((unused)) static inline float int_as_float(int a); 
# 3220
__attribute__((unused)) static inline float saturate(float a); 
# 3222
__attribute__((unused)) static inline int mul24(int a, int b); 
# 3224
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b); 
# 3226
__attribute__((unused)) static inline void trap(); 
# 3229
__attribute__((unused)) static inline void brkpt(int c = 0); 
# 3231
__attribute__((unused)) static inline void syncthreads(); 
# 3233
__attribute__((unused)) static inline void prof_trigger(int e); 
# 3235
__attribute__((unused)) static inline void threadfence(bool global = true); 
# 3237
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
# 3239
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
# 3241
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
# 3243
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 79 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 80
{int volatile ___ = 1;(void)a;(void)b;
# 82
::exit(___);}
#if 0
# 80
{ 
# 81
return __mulhi(a, b); 
# 82
} 
#endif
# 84 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 85
{int volatile ___ = 1;(void)a;(void)b;
# 87
::exit(___);}
#if 0
# 85
{ 
# 86
return __umulhi(a, b); 
# 87
} 
#endif
# 89 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 90
{int volatile ___ = 1;(void)a;(void)b;
# 92
::exit(___);}
#if 0
# 90
{ 
# 91
return __umulhi((unsigned)a, b); 
# 92
} 
#endif
# 94 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 95
{int volatile ___ = 1;(void)a;(void)b;
# 97
::exit(___);}
#if 0
# 95
{ 
# 96
return __umulhi(a, (unsigned)b); 
# 97
} 
#endif
# 99 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 100
{int volatile ___ = 1;(void)a;(void)b;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
return __mul64hi(a, b); 
# 102
} 
#endif
# 104 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 105
{int volatile ___ = 1;(void)a;(void)b;
# 107
::exit(___);}
#if 0
# 105
{ 
# 106
return __umul64hi(a, b); 
# 107
} 
#endif
# 109 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 110
{int volatile ___ = 1;(void)a;(void)b;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
return __umul64hi((unsigned long long)a, b); 
# 112
} 
#endif
# 114 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 115
{int volatile ___ = 1;(void)a;(void)b;
# 117
::exit(___);}
#if 0
# 115
{ 
# 116
return __umul64hi(a, (unsigned long long)b); 
# 117
} 
#endif
# 119 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(float a) 
# 120
{int volatile ___ = 1;(void)a;
# 122
::exit(___);}
#if 0
# 120
{ 
# 121
return __float_as_int(a); 
# 122
} 
#endif
# 124 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(int a) 
# 125
{int volatile ___ = 1;(void)a;
# 127
::exit(___);}
#if 0
# 125
{ 
# 126
return __int_as_float(a); 
# 127
} 
#endif
# 129 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline float saturate(float a) 
# 130
{int volatile ___ = 1;(void)a;
# 132
::exit(___);}
#if 0
# 130
{ 
# 131
return __saturatef(a); 
# 132
} 
#endif
# 134 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline int mul24(int a, int b) 
# 135
{int volatile ___ = 1;(void)a;(void)b;
# 137
::exit(___);}
#if 0
# 135
{ 
# 136
return __mul24(a, b); 
# 137
} 
#endif
# 139 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 140
{int volatile ___ = 1;(void)a;(void)b;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
return __umul24(a, b); 
# 142
} 
#endif
# 144 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline void trap() 
# 145
{int volatile ___ = 1;
# 147
::exit(___);}
#if 0
# 145
{ 
# 146
__trap(); 
# 147
} 
#endif
# 150 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline void brkpt(int c) 
# 151
{int volatile ___ = 1;(void)c;
# 153
::exit(___);}
#if 0
# 151
{ 
# 152
__brkpt(c); 
# 153
} 
#endif
# 155 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline void syncthreads() 
# 156
{int volatile ___ = 1;
# 158
::exit(___);}
#if 0
# 156
{ 
# 157
__syncthreads(); 
# 158
} 
#endif
# 160 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline void prof_trigger(int e) 
# 161
{int volatile ___ = 1;(void)e;
# 178
::exit(___);}
#if 0
# 161
{ 
# 162
if (e == 0) { __prof_trigger(0); } else { 
# 163
if (e == 1) { __prof_trigger(1); } else { 
# 164
if (e == 2) { __prof_trigger(2); } else { 
# 165
if (e == 3) { __prof_trigger(3); } else { 
# 166
if (e == 4) { __prof_trigger(4); } else { 
# 167
if (e == 5) { __prof_trigger(5); } else { 
# 168
if (e == 6) { __prof_trigger(6); } else { 
# 169
if (e == 7) { __prof_trigger(7); } else { 
# 170
if (e == 8) { __prof_trigger(8); } else { 
# 171
if (e == 9) { __prof_trigger(9); } else { 
# 172
if (e == 10) { __prof_trigger(10); } else { 
# 173
if (e == 11) { __prof_trigger(11); } else { 
# 174
if (e == 12) { __prof_trigger(12); } else { 
# 175
if (e == 13) { __prof_trigger(13); } else { 
# 176
if (e == 14) { __prof_trigger(14); } else { 
# 177
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
# 178
} 
#endif
# 180 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline void threadfence(bool global) 
# 181
{int volatile ___ = 1;(void)global;
# 183
::exit(___);}
#if 0
# 181
{ 
# 182
global ? __threadfence() : __threadfence_block(); 
# 183
} 
#endif
# 185 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode) 
# 186
{int volatile ___ = 1;(void)a;(void)mode;
# 191
::exit(___);}
#if 0
# 186
{ 
# 187
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 191
} 
#endif
# 193 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode) 
# 194
{int volatile ___ = 1;(void)a;(void)mode;
# 199
::exit(___);}
#if 0
# 194
{ 
# 195
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 199
} 
#endif
# 201 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode) 
# 202
{int volatile ___ = 1;(void)a;(void)mode;
# 207
::exit(___);}
#if 0
# 202
{ 
# 203
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 207
} 
#endif
# 209 "/usr/local/cuda-7.0//include/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode) 
# 210
{int volatile ___ = 1;(void)a;(void)mode;
# 215
::exit(___);}
#if 0
# 210
{ 
# 211
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 215
} 
#endif
# 105 "/usr/local/cuda-7.0//include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int * address, int val); 
# 107
__attribute__((unused)) static inline unsigned atomicAdd(unsigned * address, unsigned val); 
# 109
__attribute__((unused)) static inline int atomicSub(int * address, int val); 
# 111
__attribute__((unused)) static inline unsigned atomicSub(unsigned * address, unsigned val); 
# 113
__attribute__((unused)) static inline int atomicExch(int * address, int val); 
# 115
__attribute__((unused)) static inline unsigned atomicExch(unsigned * address, unsigned val); 
# 117
__attribute__((unused)) static inline float atomicExch(float * address, float val); 
# 119
__attribute__((unused)) static inline int atomicMin(int * address, int val); 
# 121
__attribute__((unused)) static inline unsigned atomicMin(unsigned * address, unsigned val); 
# 123
__attribute__((unused)) static inline int atomicMax(int * address, int val); 
# 125
__attribute__((unused)) static inline unsigned atomicMax(unsigned * address, unsigned val); 
# 127
__attribute__((unused)) static inline unsigned atomicInc(unsigned * address, unsigned val); 
# 129
__attribute__((unused)) static inline unsigned atomicDec(unsigned * address, unsigned val); 
# 131
__attribute__((unused)) static inline int atomicAnd(int * address, int val); 
# 133
__attribute__((unused)) static inline unsigned atomicAnd(unsigned * address, unsigned val); 
# 135
__attribute__((unused)) static inline int atomicOr(int * address, int val); 
# 137
__attribute__((unused)) static inline unsigned atomicOr(unsigned * address, unsigned val); 
# 139
__attribute__((unused)) static inline int atomicXor(int * address, int val); 
# 141
__attribute__((unused)) static inline unsigned atomicXor(unsigned * address, unsigned val); 
# 143
__attribute__((unused)) static inline int atomicCAS(int * address, int compare, int val); 
# 145
__attribute__((unused)) static inline unsigned atomicCAS(unsigned * address, unsigned compare, unsigned val); 
# 178 "/usr/local/cuda-7.0//include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long * address, unsigned long long val); 
# 180
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long * address, unsigned long long val); 
# 182
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long * address, unsigned long long compare, unsigned long long val); 
# 184
__attribute__((unused)) static inline bool any(bool cond); 
# 186
__attribute__((unused)) static inline bool all(bool cond); 
# 78 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) 
# 79
{int volatile ___ = 1;(void)address;(void)val;
# 81
::exit(___);}
#if 0
# 79
{ 
# 80
return __iAtomicAdd(address, val); 
# 81
} 
#endif
# 83 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) 
# 84
{int volatile ___ = 1;(void)address;(void)val;
# 86
::exit(___);}
#if 0
# 84
{ 
# 85
return __uAtomicAdd(address, val); 
# 86
} 
#endif
# 88 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicSub(int *address, int val) 
# 89
{int volatile ___ = 1;(void)address;(void)val;
# 91
::exit(___);}
#if 0
# 89
{ 
# 90
return __iAtomicAdd(address, (unsigned)(-((int)val))); 
# 91
} 
#endif
# 93 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) 
# 94
{int volatile ___ = 1;(void)address;(void)val;
# 96
::exit(___);}
#if 0
# 94
{ 
# 95
return __uAtomicAdd(address, (unsigned)(-((int)val))); 
# 96
} 
#endif
# 98 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicExch(int *address, int val) 
# 99
{int volatile ___ = 1;(void)address;(void)val;
# 101
::exit(___);}
#if 0
# 99
{ 
# 100
return __iAtomicExch(address, val); 
# 101
} 
#endif
# 103 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) 
# 104
{int volatile ___ = 1;(void)address;(void)val;
# 106
::exit(___);}
#if 0
# 104
{ 
# 105
return __uAtomicExch(address, val); 
# 106
} 
#endif
# 108 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline float atomicExch(float *address, float val) 
# 109
{int volatile ___ = 1;(void)address;(void)val;
# 111
::exit(___);}
#if 0
# 109
{ 
# 110
return __fAtomicExch(address, val); 
# 111
} 
#endif
# 113 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicMin(int *address, int val) 
# 114
{int volatile ___ = 1;(void)address;(void)val;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
return __iAtomicMin(address, val); 
# 116
} 
#endif
# 118 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) 
# 119
{int volatile ___ = 1;(void)address;(void)val;
# 121
::exit(___);}
#if 0
# 119
{ 
# 120
return __uAtomicMin(address, val); 
# 121
} 
#endif
# 123 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicMax(int *address, int val) 
# 124
{int volatile ___ = 1;(void)address;(void)val;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
return __iAtomicMax(address, val); 
# 126
} 
#endif
# 128 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) 
# 129
{int volatile ___ = 1;(void)address;(void)val;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
return __uAtomicMax(address, val); 
# 131
} 
#endif
# 133 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) 
# 134
{int volatile ___ = 1;(void)address;(void)val;
# 136
::exit(___);}
#if 0
# 134
{ 
# 135
return __uAtomicInc(address, val); 
# 136
} 
#endif
# 138 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) 
# 139
{int volatile ___ = 1;(void)address;(void)val;
# 141
::exit(___);}
#if 0
# 139
{ 
# 140
return __uAtomicDec(address, val); 
# 141
} 
#endif
# 143 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) 
# 144
{int volatile ___ = 1;(void)address;(void)val;
# 146
::exit(___);}
#if 0
# 144
{ 
# 145
return __iAtomicAnd(address, val); 
# 146
} 
#endif
# 148 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) 
# 149
{int volatile ___ = 1;(void)address;(void)val;
# 151
::exit(___);}
#if 0
# 149
{ 
# 150
return __uAtomicAnd(address, val); 
# 151
} 
#endif
# 153 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicOr(int *address, int val) 
# 154
{int volatile ___ = 1;(void)address;(void)val;
# 156
::exit(___);}
#if 0
# 154
{ 
# 155
return __iAtomicOr(address, val); 
# 156
} 
#endif
# 158 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) 
# 159
{int volatile ___ = 1;(void)address;(void)val;
# 161
::exit(___);}
#if 0
# 159
{ 
# 160
return __uAtomicOr(address, val); 
# 161
} 
#endif
# 163 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicXor(int *address, int val) 
# 164
{int volatile ___ = 1;(void)address;(void)val;
# 166
::exit(___);}
#if 0
# 164
{ 
# 165
return __iAtomicXor(address, val); 
# 166
} 
#endif
# 168 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) 
# 169
{int volatile ___ = 1;(void)address;(void)val;
# 171
::exit(___);}
#if 0
# 169
{ 
# 170
return __uAtomicXor(address, val); 
# 171
} 
#endif
# 173 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) 
# 174
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return __iAtomicCAS(address, compare, val); 
# 176
} 
#endif
# 178 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
# 179
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return __uAtomicCAS(address, compare, val); 
# 181
} 
#endif
# 201 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) 
# 202
{int volatile ___ = 1;(void)address;(void)val;
# 204
::exit(___);}
#if 0
# 202
{ 
# 203
return __ullAtomicAdd(address, val); 
# 204
} 
#endif
# 206 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) 
# 207
{int volatile ___ = 1;(void)address;(void)val;
# 209
::exit(___);}
#if 0
# 207
{ 
# 208
return __ullAtomicExch(address, val); 
# 209
} 
#endif
# 211 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) 
# 212
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 214
::exit(___);}
#if 0
# 212
{ 
# 213
return __ullAtomicCAS(address, compare, val); 
# 214
} 
#endif
# 216 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline bool any(bool cond) 
# 217
{int volatile ___ = 1;(void)cond;
# 219
::exit(___);}
#if 0
# 217
{ 
# 218
return (bool)__any((int)cond); 
# 219
} 
#endif
# 221 "/usr/local/cuda-7.0//include/device_atomic_functions.hpp"
__attribute__((unused)) static inline bool all(bool cond) 
# 222
{int volatile ___ = 1;(void)cond;
# 224
::exit(___);}
#if 0
# 222
{ 
# 223
return (bool)__all((int)cond); 
# 224
} 
#endif
# 1141 "/usr/local/cuda-7.0//include/device_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1143
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1145
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1147
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1149
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1151
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1153
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1155
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1159
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1161
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1163
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 83 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 84
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 89
::exit(___);}
#if 0
# 84
{ 
# 85
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 89
} 
#endif
# 91 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 92
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 97
::exit(___);}
#if 0
# 92
{ 
# 93
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 97
} 
#endif
# 99 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 100
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 105
::exit(___);}
#if 0
# 100
{ 
# 101
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 105
} 
#endif
# 107 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 108
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 113
::exit(___);}
#if 0
# 108
{ 
# 109
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 113
} 
#endif
# 115 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 116
{int volatile ___ = 1;(void)a;(void)mode;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 121
} 
#endif
# 123 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 124
{int volatile ___ = 1;(void)a;(void)mode;
# 129
::exit(___);}
#if 0
# 124
{ 
# 125
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 129
} 
#endif
# 131 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 132
{int volatile ___ = 1;(void)a;(void)mode;
# 137
::exit(___);}
#if 0
# 132
{ 
# 133
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 137
} 
#endif
# 139 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 140
{int volatile ___ = 1;(void)a;(void)mode;
# 145
::exit(___);}
#if 0
# 140
{ 
# 141
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 145
} 
#endif
# 147 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 148
{int volatile ___ = 1;(void)a;(void)mode;
# 153
::exit(___);}
#if 0
# 148
{ 
# 149
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 153
} 
#endif
# 155 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 156
{int volatile ___ = 1;(void)a;(void)mode;
# 161
::exit(___);}
#if 0
# 156
{ 
# 157
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 161
} 
#endif
# 163 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 164
{int volatile ___ = 1;(void)a;(void)mode;
# 166
::exit(___);}
#if 0
# 164
{ 
# 165
return (double)a; 
# 166
} 
#endif
# 168 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 169
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 169
{ 
# 170
return (double)a; 
# 171
} 
#endif
# 173 "/usr/local/cuda-7.0//include/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 85 "/usr/local/cuda-7.0//include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float * address, float val); 
# 76 "/usr/local/cuda-7.0//include/sm_20_atomic_functions.hpp"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) 
# 77
{int volatile ___ = 1;(void)address;(void)val;
# 79
::exit(___);}
#if 0
# 77
{ 
# 78
return __fAtomicAdd(address, val); 
# 79
} 
#endif
# 93 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long * address, long long val); 
# 95
__attribute__((unused)) static inline long long atomicMax(long long * address, long long val); 
# 97
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long * address, unsigned long long val); 
# 99
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long * address, unsigned long long val); 
# 101
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long * address, unsigned long long val); 
# 103
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long * address, unsigned long long val); 
# 105
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long * address, unsigned long long val); 
# 78 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) 
# 79
{int volatile ___ = 1;(void)address;(void)val;
# 81
::exit(___);}
#if 0
# 79
{ 
# 80
return __illAtomicMin(address, val); 
# 81
} 
#endif
# 83 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) 
# 84
{int volatile ___ = 1;(void)address;(void)val;
# 86
::exit(___);}
#if 0
# 84
{ 
# 85
return __illAtomicMax(address, val); 
# 86
} 
#endif
# 88 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) 
# 89
{int volatile ___ = 1;(void)address;(void)val;
# 91
::exit(___);}
#if 0
# 89
{ 
# 90
return __ullAtomicMin(address, val); 
# 91
} 
#endif
# 93 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) 
# 94
{int volatile ___ = 1;(void)address;(void)val;
# 96
::exit(___);}
#if 0
# 94
{ 
# 95
return __ullAtomicMax(address, val); 
# 96
} 
#endif
# 98 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) 
# 99
{int volatile ___ = 1;(void)address;(void)val;
# 101
::exit(___);}
#if 0
# 99
{ 
# 100
return __ullAtomicAnd(address, val); 
# 101
} 
#endif
# 103 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) 
# 104
{int volatile ___ = 1;(void)address;(void)val;
# 106
::exit(___);}
#if 0
# 104
{ 
# 105
return __ullAtomicOr(address, val); 
# 106
} 
#endif
# 108 "/usr/local/cuda-7.0//include/sm_32_atomic_functions.hpp"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) 
# 109
{int volatile ___ = 1;(void)address;(void)val;
# 111
::exit(___);}
#if 0
# 109
{ 
# 110
return __ullAtomicXor(address, val); 
# 111
} 
#endif
# 415 "/usr/local/cuda-7.0//include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred); 
# 417
__attribute__((unused)) static inline int syncthreads_count(bool pred); 
# 419
__attribute__((unused)) static inline bool syncthreads_and(bool pred); 
# 421
__attribute__((unused)) static inline bool syncthreads_or(bool pred); 
# 426
__attribute__((unused)) static inline unsigned __isGlobal(const void * ptr); 
# 77 "/usr/local/cuda-7.0//include/sm_20_intrinsics.hpp"
__attribute__((unused)) static inline unsigned ballot(bool pred) 
# 78
{int volatile ___ = 1;(void)pred;
# 80
::exit(___);}
#if 0
# 78
{ 
# 79
return __ballot((int)pred); 
# 80
} 
#endif
# 82 "/usr/local/cuda-7.0//include/sm_20_intrinsics.hpp"
__attribute__((unused)) static inline int syncthreads_count(bool pred) 
# 83
{int volatile ___ = 1;(void)pred;
# 85
::exit(___);}
#if 0
# 83
{ 
# 84
return __syncthreads_count((int)pred); 
# 85
} 
#endif
# 87 "/usr/local/cuda-7.0//include/sm_20_intrinsics.hpp"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) 
# 88
{int volatile ___ = 1;(void)pred;
# 90
::exit(___);}
#if 0
# 88
{ 
# 89
return (bool)__syncthreads_and((int)pred); 
# 90
} 
#endif
# 92 "/usr/local/cuda-7.0//include/sm_20_intrinsics.hpp"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) 
# 93
{int volatile ___ = 1;(void)pred;
# 95
::exit(___);}
#if 0
# 93
{ 
# 94
return (bool)__syncthreads_or((int)pred); 
# 95
} 
#endif
# 100 "/usr/local/cuda-7.0//include/sm_20_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) 
# 101
{int volatile ___ = 1;(void)ptr;
# 114
::exit(___);}
#if 0
# 101
{ 
# 102
unsigned ret; 
# 103
__asm__ volatile("{ \n\t    .reg .pred p; \n\t    isspacep.global p, %1; \n\t    selp.u32 %0, 1, 0, p;  \n\t} \n\t" : "=r" (ret) : "l" (ptr)); 
# 113
return ret; 
# 114
} 
#endif
# 91 "/usr/local/cuda-7.0//include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32); 
# 93
__attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32); 
# 95
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32); 
# 96
__attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32); 
# 98
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32); 
# 100
__attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32); 
# 102
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32); 
# 104
__attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32); 
# 106
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32); 
# 108
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32); 
# 110
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32); 
# 112
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32); 
# 115
__attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32); 
# 117
__attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32); 
# 119
__attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32); 
# 121
__attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32); 
# 123
__attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32); 
# 125
__attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32); 
# 127
__attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32); 
# 129
__attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32); 
# 131
__attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32); 
# 133
__attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32); 
# 135
__attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32); 
# 137
__attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32); 
# 141
__attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32); 
# 143
__attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32); 
# 145
__attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32); 
# 147
__attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32); 
# 149
__attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32); 
# 151
__attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32); 
# 153
__attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32); 
# 155
__attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32); 
# 99 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 104
::exit(___);}
#if 0
# 99
{ 
# 100
int ret; 
# 101
int c = ((32 - width) << 8) | 31; 
# 102
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (srcLane), "r" (c)); 
# 103
return ret; 
# 104
} 
#endif
# 106 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return (unsigned)__shfl((int)var, srcLane, width); 
# 108
} 
#endif
# 110 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
int ret; 
# 112
int c = (32 - width) << 8; 
# 113
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 114
return ret; 
# 115
} 
#endif
# 116 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return (unsigned)__shfl_up((int)var, delta, width); 
# 118
} 
#endif
# 120 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 125
::exit(___);}
#if 0
# 120
{ 
# 121
int ret; 
# 122
int c = ((32 - width) << 8) | 31; 
# 123
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 124
return ret; 
# 125
} 
#endif
# 127 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 129
::exit(___);}
#if 0
# 127
{ 
# 128
return (unsigned)__shfl_down((int)var, delta, width); 
# 129
} 
#endif
# 131 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 136
::exit(___);}
#if 0
# 131
{ 
# 132
int ret; 
# 133
int c = ((32 - width) << 8) | 31; 
# 134
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (laneMask), "r" (c)); 
# 135
return ret; 
# 136
} 
#endif
# 138 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 140
::exit(___);}
#if 0
# 138
{ 
# 139
return (unsigned)__shfl_xor((int)var, laneMask, width); 
# 140
} 
#endif
# 142 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 148
::exit(___);}
#if 0
# 142
{ 
# 143
float ret; 
# 144
int c; 
# 145
c = (((32 - width) << 8) | 31); 
# 146
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (srcLane), "r" (c)); 
# 147
return ret; 
# 148
} 
#endif
# 150 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 156
::exit(___);}
#if 0
# 150
{ 
# 151
float ret; 
# 152
int c; 
# 153
c = ((32 - width) << 8); 
# 154
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 155
return ret; 
# 156
} 
#endif
# 158 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 164
::exit(___);}
#if 0
# 158
{ 
# 159
float ret; 
# 160
int c; 
# 161
c = (((32 - width) << 8) | 31); 
# 162
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 163
return ret; 
# 164
} 
#endif
# 166 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 172
::exit(___);}
#if 0
# 166
{ 
# 167
float ret; 
# 168
int c; 
# 169
c = (((32 - width) << 8) | 31); 
# 170
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (laneMask), "r" (c)); 
# 171
return ret; 
# 172
} 
#endif
# 175 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 182
::exit(___);}
#if 0
# 175
{ 
# 176
int lo, hi; 
# 177
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=r" (lo), "=r" (hi) : "l" (var)); 
# 178
hi = __shfl(hi, srcLane, width); 
# 179
lo = __shfl(lo, srcLane, width); 
# 180
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=l" (var) : "r" (lo), "r" (hi)); 
# 181
return var; 
# 182
} 
#endif
# 184 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (unsigned long long)__shfl((long long)var, srcLane, width); 
# 186
} 
#endif
# 188 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 195
::exit(___);}
#if 0
# 188
{ 
# 189
int lo, hi; 
# 190
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=r" (lo), "=r" (hi) : "l" (var)); 
# 191
hi = __shfl_up(hi, delta, width); 
# 192
lo = __shfl_up(lo, delta, width); 
# 193
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=l" (var) : "r" (lo), "r" (hi)); 
# 194
return var; 
# 195
} 
#endif
# 197 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 199
::exit(___);}
#if 0
# 197
{ 
# 198
return (unsigned long long)__shfl_up((long long)var, delta, width); 
# 199
} 
#endif
# 201 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 208
::exit(___);}
#if 0
# 201
{ 
# 202
int lo, hi; 
# 203
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=r" (lo), "=r" (hi) : "l" (var)); 
# 204
hi = __shfl_down(hi, delta, width); 
# 205
lo = __shfl_down(lo, delta, width); 
# 206
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=l" (var) : "r" (lo), "r" (hi)); 
# 207
return var; 
# 208
} 
#endif
# 210 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 212
::exit(___);}
#if 0
# 210
{ 
# 211
return (unsigned long long)__shfl_down((long long)var, delta, width); 
# 212
} 
#endif
# 214 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 221
::exit(___);}
#if 0
# 214
{ 
# 215
int lo, hi; 
# 216
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=r" (lo), "=r" (hi) : "l" (var)); 
# 217
hi = __shfl_xor(hi, laneMask, width); 
# 218
lo = __shfl_xor(lo, laneMask, width); 
# 219
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=l" (var) : "r" (lo), "r" (hi)); 
# 220
return var; 
# 221
} 
#endif
# 223 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
return (unsigned long long)__shfl_xor((long long)var, laneMask, width); 
# 225
} 
#endif
# 227 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline double __shfl(double var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 234
::exit(___);}
#if 0
# 227
{ 
# 228
float lo, hi; 
# 229
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=f" (lo), "=f" (hi) : "d" (var)); 
# 230
hi = __shfl(hi, srcLane, width); 
# 231
lo = __shfl(lo, srcLane, width); 
# 232
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=d" (var) : "f" (lo), "f" (hi)); 
# 233
return var; 
# 234
} 
#endif
# 236 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 243
::exit(___);}
#if 0
# 236
{ 
# 237
float lo, hi; 
# 238
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=f" (lo), "=f" (hi) : "d" (var)); 
# 239
hi = __shfl_up(hi, delta, width); 
# 240
lo = __shfl_up(lo, delta, width); 
# 241
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=d" (var) : "f" (lo), "f" (hi)); 
# 242
return var; 
# 243
} 
#endif
# 245 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 252
::exit(___);}
#if 0
# 245
{ 
# 246
float lo, hi; 
# 247
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=f" (lo), "=f" (hi) : "d" (var)); 
# 248
hi = __shfl_down(hi, delta, width); 
# 249
lo = __shfl_down(lo, delta, width); 
# 250
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=d" (var) : "f" (lo), "f" (hi)); 
# 251
return var; 
# 252
} 
#endif
# 254 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 261
::exit(___);}
#if 0
# 254
{ 
# 255
float lo, hi; 
# 256
__asm__ volatile("mov.b64 {%0,%1}, %2;" : "=f" (lo), "=f" (hi) : "d" (var)); 
# 257
hi = __shfl_xor(hi, laneMask, width); 
# 258
lo = __shfl_xor(lo, laneMask, width); 
# 259
__asm__ volatile("mov.b64 %0, {%1,%2};" : "=d" (var) : "f" (lo), "f" (hi)); 
# 260
return var; 
# 261
} 
#endif
# 265 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long __shfl(long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 269
::exit(___);}
#if 0
# 265
{ 
# 266
return (sizeof(long) == sizeof(long long)) ? __shfl((long long)var, srcLane, width) : (__shfl((int)var, srcLane, width)); 
# 269
} 
#endif
# 271 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 275
::exit(___);}
#if 0
# 271
{ 
# 272
return (sizeof(long) == sizeof(long long)) ? __shfl((unsigned long long)var, srcLane, width) : (__shfl((unsigned)var, srcLane, width)); 
# 275
} 
#endif
# 277 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 281
::exit(___);}
#if 0
# 277
{ 
# 278
return (sizeof(long) == sizeof(long long)) ? __shfl_up((long long)var, delta, width) : (__shfl_up((int)var, delta, width)); 
# 281
} 
#endif
# 283 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 287
::exit(___);}
#if 0
# 283
{ 
# 284
return (sizeof(long) == sizeof(long long)) ? __shfl_up((unsigned long long)var, delta, width) : (__shfl_up((unsigned)var, delta, width)); 
# 287
} 
#endif
# 289 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 293
::exit(___);}
#if 0
# 289
{ 
# 290
return (sizeof(long) == sizeof(long long)) ? __shfl_down((long long)var, delta, width) : (__shfl_down((int)var, delta, width)); 
# 293
} 
#endif
# 295 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 299
::exit(___);}
#if 0
# 295
{ 
# 296
return (sizeof(long) == sizeof(long long)) ? __shfl_down((unsigned long long)var, delta, width) : (__shfl_down((unsigned)var, delta, width)); 
# 299
} 
#endif
# 301 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
return (sizeof(long) == sizeof(long long)) ? __shfl_xor((long long)var, laneMask, width) : (__shfl_xor((int)var, laneMask, width)); 
# 305
} 
#endif
# 307 "/usr/local/cuda-7.0//include/sm_30_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 311
::exit(___);}
#if 0
# 307
{ 
# 308
return (sizeof(long) == sizeof(long long)) ? __shfl_xor((unsigned long long)var, laneMask, width) : (__shfl_xor((unsigned)var, laneMask, width)); 
# 311
} 
#endif
# 80 "/usr/local/cuda-7.0//include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long * ptr); 
# 81
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long * ptr); 
# 84
__attribute__((unused)) static inline char __ldg(const char * ptr); 
# 85
__attribute__((unused)) static inline short __ldg(const short * ptr); 
# 86
__attribute__((unused)) static inline int __ldg(const int * ptr); 
# 87
__attribute__((unused)) static inline long long __ldg(const long long * ptr); 
# 88
__attribute__((unused)) static inline char2 __ldg(const char2 * ptr); 
# 89
__attribute__((unused)) static inline char4 __ldg(const char4 * ptr); 
# 90
__attribute__((unused)) static inline short2 __ldg(const short2 * ptr); 
# 91
__attribute__((unused)) static inline short4 __ldg(const short4 * ptr); 
# 92
__attribute__((unused)) static inline int2 __ldg(const int2 * ptr); 
# 93
__attribute__((unused)) static inline int4 __ldg(const int4 * ptr); 
# 94
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 * ptr); 
# 96
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char * ptr); 
# 97
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short * ptr); 
# 98
__attribute__((unused)) static inline unsigned __ldg(const unsigned * ptr); 
# 99
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long * ptr); 
# 100
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 * ptr); 
# 101
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 * ptr); 
# 102
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 * ptr); 
# 103
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 * ptr); 
# 104
__attribute__((unused)) static inline uint2 __ldg(const uint2 * ptr); 
# 105
__attribute__((unused)) static inline uint4 __ldg(const uint4 * ptr); 
# 106
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 * ptr); 
# 108
__attribute__((unused)) static inline float __ldg(const float * ptr); 
# 109
__attribute__((unused)) static inline double __ldg(const double * ptr); 
# 110
__attribute__((unused)) static inline float2 __ldg(const float2 * ptr); 
# 111
__attribute__((unused)) static inline float4 __ldg(const float4 * ptr); 
# 112
__attribute__((unused)) static inline double2 __ldg(const double2 * ptr); 
# 119
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift); 
# 120
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift); 
# 123
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift); 
# 124
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift); 
# 99 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ unsigned long ret; __asm__ volatile("ld.global.nc.s64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return (long)ret; } 
#endif
# 100 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ unsigned long ret; __asm__ volatile("ld.global.nc.u64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return ret; } 
#endif
# 107 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ unsigned ret; __asm__ volatile("ld.global.nc.s8 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (char)ret; } 
#endif
# 108 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ unsigned short ret; __asm__ volatile("ld.global.nc.s16 %0, [%1];" : "=h" (ret) : "l" (ptr)); return (short)ret; } 
#endif
# 109 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ unsigned ret; __asm__ volatile("ld.global.nc.s32 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (int)ret; } 
#endif
# 110 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ unsigned long long ret; __asm__ volatile("ld.global.nc.s64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return (long long)ret; } 
#endif
# 111 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ char2 ret; int2 tmp; __asm__ volatile("ld.global.nc.v2.s8 {%0,%1}, [%2];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (ptr)); (ret.x) = ((char)(tmp.x)); (ret.y) = ((char)(tmp.y)); return ret; } 
#endif
# 112 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ char4 ret; int4 tmp; __asm__ volatile("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (ptr)); (ret.x) = ((char)(tmp.x)); (ret.y) = ((char)(tmp.y)); (ret.z) = ((char)(tmp.z)); (ret.w) = ((char)(tmp.w)); return ret; } 
#endif
# 113 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ short2 ret; __asm__ volatile("ld.global.nc.v2.s16 {%0,%1}, [%2];" : "=h" (ret.x), "=h" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 114 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 114
{ short4 ret; __asm__ volatile("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h" (ret.x), "=h" (ret.y), "=h" (ret.z), "=h" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 115 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ int2 ret; __asm__ volatile("ld.global.nc.v2.s32 {%0,%1}, [%2];" : "=r" (ret.x), "=r" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 116 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ int4 ret; __asm__ volatile("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r" (ret.x), "=r" (ret.y), "=r" (ret.z), "=r" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 117 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ longlong2 ret; __asm__ volatile("ld.global.nc.v2.s64 %0, [%1];" : "=l" (ret.x), "=l" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 119 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ unsigned ret; __asm__ volatile("ld.global.nc.u8 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (unsigned char)ret; } 
#endif
# 120 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 120
{ unsigned short ret; __asm__ volatile("ld.global.nc.u16 %0, [%1];" : "=h" (ret) : "l" (ptr)); return ret; } 
#endif
# 121 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 121
{ unsigned ret; __asm__ volatile("ld.global.nc.u32 %0, [%1];" : "=r" (ret) : "l" (ptr)); return ret; } 
#endif
# 122 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 122
{ unsigned long long ret; __asm__ volatile("ld.global.nc.u64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return ret; } 
#endif
# 123 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ uchar2 ret; uint2 tmp; __asm__ volatile("ld.global.nc.v2.u8 {%0,%1}, [%2];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (ptr)); (ret.x) = ((unsigned char)(tmp.x)); (ret.y) = ((unsigned char)(tmp.y)); return ret; } 
#endif
# 124 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ uchar4 ret; uint4 tmp; __asm__ volatile("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (ptr)); (ret.x) = ((unsigned char)(tmp.x)); (ret.y) = ((unsigned char)(tmp.y)); (ret.z) = ((unsigned char)(tmp.z)); (ret.w) = ((unsigned char)(tmp.w)); return ret; } 
#endif
# 125 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 125
{ ushort2 ret; __asm__ volatile("ld.global.nc.v2.u16 {%0,%1}, [%2];" : "=h" (ret.x), "=h" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 126 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ ushort4 ret; __asm__ volatile("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h" (ret.x), "=h" (ret.y), "=h" (ret.z), "=h" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 127 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ uint2 ret; __asm__ volatile("ld.global.nc.v2.u32 {%0,%1}, [%2];" : "=r" (ret.x), "=r" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 128 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ uint4 ret; __asm__ volatile("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r" (ret.x), "=r" (ret.y), "=r" (ret.z), "=r" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 129 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ ulonglong2 ret; __asm__ volatile("ld.global.nc.v2.u64 %0, [%1];" : "=l" (ret.x), "=l" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 131 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ float ret; __asm__ volatile("ld.global.nc.f32 %0, [%1];" : "=f" (ret) : "l" (ptr)); return ret; } 
#endif
# 132 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ double ret; __asm__ volatile("ld.global.nc.f64 %0, [%1];" : "=d" (ret) : "l" (ptr)); return ret; } 
#endif
# 133 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ float2 ret; __asm__ volatile("ld.global.nc.v2.f32 {%0,%1}, [%2];" : "=f" (ret.x), "=f" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 134 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ float4 ret; __asm__ volatile("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f" (ret.x), "=f" (ret.y), "=f" (ret.z), "=f" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 135 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ double2 ret; __asm__ volatile("ld.global.nc.v2.f64 {%0,%1}, [%2];" : "=d" (ret.x), "=d" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 144 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) 
# 145
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 149
::exit(___);}
#if 0
# 145
{ 
# 146
unsigned ret; 
# 147
__asm__ volatile("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 148
return ret; 
# 149
} 
#endif
# 150 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) 
# 151
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 155
::exit(___);}
#if 0
# 151
{ 
# 152
unsigned ret; 
# 153
__asm__ volatile("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 154
return ret; 
# 155
} 
#endif
# 158 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) 
# 159
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 163
::exit(___);}
#if 0
# 159
{ 
# 160
unsigned ret; 
# 161
__asm__ volatile("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 162
return ret; 
# 163
} 
#endif
# 164 "/usr/local/cuda-7.0//include/sm_32_intrinsics.hpp"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) 
# 165
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 169
::exit(___);}
#if 0
# 165
{ 
# 166
unsigned ret; 
# 167
__asm__ volatile("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 168
return ret; 
# 169
} 
#endif
# 105 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 106
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 107
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 114
::exit(___);}
#if 0
# 107
{ 
# 108
(s == 1) ? (void)((*((uchar1 *)res)) = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf1Dreads1(surf, x, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap)) : ((void)0))))); 
# 114
} 
#endif
# 116 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 117
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 118
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 124
::exit(___);}
#if 0
# 118
{ 
# 119
T tmp; 
# 121
surf1Dread(&tmp, surf, x, (int)sizeof(T), mode); 
# 123
return tmp; 
# 124
} 
#endif
# 126 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 127
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 128
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 130
::exit(___);}
#if 0
# 128
{ 
# 129
(*res) = surf1Dread< T> (surf, x, mode); 
# 130
} 
#endif
# 133 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 133
__attribute((always_inline)) __attribute__((unused)) inline char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 134
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 136
::exit(___);}
#if 0
# 134
{ 
# 135
return (char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 136
} 
#endif
# 139 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 139
__attribute((always_inline)) __attribute__((unused)) inline signed char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 140
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
return (signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 142
} 
#endif
# 145 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 145
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 146
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x; 
# 148
} 
#endif
# 151 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 151
__attribute((always_inline)) __attribute__((unused)) inline char1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 152
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 154
::exit(___);}
#if 0
# 152
{ 
# 153
return make_char1((signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x)); 
# 154
} 
#endif
# 157 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 157
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 158
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 160
::exit(___);}
#if 0
# 158
{ 
# 159
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap); 
# 160
} 
#endif
# 163 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 163
__attribute((always_inline)) __attribute__((unused)) inline char2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 164
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 168
::exit(___);}
#if 0
# 164
{ 
# 165
uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 167
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 168
} 
#endif
# 171 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 171
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 172
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 174
::exit(___);}
#if 0
# 172
{ 
# 173
return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 174
} 
#endif
# 177 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 177
__attribute((always_inline)) __attribute__((unused)) inline char4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 178
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 182
::exit(___);}
#if 0
# 178
{ 
# 179
uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 181
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 182
} 
#endif
# 185 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 185
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 188
::exit(___);}
#if 0
# 186
{ 
# 187
return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 188
} 
#endif
# 191 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 191
__attribute((always_inline)) __attribute__((unused)) inline short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 192
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 194
::exit(___);}
#if 0
# 192
{ 
# 193
return (short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x); 
# 194
} 
#endif
# 197 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 197
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 198
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 200
::exit(___);}
#if 0
# 198
{ 
# 199
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x; 
# 200
} 
#endif
# 203 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 203
__attribute((always_inline)) __attribute__((unused)) inline short1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 204
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 206
::exit(___);}
#if 0
# 204
{ 
# 205
return make_short1((signed short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x)); 
# 206
} 
#endif
# 209 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 209
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 210
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 212
::exit(___);}
#if 0
# 210
{ 
# 211
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap); 
# 212
} 
#endif
# 215 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 215
__attribute((always_inline)) __attribute__((unused)) inline short2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 216
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 220
::exit(___);}
#if 0
# 216
{ 
# 217
ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 219
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 220
} 
#endif
# 223 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 223
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 224
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 226
::exit(___);}
#if 0
# 224
{ 
# 225
return __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 226
} 
#endif
# 229 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 229
__attribute((always_inline)) __attribute__((unused)) inline short4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 230
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 234
::exit(___);}
#if 0
# 230
{ 
# 231
ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 233
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 234
} 
#endif
# 237 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 237
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 238
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 240
::exit(___);}
#if 0
# 238
{ 
# 239
return __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 240
} 
#endif
# 243 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 243
__attribute((always_inline)) __attribute__((unused)) inline int surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 244
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 246
::exit(___);}
#if 0
# 244
{ 
# 245
return (int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x); 
# 246
} 
#endif
# 249 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 249
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 250
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 252
::exit(___);}
#if 0
# 250
{ 
# 251
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x; 
# 252
} 
#endif
# 255 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 255
__attribute((always_inline)) __attribute__((unused)) inline int1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 256
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
return make_int1((signed int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 258
} 
#endif
# 261 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 261
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 262
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 264
::exit(___);}
#if 0
# 262
{ 
# 263
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap); 
# 264
} 
#endif
# 267 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 267
__attribute((always_inline)) __attribute__((unused)) inline int2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 268
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 269
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 271
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 272
} 
#endif
# 275 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 275
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 276
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 278
::exit(___);}
#if 0
# 276
{ 
# 277
return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 278
} 
#endif
# 281 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 281
__attribute((always_inline)) __attribute__((unused)) inline int4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 282
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 286
::exit(___);}
#if 0
# 282
{ 
# 283
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 285
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 286
} 
#endif
# 289 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 289
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 290
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 292
::exit(___);}
#if 0
# 290
{ 
# 291
return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 292
} 
#endif
# 295 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 295
__attribute((always_inline)) __attribute__((unused)) inline long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 296
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 298
::exit(___);}
#if 0
# 296
{ 
# 297
return (long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x); 
# 298
} 
#endif
# 301 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 301
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 302
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 304
::exit(___);}
#if 0
# 302
{ 
# 303
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x; 
# 304
} 
#endif
# 307 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 307
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 308
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 310
::exit(___);}
#if 0
# 308
{ 
# 309
return make_longlong1((long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x)); 
# 310
} 
#endif
# 313 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 313
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 314
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 316
::exit(___);}
#if 0
# 314
{ 
# 315
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap); 
# 316
} 
#endif
# 319 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 319
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 320
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 324
::exit(___);}
#if 0
# 320
{ 
# 321
ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 323
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 324
} 
#endif
# 327 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117
__attribute((always_inline)) 
# 327
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 328
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 330
::exit(___);}
#if 0
# 328
{ 
# 329
return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 330
} 
#endif
# 393 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 393 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 394
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 396
::exit(___);}
#if 0
# 394
{ 
# 395
return __int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 396
} 
#endif
# 399 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 399 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 400
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 402
::exit(___);}
#if 0
# 400
{ 
# 401
return make_float1(__int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x))); 
# 402
} 
#endif
# 405 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 405 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 406
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 410
::exit(___);}
#if 0
# 406
{ 
# 407
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 409
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 410
} 
#endif
# 413 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 117 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 413 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 414
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 418
::exit(___);}
#if 0
# 414
{ 
# 415
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 417
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 418
} 
#endif
# 453 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 454
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 455
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 462
::exit(___);}
#if 0
# 455
{ 
# 456
(s == 1) ? (void)((*((uchar1 *)res)) = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap)) : ((void)0))))); 
# 462
} 
#endif
# 464 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 465
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 466
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 472
::exit(___);}
#if 0
# 466
{ 
# 467
T tmp; 
# 469
surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode); 
# 471
return tmp; 
# 472
} 
#endif
# 474 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 475
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 476
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 478
::exit(___);}
#if 0
# 476
{ 
# 477
(*res) = surf2Dread< T> (surf, x, y, mode); 
# 478
} 
#endif
# 481 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 481
__attribute((always_inline)) __attribute__((unused)) inline char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 484
::exit(___);}
#if 0
# 482
{ 
# 483
return (char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 484
} 
#endif
# 487 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 487
__attribute((always_inline)) __attribute__((unused)) inline signed char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 488
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 490
::exit(___);}
#if 0
# 488
{ 
# 489
return (signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 490
} 
#endif
# 493 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 493
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 494
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 496
::exit(___);}
#if 0
# 494
{ 
# 495
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x; 
# 496
} 
#endif
# 499 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 499
__attribute((always_inline)) __attribute__((unused)) inline char1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 500
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 502
::exit(___);}
#if 0
# 500
{ 
# 501
return make_char1((signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 502
} 
#endif
# 505 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 505
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 506
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 508
::exit(___);}
#if 0
# 506
{ 
# 507
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap); 
# 508
} 
#endif
# 511 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 511
__attribute((always_inline)) __attribute__((unused)) inline char2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 512
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 516
::exit(___);}
#if 0
# 512
{ 
# 513
uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 515
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 516
} 
#endif
# 519 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 519
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 522
::exit(___);}
#if 0
# 520
{ 
# 521
return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 522
} 
#endif
# 525 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 525
__attribute((always_inline)) __attribute__((unused)) inline char4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 526
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 530
::exit(___);}
#if 0
# 526
{ 
# 527
uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 529
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 530
} 
#endif
# 533 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 533
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 534
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 536
::exit(___);}
#if 0
# 534
{ 
# 535
return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 536
} 
#endif
# 539 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 539
__attribute((always_inline)) __attribute__((unused)) inline short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 540
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 542
::exit(___);}
#if 0
# 540
{ 
# 541
return (short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x); 
# 542
} 
#endif
# 545 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 545
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 546
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 548
::exit(___);}
#if 0
# 546
{ 
# 547
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x; 
# 548
} 
#endif
# 551 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 551
__attribute((always_inline)) __attribute__((unused)) inline short1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 552
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 554
::exit(___);}
#if 0
# 552
{ 
# 553
return make_short1((signed short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 554
} 
#endif
# 557 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 557
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 560
::exit(___);}
#if 0
# 558
{ 
# 559
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap); 
# 560
} 
#endif
# 563 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 563
__attribute((always_inline)) __attribute__((unused)) inline short2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 564
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 567
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 568
} 
#endif
# 571 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 571
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 574
::exit(___);}
#if 0
# 572
{ 
# 573
return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 574
} 
#endif
# 577 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 577
__attribute((always_inline)) __attribute__((unused)) inline short4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 578
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 582
::exit(___);}
#if 0
# 578
{ 
# 579
ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 581
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 582
} 
#endif
# 585 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 585
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 586
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 588
::exit(___);}
#if 0
# 586
{ 
# 587
return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 588
} 
#endif
# 591 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 591
__attribute((always_inline)) __attribute__((unused)) inline int surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 592
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 594
::exit(___);}
#if 0
# 592
{ 
# 593
return (int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x); 
# 594
} 
#endif
# 597 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 597
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 598
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 600
::exit(___);}
#if 0
# 598
{ 
# 599
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x; 
# 600
} 
#endif
# 603 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 603
__attribute((always_inline)) __attribute__((unused)) inline int1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 604
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 606
::exit(___);}
#if 0
# 604
{ 
# 605
return make_int1((signed int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 606
} 
#endif
# 609 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 609
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 612
::exit(___);}
#if 0
# 610
{ 
# 611
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap); 
# 612
} 
#endif
# 615 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 615
__attribute((always_inline)) __attribute__((unused)) inline int2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 616
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 620
::exit(___);}
#if 0
# 616
{ 
# 617
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 619
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 620
} 
#endif
# 623 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 623
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 626
::exit(___);}
#if 0
# 624
{ 
# 625
return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 626
} 
#endif
# 629 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 629
__attribute((always_inline)) __attribute__((unused)) inline int4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 630
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 634
::exit(___);}
#if 0
# 630
{ 
# 631
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 633
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 634
} 
#endif
# 637 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 637
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 638
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 640
::exit(___);}
#if 0
# 638
{ 
# 639
return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 640
} 
#endif
# 643 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 643
__attribute((always_inline)) __attribute__((unused)) inline long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 644
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 646
::exit(___);}
#if 0
# 644
{ 
# 645
return (long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x); 
# 646
} 
#endif
# 649 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 649
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 650
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 652
::exit(___);}
#if 0
# 650
{ 
# 651
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x; 
# 652
} 
#endif
# 655 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 655
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 656
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 658
::exit(___);}
#if 0
# 656
{ 
# 657
return make_longlong1((long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 658
} 
#endif
# 661 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 661
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 664
::exit(___);}
#if 0
# 662
{ 
# 663
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap); 
# 664
} 
#endif
# 667 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 667
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 668
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 672
::exit(___);}
#if 0
# 668
{ 
# 669
ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 671
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 672
} 
#endif
# 675 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465
__attribute((always_inline)) 
# 675
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 676
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 678
::exit(___);}
#if 0
# 676
{ 
# 677
return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 678
} 
#endif
# 741 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 741 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 742
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 744
::exit(___);}
#if 0
# 742
{ 
# 743
return __int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 744
} 
#endif
# 747 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 747 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 748
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 750
::exit(___);}
#if 0
# 748
{ 
# 749
return make_float1(__int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x))); 
# 750
} 
#endif
# 753 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 753 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 754
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 758
::exit(___);}
#if 0
# 754
{ 
# 755
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 757
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 758
} 
#endif
# 761 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 465 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 761 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 762
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 766
::exit(___);}
#if 0
# 762
{ 
# 763
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 765
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 766
} 
#endif
# 801 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 802
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 803
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 810
::exit(___);}
#if 0
# 803
{ 
# 804
(s == 1) ? (void)((*((uchar1 *)res)) = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap)) : ((void)0))))); 
# 810
} 
#endif
# 812 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 813
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 814
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 820
::exit(___);}
#if 0
# 814
{ 
# 815
T tmp; 
# 817
surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode); 
# 819
return tmp; 
# 820
} 
#endif
# 822 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 823
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 824
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
(*res) = surf3Dread< T> (surf, x, y, z, mode); 
# 826
} 
#endif
# 829 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 829
__attribute((always_inline)) __attribute__((unused)) inline char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 830
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 832
::exit(___);}
#if 0
# 830
{ 
# 831
return (char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 832
} 
#endif
# 835 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 835
__attribute((always_inline)) __attribute__((unused)) inline signed char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 836
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 838
::exit(___);}
#if 0
# 836
{ 
# 837
return (signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 838
} 
#endif
# 841 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 841
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 842
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 844
::exit(___);}
#if 0
# 842
{ 
# 843
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 844
} 
#endif
# 847 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 847
__attribute((always_inline)) __attribute__((unused)) inline char1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 848
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 850
::exit(___);}
#if 0
# 848
{ 
# 849
return make_char1((signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 850
} 
#endif
# 853 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 853
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 854
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 856
::exit(___);}
#if 0
# 854
{ 
# 855
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap); 
# 856
} 
#endif
# 859 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 859
__attribute((always_inline)) __attribute__((unused)) inline char2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 860
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 864
::exit(___);}
#if 0
# 860
{ 
# 861
uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 863
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 864
} 
#endif
# 867 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 867
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 870
::exit(___);}
#if 0
# 868
{ 
# 869
return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 870
} 
#endif
# 873 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 873
__attribute((always_inline)) __attribute__((unused)) inline char4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 874
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 878
::exit(___);}
#if 0
# 874
{ 
# 875
uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 877
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 878
} 
#endif
# 881 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 881
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 882
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 884
::exit(___);}
#if 0
# 882
{ 
# 883
return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 884
} 
#endif
# 887 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 887
__attribute((always_inline)) __attribute__((unused)) inline short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 888
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 890
::exit(___);}
#if 0
# 888
{ 
# 889
return (short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 890
} 
#endif
# 893 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 893
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 894
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 896
::exit(___);}
#if 0
# 894
{ 
# 895
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 896
} 
#endif
# 899 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 899
__attribute((always_inline)) __attribute__((unused)) inline short1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 900
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 902
::exit(___);}
#if 0
# 900
{ 
# 901
return make_short1((signed short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 902
} 
#endif
# 905 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 905
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 908
::exit(___);}
#if 0
# 906
{ 
# 907
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap); 
# 908
} 
#endif
# 911 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 911
__attribute((always_inline)) __attribute__((unused)) inline short2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 912
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 916
::exit(___);}
#if 0
# 912
{ 
# 913
ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 915
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 916
} 
#endif
# 919 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 919
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 922
::exit(___);}
#if 0
# 920
{ 
# 921
return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 922
} 
#endif
# 925 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 925
__attribute((always_inline)) __attribute__((unused)) inline short4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 926
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 930
::exit(___);}
#if 0
# 926
{ 
# 927
ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 929
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 930
} 
#endif
# 933 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 933
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 936
::exit(___);}
#if 0
# 934
{ 
# 935
return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 936
} 
#endif
# 939 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 939
__attribute((always_inline)) __attribute__((unused)) inline int surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 940
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 942
::exit(___);}
#if 0
# 940
{ 
# 941
return (int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 942
} 
#endif
# 945 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 945
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 946
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 948
::exit(___);}
#if 0
# 946
{ 
# 947
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 948
} 
#endif
# 951 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 951
__attribute((always_inline)) __attribute__((unused)) inline int1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 952
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 954
::exit(___);}
#if 0
# 952
{ 
# 953
return make_int1((signed int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 954
} 
#endif
# 957 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 957
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 960
::exit(___);}
#if 0
# 958
{ 
# 959
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap); 
# 960
} 
#endif
# 963 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 963
__attribute((always_inline)) __attribute__((unused)) inline int2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 964
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 968
::exit(___);}
#if 0
# 964
{ 
# 965
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 967
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 968
} 
#endif
# 971 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 971
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 974
::exit(___);}
#if 0
# 972
{ 
# 973
return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 974
} 
#endif
# 977 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 977
__attribute((always_inline)) __attribute__((unused)) inline int4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 978
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 982
::exit(___);}
#if 0
# 978
{ 
# 979
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 981
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 982
} 
#endif
# 985 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 985
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 986
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 988
::exit(___);}
#if 0
# 986
{ 
# 987
return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 988
} 
#endif
# 991 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 991
__attribute((always_inline)) __attribute__((unused)) inline long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 992
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 994
::exit(___);}
#if 0
# 992
{ 
# 993
return (long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 994
} 
#endif
# 997 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 997
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 998
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1000
::exit(___);}
#if 0
# 998
{ 
# 999
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 1000
} 
#endif
# 1003 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 1003
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1004
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1006
::exit(___);}
#if 0
# 1004
{ 
# 1005
return make_longlong1((long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1006
} 
#endif
# 1009 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 1009
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1012
::exit(___);}
#if 0
# 1010
{ 
# 1011
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap); 
# 1012
} 
#endif
# 1015 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 1015
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1016
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1020
::exit(___);}
#if 0
# 1016
{ 
# 1017
ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1019
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1020
} 
#endif
# 1023 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813
__attribute((always_inline)) 
# 1023
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1024
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1026
::exit(___);}
#if 0
# 1024
{ 
# 1025
return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1026
} 
#endif
# 1089 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1089 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1090
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1092
::exit(___);}
#if 0
# 1090
{ 
# 1091
return __int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1092
} 
#endif
# 1095 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1095 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1096
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1098
::exit(___);}
#if 0
# 1096
{ 
# 1097
return make_float1(__int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x))); 
# 1098
} 
#endif
# 1101 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1101 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1102
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1106
::exit(___);}
#if 0
# 1102
{ 
# 1103
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1105
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1106
} 
#endif
# 1109 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 813 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1109 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1110
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1114
::exit(___);}
#if 0
# 1110
{ 
# 1111
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 1113
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1114
} 
#endif
# 1149 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1150
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1151
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 1158
::exit(___);}
#if 0
# 1151
{ 
# 1152
(s == 1) ? (void)((*((uchar1 *)res)) = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 1158
} 
#endif
# 1160 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1161
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1162
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1168
::exit(___);}
#if 0
# 1162
{ 
# 1163
T tmp; 
# 1165
surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode); 
# 1167
return tmp; 
# 1168
} 
#endif
# 1170 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1171
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1172
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 1174
::exit(___);}
#if 0
# 1172
{ 
# 1173
(*res) = surf1DLayeredread< T> (surf, x, layer, mode); 
# 1174
} 
#endif
# 1177 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1177
__attribute((always_inline)) __attribute__((unused)) inline char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1178
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1180
::exit(___);}
#if 0
# 1178
{ 
# 1179
return (char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1180
} 
#endif
# 1183 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1183
__attribute((always_inline)) __attribute__((unused)) inline signed char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1184
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1186
::exit(___);}
#if 0
# 1184
{ 
# 1185
return (signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1186
} 
#endif
# 1189 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1189
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1190
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1192
::exit(___);}
#if 0
# 1190
{ 
# 1191
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1192
} 
#endif
# 1195 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1195
__attribute((always_inline)) __attribute__((unused)) inline char1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1196
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1198
::exit(___);}
#if 0
# 1196
{ 
# 1197
return make_char1((signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1198
} 
#endif
# 1201 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1201
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1202
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1204
::exit(___);}
#if 0
# 1202
{ 
# 1203
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap); 
# 1204
} 
#endif
# 1207 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1207
__attribute((always_inline)) __attribute__((unused)) inline char2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1208
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1212
::exit(___);}
#if 0
# 1208
{ 
# 1209
uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1211
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1212
} 
#endif
# 1215 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1215
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1216
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1218
::exit(___);}
#if 0
# 1216
{ 
# 1217
return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1218
} 
#endif
# 1221 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1221
__attribute((always_inline)) __attribute__((unused)) inline char4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1222
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1226
::exit(___);}
#if 0
# 1222
{ 
# 1223
uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1225
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1226
} 
#endif
# 1229 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1229
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1230
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1232
::exit(___);}
#if 0
# 1230
{ 
# 1231
return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1232
} 
#endif
# 1235 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1235
__attribute((always_inline)) __attribute__((unused)) inline short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1236
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1238
::exit(___);}
#if 0
# 1236
{ 
# 1237
return (short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1238
} 
#endif
# 1241 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1241
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1242
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1244
::exit(___);}
#if 0
# 1242
{ 
# 1243
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1244
} 
#endif
# 1247 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1247
__attribute((always_inline)) __attribute__((unused)) inline short1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1248
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1250
::exit(___);}
#if 0
# 1248
{ 
# 1249
return make_short1((signed short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1250
} 
#endif
# 1253 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1253
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1254
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1256
::exit(___);}
#if 0
# 1254
{ 
# 1255
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap); 
# 1256
} 
#endif
# 1259 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1259
__attribute((always_inline)) __attribute__((unused)) inline short2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1260
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1264
::exit(___);}
#if 0
# 1260
{ 
# 1261
ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1263
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1264
} 
#endif
# 1267 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1267
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1268
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1270
::exit(___);}
#if 0
# 1268
{ 
# 1269
return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1270
} 
#endif
# 1273 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1273
__attribute((always_inline)) __attribute__((unused)) inline short4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1274
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1278
::exit(___);}
#if 0
# 1274
{ 
# 1275
ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1277
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1278
} 
#endif
# 1281 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1281
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1282
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1284
::exit(___);}
#if 0
# 1282
{ 
# 1283
return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1284
} 
#endif
# 1287 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1287
__attribute((always_inline)) __attribute__((unused)) inline int surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1288
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1290
::exit(___);}
#if 0
# 1288
{ 
# 1289
return (int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1290
} 
#endif
# 1293 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1293
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1294
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1296
::exit(___);}
#if 0
# 1294
{ 
# 1295
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1296
} 
#endif
# 1299 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1299
__attribute((always_inline)) __attribute__((unused)) inline int1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1300
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1302
::exit(___);}
#if 0
# 1300
{ 
# 1301
return make_int1((signed int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1302
} 
#endif
# 1305 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1305
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1306
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1308
::exit(___);}
#if 0
# 1306
{ 
# 1307
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap); 
# 1308
} 
#endif
# 1311 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1311
__attribute((always_inline)) __attribute__((unused)) inline int2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1312
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1316
::exit(___);}
#if 0
# 1312
{ 
# 1313
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1315
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1316
} 
#endif
# 1319 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1319
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1320
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1322
::exit(___);}
#if 0
# 1320
{ 
# 1321
return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1322
} 
#endif
# 1325 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1325
__attribute((always_inline)) __attribute__((unused)) inline int4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1326
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1330
::exit(___);}
#if 0
# 1326
{ 
# 1327
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1329
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1330
} 
#endif
# 1333 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1333
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1334
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1336
::exit(___);}
#if 0
# 1334
{ 
# 1335
return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1336
} 
#endif
# 1339 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1339
__attribute((always_inline)) __attribute__((unused)) inline long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1340
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1342
::exit(___);}
#if 0
# 1340
{ 
# 1341
return (long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1342
} 
#endif
# 1345 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1345
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1346
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1348
::exit(___);}
#if 0
# 1346
{ 
# 1347
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1348
} 
#endif
# 1351 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1351
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1352
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1354
::exit(___);}
#if 0
# 1352
{ 
# 1353
return make_longlong1((long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1354
} 
#endif
# 1357 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1357
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1358
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1360
::exit(___);}
#if 0
# 1358
{ 
# 1359
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap); 
# 1360
} 
#endif
# 1363 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1363
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1364
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1368
::exit(___);}
#if 0
# 1364
{ 
# 1365
ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1367
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1368
} 
#endif
# 1371 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161
__attribute((always_inline)) 
# 1371
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1372
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1374
::exit(___);}
#if 0
# 1372
{ 
# 1373
return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1374
} 
#endif
# 1437 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1437 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1438
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1440
::exit(___);}
#if 0
# 1438
{ 
# 1439
return __int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1440
} 
#endif
# 1443 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1443 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1444
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1446
::exit(___);}
#if 0
# 1444
{ 
# 1445
return make_float1(__int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x))); 
# 1446
} 
#endif
# 1449 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1449 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1450
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1454
::exit(___);}
#if 0
# 1450
{ 
# 1451
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1453
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1454
} 
#endif
# 1457 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1161 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1457 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1458
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1462
::exit(___);}
#if 0
# 1458
{ 
# 1459
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1461
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1462
} 
#endif
# 1508 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1509
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1510
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 1517
::exit(___);}
#if 0
# 1510
{ 
# 1511
(s == 1) ? (void)((*((uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 1517
} 
#endif
# 1519 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1520
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1521
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1527
::exit(___);}
#if 0
# 1521
{ 
# 1522
T tmp; 
# 1524
surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode); 
# 1526
return tmp; 
# 1527
} 
#endif
# 1529 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1530
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1531
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1533
::exit(___);}
#if 0
# 1531
{ 
# 1532
(*res) = surf2DLayeredread< T> (surf, x, y, layer, mode); 
# 1533
} 
#endif
# 1536 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1536
__attribute((always_inline)) __attribute__((unused)) inline char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1537
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1539
::exit(___);}
#if 0
# 1537
{ 
# 1538
return (char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1539
} 
#endif
# 1542 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1542
__attribute((always_inline)) __attribute__((unused)) inline signed char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1543
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1545
::exit(___);}
#if 0
# 1543
{ 
# 1544
return (signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1545
} 
#endif
# 1548 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1548
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1549
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1551
::exit(___);}
#if 0
# 1549
{ 
# 1550
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1551
} 
#endif
# 1554 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1554
__attribute((always_inline)) __attribute__((unused)) inline char1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1555
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1557
::exit(___);}
#if 0
# 1555
{ 
# 1556
return make_char1((signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1557
} 
#endif
# 1560 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1560
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1561
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1563
::exit(___);}
#if 0
# 1561
{ 
# 1562
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1563
} 
#endif
# 1566 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1566
__attribute((always_inline)) __attribute__((unused)) inline char2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1567
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1571
::exit(___);}
#if 0
# 1567
{ 
# 1568
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1570
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1571
} 
#endif
# 1574 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1574
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1575
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1577
::exit(___);}
#if 0
# 1575
{ 
# 1576
return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1577
} 
#endif
# 1580 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1580
__attribute((always_inline)) __attribute__((unused)) inline char4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1581
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1585
::exit(___);}
#if 0
# 1581
{ 
# 1582
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1584
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1585
} 
#endif
# 1588 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1588
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1589
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1591
::exit(___);}
#if 0
# 1589
{ 
# 1590
return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1591
} 
#endif
# 1594 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1594
__attribute((always_inline)) __attribute__((unused)) inline short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1595
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1597
::exit(___);}
#if 0
# 1595
{ 
# 1596
return (short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1597
} 
#endif
# 1600 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1600
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1601
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1603
::exit(___);}
#if 0
# 1601
{ 
# 1602
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1603
} 
#endif
# 1606 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1606
__attribute((always_inline)) __attribute__((unused)) inline short1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1607
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1609
::exit(___);}
#if 0
# 1607
{ 
# 1608
return make_short1((signed short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1609
} 
#endif
# 1612 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1612
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1613
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1615
::exit(___);}
#if 0
# 1613
{ 
# 1614
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1615
} 
#endif
# 1618 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1618
__attribute((always_inline)) __attribute__((unused)) inline short2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1619
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1623
::exit(___);}
#if 0
# 1619
{ 
# 1620
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1622
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1623
} 
#endif
# 1626 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1626
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1627
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1629
::exit(___);}
#if 0
# 1627
{ 
# 1628
return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1629
} 
#endif
# 1632 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1632
__attribute((always_inline)) __attribute__((unused)) inline short4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1633
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1637
::exit(___);}
#if 0
# 1633
{ 
# 1634
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1636
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1637
} 
#endif
# 1640 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1640
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1641
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1643
::exit(___);}
#if 0
# 1641
{ 
# 1642
return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1643
} 
#endif
# 1646 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1646
__attribute((always_inline)) __attribute__((unused)) inline int surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1647
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1649
::exit(___);}
#if 0
# 1647
{ 
# 1648
return (int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1649
} 
#endif
# 1652 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1652
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1653
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1655
::exit(___);}
#if 0
# 1653
{ 
# 1654
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1655
} 
#endif
# 1658 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1658
__attribute((always_inline)) __attribute__((unused)) inline int1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1659
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1661
::exit(___);}
#if 0
# 1659
{ 
# 1660
return make_int1((signed int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1661
} 
#endif
# 1664 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1664
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1665
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1667
::exit(___);}
#if 0
# 1665
{ 
# 1666
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1667
} 
#endif
# 1670 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1670
__attribute((always_inline)) __attribute__((unused)) inline int2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1671
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1675
::exit(___);}
#if 0
# 1671
{ 
# 1672
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1674
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1675
} 
#endif
# 1678 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1678
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1679
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1681
::exit(___);}
#if 0
# 1679
{ 
# 1680
return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1681
} 
#endif
# 1684 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1684
__attribute((always_inline)) __attribute__((unused)) inline int4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1685
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1689
::exit(___);}
#if 0
# 1685
{ 
# 1686
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1688
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1689
} 
#endif
# 1692 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1692
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1693
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1695
::exit(___);}
#if 0
# 1693
{ 
# 1694
return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1695
} 
#endif
# 1698 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1698
__attribute((always_inline)) __attribute__((unused)) inline long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1699
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1701
::exit(___);}
#if 0
# 1699
{ 
# 1700
return (long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1701
} 
#endif
# 1704 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1704
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1705
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1707
::exit(___);}
#if 0
# 1705
{ 
# 1706
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1707
} 
#endif
# 1710 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1710
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1711
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1713
::exit(___);}
#if 0
# 1711
{ 
# 1712
return make_longlong1((long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1713
} 
#endif
# 1716 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1716
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1717
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1719
::exit(___);}
#if 0
# 1717
{ 
# 1718
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1719
} 
#endif
# 1722 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1722
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1723
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1727
::exit(___);}
#if 0
# 1723
{ 
# 1724
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1726
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1727
} 
#endif
# 1730 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520
__attribute((always_inline)) 
# 1730
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1731
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1733
::exit(___);}
#if 0
# 1731
{ 
# 1732
return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1733
} 
#endif
# 1796 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1796 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1797
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1799
::exit(___);}
#if 0
# 1797
{ 
# 1798
return __int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1799
} 
#endif
# 1802 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1802 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1803
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1805
::exit(___);}
#if 0
# 1803
{ 
# 1804
return make_float1(__int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x))); 
# 1805
} 
#endif
# 1808 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1808 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1809
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1813
::exit(___);}
#if 0
# 1809
{ 
# 1810
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1812
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1813
} 
#endif
# 1816 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1520 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 1816 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1817
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1821
::exit(___);}
#if 0
# 1817
{ 
# 1818
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1820
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1821
} 
#endif
# 1844 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1845
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1846
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 1853
::exit(___);}
#if 0
# 1846
{ 
# 1847
(s == 1) ? (void)((*((uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap)) : ((void)0))))); 
# 1853
} 
#endif
# 1855 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1856
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1857
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1863
::exit(___);}
#if 0
# 1857
{ 
# 1858
T tmp; 
# 1860
surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode); 
# 1862
return tmp; 
# 1863
} 
#endif
# 1865 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 1866
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1867
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1869
::exit(___);}
#if 0
# 1867
{ 
# 1868
(*res) = surfCubemapread< T> (surf, x, y, face, mode); 
# 1869
} 
#endif
# 1872 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1872
__attribute((always_inline)) __attribute__((unused)) inline char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1873
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1875
::exit(___);}
#if 0
# 1873
{ 
# 1874
return (char)(__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1875
} 
#endif
# 1878 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1878
__attribute((always_inline)) __attribute__((unused)) inline signed char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1879
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1881
::exit(___);}
#if 0
# 1879
{ 
# 1880
return (signed char)(__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1881
} 
#endif
# 1884 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1884
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1885
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1887
::exit(___);}
#if 0
# 1885
{ 
# 1886
return __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1887
} 
#endif
# 1890 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1890
__attribute((always_inline)) __attribute__((unused)) inline char1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1891
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1893
::exit(___);}
#if 0
# 1891
{ 
# 1892
return make_char1((signed char)(__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1893
} 
#endif
# 1896 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1896
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1897
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1899
::exit(___);}
#if 0
# 1897
{ 
# 1898
return __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1899
} 
#endif
# 1902 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1902
__attribute((always_inline)) __attribute__((unused)) inline char2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1903
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1907
::exit(___);}
#if 0
# 1903
{ 
# 1904
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1906
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1907
} 
#endif
# 1910 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1910
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1911
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1913
::exit(___);}
#if 0
# 1911
{ 
# 1912
return __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1913
} 
#endif
# 1916 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1916
__attribute((always_inline)) __attribute__((unused)) inline char4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1917
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1921
::exit(___);}
#if 0
# 1917
{ 
# 1918
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1920
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1921
} 
#endif
# 1924 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1924
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1925
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1927
::exit(___);}
#if 0
# 1925
{ 
# 1926
return __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1927
} 
#endif
# 1930 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1930
__attribute((always_inline)) __attribute__((unused)) inline short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1931
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1933
::exit(___);}
#if 0
# 1931
{ 
# 1932
return (short)(__surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1933
} 
#endif
# 1936 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1936
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1937
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1939
::exit(___);}
#if 0
# 1937
{ 
# 1938
return __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1939
} 
#endif
# 1942 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1942
__attribute((always_inline)) __attribute__((unused)) inline short1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1943
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1945
::exit(___);}
#if 0
# 1943
{ 
# 1944
return make_short1((signed short)(__surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1945
} 
#endif
# 1948 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1948
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1949
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1951
::exit(___);}
#if 0
# 1949
{ 
# 1950
return __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1951
} 
#endif
# 1954 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1954
__attribute((always_inline)) __attribute__((unused)) inline short2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1955
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1959
::exit(___);}
#if 0
# 1955
{ 
# 1956
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1958
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1959
} 
#endif
# 1962 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1962
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1963
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1965
::exit(___);}
#if 0
# 1963
{ 
# 1964
return __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1965
} 
#endif
# 1968 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1968
__attribute((always_inline)) __attribute__((unused)) inline short4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1969
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1973
::exit(___);}
#if 0
# 1969
{ 
# 1970
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1972
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1973
} 
#endif
# 1976 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1976
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1977
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1979
::exit(___);}
#if 0
# 1977
{ 
# 1978
return __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1979
} 
#endif
# 1982 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1982
__attribute((always_inline)) __attribute__((unused)) inline int surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1983
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1985
::exit(___);}
#if 0
# 1983
{ 
# 1984
return (int)(__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1985
} 
#endif
# 1988 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1988
__attribute((always_inline)) __attribute__((unused)) inline unsigned surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1989
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1991
::exit(___);}
#if 0
# 1989
{ 
# 1990
return __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1991
} 
#endif
# 1994 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 1994
__attribute((always_inline)) __attribute__((unused)) inline int1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1995
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1997
::exit(___);}
#if 0
# 1995
{ 
# 1996
return make_int1((signed int)(__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1997
} 
#endif
# 2000 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2000
__attribute((always_inline)) __attribute__((unused)) inline uint1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2001
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2003
::exit(___);}
#if 0
# 2001
{ 
# 2002
return __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap); 
# 2003
} 
#endif
# 2006 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2006
__attribute((always_inline)) __attribute__((unused)) inline int2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2007
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2011
::exit(___);}
#if 0
# 2007
{ 
# 2008
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2010
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2011
} 
#endif
# 2014 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2014
__attribute((always_inline)) __attribute__((unused)) inline uint2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2015
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2017
::exit(___);}
#if 0
# 2015
{ 
# 2016
return __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2017
} 
#endif
# 2020 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2020
__attribute((always_inline)) __attribute__((unused)) inline int4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2021
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2025
::exit(___);}
#if 0
# 2021
{ 
# 2022
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2024
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2025
} 
#endif
# 2028 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2028
__attribute((always_inline)) __attribute__((unused)) inline uint4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2029
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2031
::exit(___);}
#if 0
# 2029
{ 
# 2030
return __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2031
} 
#endif
# 2034 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2034
__attribute((always_inline)) __attribute__((unused)) inline long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2035
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2037
::exit(___);}
#if 0
# 2035
{ 
# 2036
return (long long)(__surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 2037
} 
#endif
# 2040 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2040
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2041
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2043
::exit(___);}
#if 0
# 2041
{ 
# 2042
return __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 2043
} 
#endif
# 2046 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2046
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2047
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2049
::exit(___);}
#if 0
# 2047
{ 
# 2048
return make_longlong1((long long)(__surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2049
} 
#endif
# 2052 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2052
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2053
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2055
::exit(___);}
#if 0
# 2053
{ 
# 2054
return __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap); 
# 2055
} 
#endif
# 2058 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2058
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2059
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2063
::exit(___);}
#if 0
# 2059
{ 
# 2060
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2062
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2063
} 
#endif
# 2066 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856
__attribute((always_inline)) 
# 2066
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2067
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2069
::exit(___);}
#if 0
# 2067
{ 
# 2068
return __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2069
} 
#endif
# 2132 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2132 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2133
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2135
::exit(___);}
#if 0
# 2133
{ 
# 2134
return __int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2135
} 
#endif
# 2138 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2138 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2139
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2141
::exit(___);}
#if 0
# 2139
{ 
# 2140
return make_float1(__int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap).x))); 
# 2141
} 
#endif
# 2144 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2144 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2145
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2149
::exit(___);}
#if 0
# 2145
{ 
# 2146
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2148
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2149
} 
#endif
# 2152 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 1856 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2152 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2153
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2157
::exit(___);}
#if 0
# 2153
{ 
# 2154
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2156
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2157
} 
#endif
# 2181 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2182
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2183
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 2190
::exit(___);}
#if 0
# 2183
{ 
# 2184
(s == 1) ? (void)((*((uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((void)0))))); 
# 2190
} 
#endif
# 2192 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2193
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2194
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2200
::exit(___);}
#if 0
# 2194
{ 
# 2195
T tmp; 
# 2197
surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 2199
return tmp; 
# 2200
} 
#endif
# 2202 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2203
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2204
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2206
::exit(___);}
#if 0
# 2204
{ 
# 2205
(*res) = surfCubemapLayeredread< T> (surf, x, y, layerFace, mode); 
# 2206
} 
#endif
# 2209 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2209
__attribute((always_inline)) __attribute__((unused)) inline char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2210
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2212
::exit(___);}
#if 0
# 2210
{ 
# 2211
return (char)(__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2212
} 
#endif
# 2215 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2215
__attribute((always_inline)) __attribute__((unused)) inline signed char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2216
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2218
::exit(___);}
#if 0
# 2216
{ 
# 2217
return (signed char)(__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2218
} 
#endif
# 2221 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2221
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2222
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2224
::exit(___);}
#if 0
# 2222
{ 
# 2223
return __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2224
} 
#endif
# 2227 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2227
__attribute((always_inline)) __attribute__((unused)) inline char1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2228
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2230
::exit(___);}
#if 0
# 2228
{ 
# 2229
return make_char1((signed char)(__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2230
} 
#endif
# 2233 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2233
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2234
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2236
::exit(___);}
#if 0
# 2234
{ 
# 2235
return __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2236
} 
#endif
# 2239 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2239
__attribute((always_inline)) __attribute__((unused)) inline char2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2240
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2244
::exit(___);}
#if 0
# 2240
{ 
# 2241
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2243
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 2244
} 
#endif
# 2247 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2247
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2248
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2250
::exit(___);}
#if 0
# 2248
{ 
# 2249
return __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2250
} 
#endif
# 2253 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2253
__attribute((always_inline)) __attribute__((unused)) inline char4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2254
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2258
::exit(___);}
#if 0
# 2254
{ 
# 2255
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2257
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 2258
} 
#endif
# 2261 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2261
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2262
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2264
::exit(___);}
#if 0
# 2262
{ 
# 2263
return __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2264
} 
#endif
# 2267 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2267
__attribute((always_inline)) __attribute__((unused)) inline short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2268
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2270
::exit(___);}
#if 0
# 2268
{ 
# 2269
return (short)(__surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2270
} 
#endif
# 2273 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2273
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2274
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2276
::exit(___);}
#if 0
# 2274
{ 
# 2275
return __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2276
} 
#endif
# 2279 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2279
__attribute((always_inline)) __attribute__((unused)) inline short1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2280
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2282
::exit(___);}
#if 0
# 2280
{ 
# 2281
return make_short1((signed short)(__surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2282
} 
#endif
# 2285 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2285
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2286
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2288
::exit(___);}
#if 0
# 2286
{ 
# 2287
return __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2288
} 
#endif
# 2291 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2291
__attribute((always_inline)) __attribute__((unused)) inline short2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2292
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2296
::exit(___);}
#if 0
# 2292
{ 
# 2293
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2295
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 2296
} 
#endif
# 2299 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2299
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2300
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2302
::exit(___);}
#if 0
# 2300
{ 
# 2301
return __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2302
} 
#endif
# 2305 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2305
__attribute((always_inline)) __attribute__((unused)) inline short4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2306
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2310
::exit(___);}
#if 0
# 2306
{ 
# 2307
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2309
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 2310
} 
#endif
# 2313 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2313
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2314
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2316
::exit(___);}
#if 0
# 2314
{ 
# 2315
return __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2316
} 
#endif
# 2319 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2319
__attribute((always_inline)) __attribute__((unused)) inline int surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2320
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2322
::exit(___);}
#if 0
# 2320
{ 
# 2321
return (int)(__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2322
} 
#endif
# 2325 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2325
__attribute((always_inline)) __attribute__((unused)) inline unsigned surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2326
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2328
::exit(___);}
#if 0
# 2326
{ 
# 2327
return __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2328
} 
#endif
# 2331 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2331
__attribute((always_inline)) __attribute__((unused)) inline int1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2332
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2334
::exit(___);}
#if 0
# 2332
{ 
# 2333
return make_int1((signed int)(__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2334
} 
#endif
# 2337 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2337
__attribute((always_inline)) __attribute__((unused)) inline uint1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2338
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2340
::exit(___);}
#if 0
# 2338
{ 
# 2339
return __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2340
} 
#endif
# 2343 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2343
__attribute((always_inline)) __attribute__((unused)) inline int2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2344
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2348
::exit(___);}
#if 0
# 2344
{ 
# 2345
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2347
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2348
} 
#endif
# 2351 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2351
__attribute((always_inline)) __attribute__((unused)) inline uint2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2352
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2354
::exit(___);}
#if 0
# 2352
{ 
# 2353
return __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2354
} 
#endif
# 2357 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2357
__attribute((always_inline)) __attribute__((unused)) inline int4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2358
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2362
::exit(___);}
#if 0
# 2358
{ 
# 2359
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2361
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2362
} 
#endif
# 2365 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2365
__attribute((always_inline)) __attribute__((unused)) inline uint4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2366
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2368
::exit(___);}
#if 0
# 2366
{ 
# 2367
return __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2368
} 
#endif
# 2371 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2371
__attribute((always_inline)) __attribute__((unused)) inline long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2372
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2374
::exit(___);}
#if 0
# 2372
{ 
# 2373
return (long long)(__surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2374
} 
#endif
# 2377 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2377
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2378
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2380
::exit(___);}
#if 0
# 2378
{ 
# 2379
return __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2380
} 
#endif
# 2383 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2383
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2384
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2386
::exit(___);}
#if 0
# 2384
{ 
# 2385
return make_longlong1((long long)(__surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2386
} 
#endif
# 2389 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2389
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2390
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2392
::exit(___);}
#if 0
# 2390
{ 
# 2391
return __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2392
} 
#endif
# 2395 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2395
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2396
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2400
::exit(___);}
#if 0
# 2396
{ 
# 2397
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2399
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2400
} 
#endif
# 2403 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193
__attribute((always_inline)) 
# 2403
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2404
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2406
::exit(___);}
#if 0
# 2404
{ 
# 2405
return __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2406
} 
#endif
# 2469 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2469 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2470
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2472
::exit(___);}
#if 0
# 2470
{ 
# 2471
return __int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2472
} 
#endif
# 2475 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2475 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2476
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2478
::exit(___);}
#if 0
# 2476
{ 
# 2477
return make_float1(__int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x))); 
# 2478
} 
#endif
# 2481 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2481 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2486
::exit(___);}
#if 0
# 2482
{ 
# 2483
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2485
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2486
} 
#endif
# 2489 "/usr/local/cuda-7.0//include/surface_functions.h"
template<> 
# 2193 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) 
# 2489 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2490
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2494
::exit(___);}
#if 0
# 2490
{ 
# 2491
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2493
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2494
} 
#endif
# 2530 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2531
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2532
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 2550
::exit(___);}
#if 0
# 2532
{ 
# 2533
union { 
# 2534
T val; 
# 2535
uchar1 c1; 
# 2536
ushort1 s1; 
# 2537
uint1 u1; 
# 2538
uint2 u2; 
# 2539
uint4 u4; 
# 2540
} tmp; 
# 2542
(tmp.val) = val; 
# 2544
(s == 1) ? (void)__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap) : ((void)0))))); 
# 2550
} 
#endif
# 2552 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2553
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2554
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2556
::exit(___);}
#if 0
# 2554
{ ; 
# 2555
surf1Dwrite(val, surf, x, (int)sizeof(T), mode); 
# 2556
} 
#endif
# 2559 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2561
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2563
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2565
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2567
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2569
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2571
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2573
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2575
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2577
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2579
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2581
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2583
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2585
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2587
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2589
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2591
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2593
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2595
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2597
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2599
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2601
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2603
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2605
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2607
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2609
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2611
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2613
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2615
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2617
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2619
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2641 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2643
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2645
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2647
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2683 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2684
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2685
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 2703
::exit(___);}
#if 0
# 2685
{ 
# 2686
union { 
# 2687
T val; 
# 2688
uchar1 c1; 
# 2689
ushort1 s1; 
# 2690
uint1 u1; 
# 2691
uint2 u2; 
# 2692
uint4 u4; 
# 2693
} tmp; 
# 2695
(tmp.val) = val; 
# 2697
(s == 1) ? (void)__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap) : ((void)0))))); 
# 2703
} 
#endif
# 2705 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2706
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2707
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2709
::exit(___);}
#if 0
# 2707
{ ; 
# 2708
surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode); 
# 2709
} 
#endif
# 2712 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2714
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2716
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2718
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2720
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2722
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2724
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2726
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2728
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2730
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2732
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2734
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2736
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2738
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2740
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2742
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2744
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2746
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2748
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2750
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2752
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2754
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2756
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2758
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2760
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2762
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2764
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2766
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2768
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2770
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2772
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2794 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2796
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2798
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2800
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2836 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2837
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2838
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 2856
::exit(___);}
#if 0
# 2838
{ 
# 2839
union { 
# 2840
T val; 
# 2841
uchar1 c1; 
# 2842
ushort1 s1; 
# 2843
uint1 u1; 
# 2844
uint2 u2; 
# 2845
uint4 u4; 
# 2846
} tmp; 
# 2848
(tmp.val) = val; 
# 2850
(s == 1) ? (void)__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap) : ((void)0))))); 
# 2856
} 
#endif
# 2858 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2859
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2860
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 2862
::exit(___);}
#if 0
# 2860
{ ; 
# 2861
surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode); 
# 2862
} 
#endif
# 2865 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2867
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2869
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2871
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2873
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2875
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2877
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2879
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2881
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2883
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2885
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2887
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2889
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2891
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2893
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2895
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2897
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2899
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2901
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2903
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2905
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2907
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2909
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2911
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2913
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2915
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2917
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2919
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2921
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2923
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2925
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2947 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2949
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2951
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2953
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 2989 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 2990
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2991
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 3009
::exit(___);}
#if 0
# 2991
{ 
# 2992
union { 
# 2993
T val; 
# 2994
uchar1 c1; 
# 2995
ushort1 s1; 
# 2996
uint1 u1; 
# 2997
uint2 u2; 
# 2998
uint4 u4; 
# 2999
} tmp; 
# 3001
(tmp.val) = val; 
# 3003
(s == 1) ? (void)__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap) : ((void)0))))); 
# 3009
} 
#endif
# 3011 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3012
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3013
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3015
::exit(___);}
#if 0
# 3013
{ ; 
# 3014
surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode); 
# 3015
} 
#endif
# 3018 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3020
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3022
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3024
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3026
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3028
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3030
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3032
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3034
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3036
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3038
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3040
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3042
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3044
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3046
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3048
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3050
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3052
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3054
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3056
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3058
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3060
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3062
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3064
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3066
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3068
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3070
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3072
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3074
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3076
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3078
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3100 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3102
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3104
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3106
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3153 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3154
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3155
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 3173
::exit(___);}
#if 0
# 3155
{ 
# 3156
union { 
# 3157
T val; 
# 3158
uchar1 c1; 
# 3159
ushort1 s1; 
# 3160
uint1 u1; 
# 3161
uint2 u2; 
# 3162
uint4 u4; 
# 3163
} tmp; 
# 3165
(tmp.val) = val; 
# 3167
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap) : ((void)0))))); 
# 3173
} 
#endif
# 3175 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3176
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3177
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3179
::exit(___);}
#if 0
# 3177
{ ; 
# 3178
surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode); 
# 3179
} 
#endif
# 3182 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3184
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3186
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3188
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3190
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3192
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3194
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3196
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3198
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3200
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3202
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3204
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3206
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3208
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3210
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3212
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3214
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3216
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3218
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3220
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3222
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3224
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3226
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3228
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3230
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3232
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3234
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3236
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3238
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3240
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3242
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3264 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3266
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3268
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3270
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3295 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3296
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3297
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 3315
::exit(___);}
#if 0
# 3297
{ 
# 3298
union { 
# 3299
T val; 
# 3300
uchar1 c1; 
# 3301
ushort1 s1; 
# 3302
uint1 u1; 
# 3303
uint2 u2; 
# 3304
uint4 u4; 
# 3305
} tmp; 
# 3307
(tmp.val) = val; 
# 3309
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap) : ((void)0))))); 
# 3315
} 
#endif
# 3317 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3318
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3319
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3321
::exit(___);}
#if 0
# 3319
{ 
# 3320
surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode); 
# 3321
} 
#endif
# 3324 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3326
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3328
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3330
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3332
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3334
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3336
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3338
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3340
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3342
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3344
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3346
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3348
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3350
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3352
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3354
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3356
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3358
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3360
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3362
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3364
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3366
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3368
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3370
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3372
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3374
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3376
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3378
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3380
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3382
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3384
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3406 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3408
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3410
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3412
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3437 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3438
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3439
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 3457
::exit(___);}
#if 0
# 3439
{ 
# 3440
union { 
# 3441
T val; 
# 3442
uchar1 c1; 
# 3443
ushort1 s1; 
# 3444
uint1 u1; 
# 3445
uint2 u2; 
# 3446
uint4 u4; 
# 3447
} tmp; 
# 3449
(tmp.val) = val; 
# 3451
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((void)0))))); 
# 3457
} 
#endif
# 3459 "/usr/local/cuda-7.0//include/surface_functions.h"
template< class T> 
# 3460
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3461
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 3463
::exit(___);}
#if 0
# 3461
{ ; 
# 3462
surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 3463
} 
#endif
# 3466 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3468
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3470
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3472
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3474
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3476
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3478
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3480
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3482
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3484
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3486
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3488
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3490
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3492
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3494
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3496
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3498
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3500
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3502
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3504
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3506
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3508
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3510
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3512
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3514
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3516
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3518
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3520
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3522
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3524
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3526
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3548 "/usr/local/cuda-7.0//include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3550
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3552
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 3554
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
# 94 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 95
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 97
::exit(___);}
#if 0
# 95
{ 
# 96
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 97
} 
#endif
# 99 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 100
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 102
} 
#endif
# 104 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 105
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 107
::exit(___);}
#if 0
# 105
{ 
# 106
__surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap); 
# 107
} 
#endif
# 109 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 110
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
__surf1Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 112
} 
#endif
# 114 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 115
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 117
::exit(___);}
#if 0
# 115
{ 
# 116
__surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap); 
# 117
} 
#endif
# 119 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 120
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 122
::exit(___);}
#if 0
# 120
{ 
# 121
__surf1Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 122
} 
#endif
# 124 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 125
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 127
::exit(___);}
#if 0
# 125
{ 
# 126
__surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap); 
# 127
} 
#endif
# 129 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 130
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 132
::exit(___);}
#if 0
# 130
{ 
# 131
__surf1Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 132
} 
#endif
# 134 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 135
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 137
::exit(___);}
#if 0
# 135
{ 
# 136
__surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap); 
# 137
} 
#endif
# 139 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 140
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap); 
# 142
} 
#endif
# 144 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 145
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 147
::exit(___);}
#if 0
# 145
{ 
# 146
__surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap); 
# 147
} 
#endif
# 149 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 150
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
__surf1Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 152
} 
#endif
# 154 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 155
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
__surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap); 
# 157
} 
#endif
# 159 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 160
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
__surf1Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 162
} 
#endif
# 164 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 165
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 167
::exit(___);}
#if 0
# 165
{ 
# 166
__surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap); 
# 167
} 
#endif
# 169 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 170
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 172
::exit(___);}
#if 0
# 170
{ 
# 171
__surf1Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 172
} 
#endif
# 174 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 175
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
__surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap); 
# 177
} 
#endif
# 179 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 180
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 182
::exit(___);}
#if 0
# 180
{ 
# 181
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
# 182
} 
#endif
# 184 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 185
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
__surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap); 
# 187
} 
#endif
# 189 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 190
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 192
::exit(___);}
#if 0
# 190
{ 
# 191
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 192
} 
#endif
# 194 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 195
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 197
::exit(___);}
#if 0
# 195
{ 
# 196
__surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap); 
# 197
} 
#endif
# 199 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 200
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 202
::exit(___);}
#if 0
# 200
{ 
# 201
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 202
} 
#endif
# 204 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 205
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 207
::exit(___);}
#if 0
# 205
{ 
# 206
__surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap); 
# 207
} 
#endif
# 209 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 210
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 212
::exit(___);}
#if 0
# 210
{ 
# 211
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 212
} 
#endif
# 214 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 215
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 217
::exit(___);}
#if 0
# 215
{ 
# 216
__surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap); 
# 217
} 
#endif
# 219 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 220
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 222
::exit(___);}
#if 0
# 220
{ 
# 221
__surf1Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, cudaBoundaryModeTrap); 
# 222
} 
#endif
# 224 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 225
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 227
::exit(___);}
#if 0
# 225
{ 
# 226
__surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap); 
# 227
} 
#endif
# 229 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 230
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 230
{ 
# 231
__surf1Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 232
} 
#endif
# 234 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 235
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 237
::exit(___);}
#if 0
# 235
{ 
# 236
__surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap); 
# 237
} 
#endif
# 239 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 240
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 242
::exit(___);}
#if 0
# 240
{ 
# 241
__surf1Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 242
} 
#endif
# 244 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 245
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 247
::exit(___);}
#if 0
# 245
{ 
# 246
__surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap); 
# 247
} 
#endif
# 293 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 294
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 296
::exit(___);}
#if 0
# 294
{ 
# 295
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, cudaBoundaryModeTrap); 
# 296
} 
#endif
# 298 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 299
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 301
::exit(___);}
#if 0
# 299
{ 
# 300
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap); 
# 301
} 
#endif
# 303 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 304
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 306
::exit(___);}
#if 0
# 304
{ 
# 305
__surf1Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, cudaBoundaryModeTrap); 
# 306
} 
#endif
# 308 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 311
::exit(___);}
#if 0
# 309
{ 
# 310
__surf1Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap); 
# 311
} 
#endif
# 336 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 337
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 339
::exit(___);}
#if 0
# 337
{ 
# 338
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 339
} 
#endif
# 341 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 342
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 344
::exit(___);}
#if 0
# 342
{ 
# 343
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 344
} 
#endif
# 346 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 347
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 349
::exit(___);}
#if 0
# 347
{ 
# 348
__surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap); 
# 349
} 
#endif
# 351 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 354
::exit(___);}
#if 0
# 352
{ 
# 353
__surf2Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 354
} 
#endif
# 356 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 357
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 359
::exit(___);}
#if 0
# 357
{ 
# 358
__surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap); 
# 359
} 
#endif
# 361 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 362
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 364
::exit(___);}
#if 0
# 362
{ 
# 363
__surf2Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 364
} 
#endif
# 366 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 367
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 369
::exit(___);}
#if 0
# 367
{ 
# 368
__surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap); 
# 369
} 
#endif
# 371 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 372
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 374
::exit(___);}
#if 0
# 372
{ 
# 373
__surf2Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 374
} 
#endif
# 376 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 377
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 379
::exit(___);}
#if 0
# 377
{ 
# 378
__surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap); 
# 379
} 
#endif
# 381 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 382
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 384
::exit(___);}
#if 0
# 382
{ 
# 383
__surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap); 
# 384
} 
#endif
# 386 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 387
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 389
::exit(___);}
#if 0
# 387
{ 
# 388
__surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap); 
# 389
} 
#endif
# 391 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 392
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 394
::exit(___);}
#if 0
# 392
{ 
# 393
__surf2Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 394
} 
#endif
# 396 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 397
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 399
::exit(___);}
#if 0
# 397
{ 
# 398
__surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap); 
# 399
} 
#endif
# 401 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 402
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 404
::exit(___);}
#if 0
# 402
{ 
# 403
__surf2Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 404
} 
#endif
# 406 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 407
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 409
::exit(___);}
#if 0
# 407
{ 
# 408
__surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap); 
# 409
} 
#endif
# 411 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 412
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 414
::exit(___);}
#if 0
# 412
{ 
# 413
__surf2Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 414
} 
#endif
# 416 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 417
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 419
::exit(___);}
#if 0
# 417
{ 
# 418
__surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap); 
# 419
} 
#endif
# 421 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 422
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 424
::exit(___);}
#if 0
# 422
{ 
# 423
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
# 424
} 
#endif
# 426 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 427
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 429
::exit(___);}
#if 0
# 427
{ 
# 428
__surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap); 
# 429
} 
#endif
# 431 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 432
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 434
::exit(___);}
#if 0
# 432
{ 
# 433
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 434
} 
#endif
# 436 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 437
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 439
::exit(___);}
#if 0
# 437
{ 
# 438
__surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap); 
# 439
} 
#endif
# 441 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 442
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 444
::exit(___);}
#if 0
# 442
{ 
# 443
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 444
} 
#endif
# 446 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 447
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 449
::exit(___);}
#if 0
# 447
{ 
# 448
__surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap); 
# 449
} 
#endif
# 451 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 452
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 454
::exit(___);}
#if 0
# 452
{ 
# 453
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 454
} 
#endif
# 456 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 457
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 459
::exit(___);}
#if 0
# 457
{ 
# 458
__surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap); 
# 459
} 
#endif
# 461 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 462
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 464
::exit(___);}
#if 0
# 462
{ 
# 463
__surf2Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, cudaBoundaryModeTrap); 
# 464
} 
#endif
# 466 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 467
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 469
::exit(___);}
#if 0
# 467
{ 
# 468
__surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap); 
# 469
} 
#endif
# 471 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 472
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 474
::exit(___);}
#if 0
# 472
{ 
# 473
__surf2Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 474
} 
#endif
# 476 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 477
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 479
::exit(___);}
#if 0
# 477
{ 
# 478
__surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap); 
# 479
} 
#endif
# 481 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 482
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 484
::exit(___);}
#if 0
# 482
{ 
# 483
__surf2Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 484
} 
#endif
# 486 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 487
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 489
::exit(___);}
#if 0
# 487
{ 
# 488
__surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap); 
# 489
} 
#endif
# 535 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 536
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 538
::exit(___);}
#if 0
# 536
{ 
# 537
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap); 
# 538
} 
#endif
# 540 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 541
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 543
::exit(___);}
#if 0
# 541
{ 
# 542
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 543
} 
#endif
# 545 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 546
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 548
::exit(___);}
#if 0
# 546
{ 
# 547
__surf2Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 548
} 
#endif
# 550 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 551
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 553
::exit(___);}
#if 0
# 551
{ 
# 552
__surf2Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 553
} 
#endif
# 578 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 579
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 581
::exit(___);}
#if 0
# 579
{ 
# 580
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 581
} 
#endif
# 583 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 584
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 586
::exit(___);}
#if 0
# 584
{ 
# 585
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 586
} 
#endif
# 588 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 589
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 591
::exit(___);}
#if 0
# 589
{ 
# 590
__surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 591
} 
#endif
# 593 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 594
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 596
::exit(___);}
#if 0
# 594
{ 
# 595
__surf3Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 596
} 
#endif
# 598 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 599
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 601
::exit(___);}
#if 0
# 599
{ 
# 600
__surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 601
} 
#endif
# 603 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 604
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 606
::exit(___);}
#if 0
# 604
{ 
# 605
__surf3Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 606
} 
#endif
# 608 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 609
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
__surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 611
} 
#endif
# 613 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 614
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 616
::exit(___);}
#if 0
# 614
{ 
# 615
__surf3Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 616
} 
#endif
# 618 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 619
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 621
::exit(___);}
#if 0
# 619
{ 
# 620
__surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 621
} 
#endif
# 623 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 624
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 626
::exit(___);}
#if 0
# 624
{ 
# 625
__surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 626
} 
#endif
# 628 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 629
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 631
::exit(___);}
#if 0
# 629
{ 
# 630
__surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 631
} 
#endif
# 633 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 634
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 636
::exit(___);}
#if 0
# 634
{ 
# 635
__surf3Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 636
} 
#endif
# 638 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 639
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 641
::exit(___);}
#if 0
# 639
{ 
# 640
__surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 641
} 
#endif
# 643 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 644
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 646
::exit(___);}
#if 0
# 644
{ 
# 645
__surf3Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 646
} 
#endif
# 648 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 649
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 651
::exit(___);}
#if 0
# 649
{ 
# 650
__surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 651
} 
#endif
# 653 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 654
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 656
::exit(___);}
#if 0
# 654
{ 
# 655
__surf3Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 656
} 
#endif
# 658 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 659
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
__surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 661
} 
#endif
# 663 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 664
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 666
::exit(___);}
#if 0
# 664
{ 
# 665
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 666
} 
#endif
# 668 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 669
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 671
::exit(___);}
#if 0
# 669
{ 
# 670
__surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 671
} 
#endif
# 673 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 674
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 676
::exit(___);}
#if 0
# 674
{ 
# 675
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 676
} 
#endif
# 678 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 679
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 681
::exit(___);}
#if 0
# 679
{ 
# 680
__surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 681
} 
#endif
# 683 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 684
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 686
::exit(___);}
#if 0
# 684
{ 
# 685
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 686
} 
#endif
# 688 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 691
::exit(___);}
#if 0
# 689
{ 
# 690
__surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 691
} 
#endif
# 693 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 694
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 696
::exit(___);}
#if 0
# 694
{ 
# 695
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 696
} 
#endif
# 698 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 699
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 701
::exit(___);}
#if 0
# 699
{ 
# 700
__surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 701
} 
#endif
# 703 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 704
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 706
::exit(___);}
#if 0
# 704
{ 
# 705
__surf3Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 706
} 
#endif
# 708 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 709
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 711
::exit(___);}
#if 0
# 709
{ 
# 710
__surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 711
} 
#endif
# 713 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 714
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 716
::exit(___);}
#if 0
# 714
{ 
# 715
__surf3Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 716
} 
#endif
# 718 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 719
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 721
::exit(___);}
#if 0
# 719
{ 
# 720
__surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 721
} 
#endif
# 723 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 724
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 726
::exit(___);}
#if 0
# 724
{ 
# 725
__surf3Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 726
} 
#endif
# 728 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 729
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 731
::exit(___);}
#if 0
# 729
{ 
# 730
__surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 731
} 
#endif
# 777 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 778
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 780
::exit(___);}
#if 0
# 778
{ 
# 779
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap); 
# 780
} 
#endif
# 782 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 783
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 785
::exit(___);}
#if 0
# 783
{ 
# 784
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 785
} 
#endif
# 787 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 788
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 790
::exit(___);}
#if 0
# 788
{ 
# 789
__surf3Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 790
} 
#endif
# 792 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 793
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 795
::exit(___);}
#if 0
# 793
{ 
# 794
__surf3Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 795
} 
#endif
# 820 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 821
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 823
::exit(___);}
#if 0
# 821
{ 
# 822
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 823
} 
#endif
# 825 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 826
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 828
::exit(___);}
#if 0
# 826
{ 
# 827
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 828
} 
#endif
# 830 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 831
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 833
::exit(___);}
#if 0
# 831
{ 
# 832
__surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 833
} 
#endif
# 835 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 836
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 838
::exit(___);}
#if 0
# 836
{ 
# 837
__surf1DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 838
} 
#endif
# 840 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 841
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 843
::exit(___);}
#if 0
# 841
{ 
# 842
__surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 843
} 
#endif
# 845 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 846
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 848
::exit(___);}
#if 0
# 846
{ 
# 847
__surf1DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 848
} 
#endif
# 850 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 851
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 853
::exit(___);}
#if 0
# 851
{ 
# 852
__surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 853
} 
#endif
# 855 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 856
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 858
::exit(___);}
#if 0
# 856
{ 
# 857
__surf1DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 858
} 
#endif
# 860 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 861
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 863
::exit(___);}
#if 0
# 861
{ 
# 862
__surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 863
} 
#endif
# 865 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 866
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 868
::exit(___);}
#if 0
# 866
{ 
# 867
__surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap); 
# 868
} 
#endif
# 870 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 871
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 873
::exit(___);}
#if 0
# 871
{ 
# 872
__surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 873
} 
#endif
# 875 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 876
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 878
::exit(___);}
#if 0
# 876
{ 
# 877
__surf1DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 878
} 
#endif
# 880 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 881
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 883
::exit(___);}
#if 0
# 881
{ 
# 882
__surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 883
} 
#endif
# 885 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 886
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 888
::exit(___);}
#if 0
# 886
{ 
# 887
__surf1DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 888
} 
#endif
# 890 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 891
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 893
::exit(___);}
#if 0
# 891
{ 
# 892
__surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 893
} 
#endif
# 895 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 896
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 898
::exit(___);}
#if 0
# 896
{ 
# 897
__surf1DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 898
} 
#endif
# 900 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 901
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 903
::exit(___);}
#if 0
# 901
{ 
# 902
__surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 903
} 
#endif
# 905 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 906
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 908
::exit(___);}
#if 0
# 906
{ 
# 907
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
# 908
} 
#endif
# 910 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 911
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 913
::exit(___);}
#if 0
# 911
{ 
# 912
__surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 913
} 
#endif
# 915 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 916
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 918
::exit(___);}
#if 0
# 916
{ 
# 917
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 918
} 
#endif
# 920 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 921
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 923
::exit(___);}
#if 0
# 921
{ 
# 922
__surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 923
} 
#endif
# 925 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 926
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 928
::exit(___);}
#if 0
# 926
{ 
# 927
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 928
} 
#endif
# 930 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 931
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 933
::exit(___);}
#if 0
# 931
{ 
# 932
__surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 933
} 
#endif
# 935 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 936
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 938
::exit(___);}
#if 0
# 936
{ 
# 937
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 938
} 
#endif
# 940 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 941
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 943
::exit(___);}
#if 0
# 941
{ 
# 942
__surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 943
} 
#endif
# 945 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 946
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 948
::exit(___);}
#if 0
# 946
{ 
# 947
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, layer, cudaBoundaryModeTrap); 
# 948
} 
#endif
# 950 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 951
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 953
::exit(___);}
#if 0
# 951
{ 
# 952
__surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 953
} 
#endif
# 955 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 956
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 958
::exit(___);}
#if 0
# 956
{ 
# 957
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 958
} 
#endif
# 960 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 961
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 963
::exit(___);}
#if 0
# 961
{ 
# 962
__surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 963
} 
#endif
# 965 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 966
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 968
::exit(___);}
#if 0
# 966
{ 
# 967
__surf1DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 968
} 
#endif
# 970 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 971
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 973
::exit(___);}
#if 0
# 971
{ 
# 972
__surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 973
} 
#endif
# 1019 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1020
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1022
::exit(___);}
#if 0
# 1020
{ 
# 1021
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap); 
# 1022
} 
#endif
# 1024 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1025
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1027
::exit(___);}
#if 0
# 1025
{ 
# 1026
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 1027
} 
#endif
# 1029 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1030
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1032
::exit(___);}
#if 0
# 1030
{ 
# 1031
__surf1DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 1032
} 
#endif
# 1034 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1035
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1037
::exit(___);}
#if 0
# 1035
{ 
# 1036
__surf1DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 1037
} 
#endif
# 1062 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1063
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1065
::exit(___);}
#if 0
# 1063
{ 
# 1064
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1065
} 
#endif
# 1067 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1068
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1070
::exit(___);}
#if 0
# 1068
{ 
# 1069
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1070
} 
#endif
# 1072 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1073
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1075
::exit(___);}
#if 0
# 1073
{ 
# 1074
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1075
} 
#endif
# 1077 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1078
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1080
::exit(___);}
#if 0
# 1078
{ 
# 1079
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1080
} 
#endif
# 1082 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1083
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1085
::exit(___);}
#if 0
# 1083
{ 
# 1084
__surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1085
} 
#endif
# 1087 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1088
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1090
::exit(___);}
#if 0
# 1088
{ 
# 1089
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1090
} 
#endif
# 1092 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1093
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1095
::exit(___);}
#if 0
# 1093
{ 
# 1094
__surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1095
} 
#endif
# 1097 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1098
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1100
::exit(___);}
#if 0
# 1098
{ 
# 1099
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1100
} 
#endif
# 1102 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1103
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1105
::exit(___);}
#if 0
# 1103
{ 
# 1104
__surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1105
} 
#endif
# 1107 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1108
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1110
::exit(___);}
#if 0
# 1108
{ 
# 1109
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1110
} 
#endif
# 1112 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1113
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1115
::exit(___);}
#if 0
# 1113
{ 
# 1114
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1115
} 
#endif
# 1117 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1118
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1120
::exit(___);}
#if 0
# 1118
{ 
# 1119
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1120
} 
#endif
# 1122 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1123
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1125
::exit(___);}
#if 0
# 1123
{ 
# 1124
__surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1125
} 
#endif
# 1127 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1128
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1130
::exit(___);}
#if 0
# 1128
{ 
# 1129
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1130
} 
#endif
# 1132 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1133
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1135
::exit(___);}
#if 0
# 1133
{ 
# 1134
__surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1135
} 
#endif
# 1137 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1138
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1140
::exit(___);}
#if 0
# 1138
{ 
# 1139
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1140
} 
#endif
# 1142 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1143
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1145
::exit(___);}
#if 0
# 1143
{ 
# 1144
__surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1145
} 
#endif
# 1147 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1148
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1150
::exit(___);}
#if 0
# 1148
{ 
# 1149
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1150
} 
#endif
# 1152 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1153
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1155
::exit(___);}
#if 0
# 1153
{ 
# 1154
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1155
} 
#endif
# 1157 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1158
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1160
::exit(___);}
#if 0
# 1158
{ 
# 1159
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1160
} 
#endif
# 1162 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1163
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1165
::exit(___);}
#if 0
# 1163
{ 
# 1164
__surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1165
} 
#endif
# 1167 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1168
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1170
::exit(___);}
#if 0
# 1168
{ 
# 1169
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1170
} 
#endif
# 1172 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1173
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1175
::exit(___);}
#if 0
# 1173
{ 
# 1174
__surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1175
} 
#endif
# 1177 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1178
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1180
::exit(___);}
#if 0
# 1178
{ 
# 1179
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1180
} 
#endif
# 1182 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1183
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1185
::exit(___);}
#if 0
# 1183
{ 
# 1184
__surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1185
} 
#endif
# 1187 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1188
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1190
::exit(___);}
#if 0
# 1188
{ 
# 1189
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1190
} 
#endif
# 1192 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1193
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1195
::exit(___);}
#if 0
# 1193
{ 
# 1194
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1195
} 
#endif
# 1197 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1198
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1200
::exit(___);}
#if 0
# 1198
{ 
# 1199
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1200
} 
#endif
# 1202 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1203
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1205
::exit(___);}
#if 0
# 1203
{ 
# 1204
__surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1205
} 
#endif
# 1207 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1208
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1210
::exit(___);}
#if 0
# 1208
{ 
# 1209
__surf2DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1210
} 
#endif
# 1212 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1213
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1215
::exit(___);}
#if 0
# 1213
{ 
# 1214
__surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 1215
} 
#endif
# 1261 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1262
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1264
::exit(___);}
#if 0
# 1262
{ 
# 1263
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1264
} 
#endif
# 1266 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1267
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1269
::exit(___);}
#if 0
# 1267
{ 
# 1268
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1269
} 
#endif
# 1271 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1272
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1274
::exit(___);}
#if 0
# 1272
{ 
# 1273
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1274
} 
#endif
# 1276 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1277
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1279
::exit(___);}
#if 0
# 1277
{ 
# 1278
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 1279
} 
#endif
# 1305 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1306
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1308
::exit(___);}
#if 0
# 1306
{ 
# 1307
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1308
} 
#endif
# 1310 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1311
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1313
::exit(___);}
#if 0
# 1311
{ 
# 1312
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1313
} 
#endif
# 1315 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1316
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1318
::exit(___);}
#if 0
# 1316
{ 
# 1317
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1318
} 
#endif
# 1320 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1321
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1323
::exit(___);}
#if 0
# 1321
{ 
# 1322
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1323
} 
#endif
# 1325 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1326
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1328
::exit(___);}
#if 0
# 1326
{ 
# 1327
__surf2DLayeredwritec1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1328
} 
#endif
# 1330 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1331
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1333
::exit(___);}
#if 0
# 1331
{ 
# 1332
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1333
} 
#endif
# 1335 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1336
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1338
::exit(___);}
#if 0
# 1336
{ 
# 1337
__surf2DLayeredwritec2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1338
} 
#endif
# 1340 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1341
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1343
::exit(___);}
#if 0
# 1341
{ 
# 1342
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1343
} 
#endif
# 1345 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1346
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1348
::exit(___);}
#if 0
# 1346
{ 
# 1347
__surf2DLayeredwritec4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1348
} 
#endif
# 1350 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1351
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1353
::exit(___);}
#if 0
# 1351
{ 
# 1352
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1353
} 
#endif
# 1355 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1356
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1358
::exit(___);}
#if 0
# 1356
{ 
# 1357
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1358
} 
#endif
# 1360 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1361
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1363
::exit(___);}
#if 0
# 1361
{ 
# 1362
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1363
} 
#endif
# 1365 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1366
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1368
::exit(___);}
#if 0
# 1366
{ 
# 1367
__surf2DLayeredwrites1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1368
} 
#endif
# 1370 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1371
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1373
::exit(___);}
#if 0
# 1371
{ 
# 1372
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1373
} 
#endif
# 1375 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1376
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1378
::exit(___);}
#if 0
# 1376
{ 
# 1377
__surf2DLayeredwrites2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1378
} 
#endif
# 1380 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1381
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1383
::exit(___);}
#if 0
# 1381
{ 
# 1382
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1383
} 
#endif
# 1385 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1388
::exit(___);}
#if 0
# 1386
{ 
# 1387
__surf2DLayeredwrites4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1388
} 
#endif
# 1390 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1391
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1393
::exit(___);}
#if 0
# 1391
{ 
# 1392
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1393
} 
#endif
# 1395 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1396
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1398
::exit(___);}
#if 0
# 1396
{ 
# 1397
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1398
} 
#endif
# 1400 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1401
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1403
::exit(___);}
#if 0
# 1401
{ 
# 1402
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1403
} 
#endif
# 1405 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1406
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1408
::exit(___);}
#if 0
# 1406
{ 
# 1407
__surf2DLayeredwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1408
} 
#endif
# 1410 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1411
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1413
::exit(___);}
#if 0
# 1411
{ 
# 1412
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1413
} 
#endif
# 1415 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1416
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1418
::exit(___);}
#if 0
# 1416
{ 
# 1417
__surf2DLayeredwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1418
} 
#endif
# 1420 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1423
::exit(___);}
#if 0
# 1421
{ 
# 1422
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1423
} 
#endif
# 1425 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1426
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1428
::exit(___);}
#if 0
# 1426
{ 
# 1427
__surf2DLayeredwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1428
} 
#endif
# 1430 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1431
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1433
::exit(___);}
#if 0
# 1431
{ 
# 1432
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1433
} 
#endif
# 1435 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1436
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1438
::exit(___);}
#if 0
# 1436
{ 
# 1437
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 1438
} 
#endif
# 1440 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1441
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1443
::exit(___);}
#if 0
# 1441
{ 
# 1442
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1443
} 
#endif
# 1445 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1446
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1448
::exit(___);}
#if 0
# 1446
{ 
# 1447
__surf2DLayeredwritel1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1448
} 
#endif
# 1450 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1451
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1453
::exit(___);}
#if 0
# 1451
{ 
# 1452
__surf2DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1453
} 
#endif
# 1455 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1456
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1458
::exit(___);}
#if 0
# 1456
{ 
# 1457
__surf2DLayeredwritel2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 1458
} 
#endif
# 1504 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1505
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1507
::exit(___);}
#if 0
# 1505
{ 
# 1506
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1507
} 
#endif
# 1509 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1510
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1512
::exit(___);}
#if 0
# 1510
{ 
# 1511
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1512
} 
#endif
# 1514 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1515
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1517
::exit(___);}
#if 0
# 1515
{ 
# 1516
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1517
} 
#endif
# 1519 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1520
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1522
::exit(___);}
#if 0
# 1520
{ 
# 1521
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 1522
} 
#endif
# 1548 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1549
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1551
::exit(___);}
#if 0
# 1549
{ 
# 1550
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1551
} 
#endif
# 1553 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1554
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1556
::exit(___);}
#if 0
# 1554
{ 
# 1555
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1556
} 
#endif
# 1558 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1559
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1561
::exit(___);}
#if 0
# 1559
{ 
# 1560
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1561
} 
#endif
# 1563 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1564
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1566
::exit(___);}
#if 0
# 1564
{ 
# 1565
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1566
} 
#endif
# 1568 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1569
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1571
::exit(___);}
#if 0
# 1569
{ 
# 1570
__surf2DLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1571
} 
#endif
# 1573 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1574
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1576
::exit(___);}
#if 0
# 1574
{ 
# 1575
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1576
} 
#endif
# 1578 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1579
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1581
::exit(___);}
#if 0
# 1579
{ 
# 1580
__surf2DLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1581
} 
#endif
# 1583 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1584
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1586
::exit(___);}
#if 0
# 1584
{ 
# 1585
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1586
} 
#endif
# 1588 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1589
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1591
::exit(___);}
#if 0
# 1589
{ 
# 1590
__surf2DLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1591
} 
#endif
# 1593 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1594
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1596
::exit(___);}
#if 0
# 1594
{ 
# 1595
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1596
} 
#endif
# 1598 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1599
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1601
::exit(___);}
#if 0
# 1599
{ 
# 1600
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1601
} 
#endif
# 1603 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1604
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1606
::exit(___);}
#if 0
# 1604
{ 
# 1605
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1606
} 
#endif
# 1608 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1609
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1611
::exit(___);}
#if 0
# 1609
{ 
# 1610
__surf2DLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1611
} 
#endif
# 1613 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1614
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1616
::exit(___);}
#if 0
# 1614
{ 
# 1615
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1616
} 
#endif
# 1618 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1619
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1621
::exit(___);}
#if 0
# 1619
{ 
# 1620
__surf2DLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1621
} 
#endif
# 1623 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1624
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1626
::exit(___);}
#if 0
# 1624
{ 
# 1625
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1626
} 
#endif
# 1628 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1629
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1631
::exit(___);}
#if 0
# 1629
{ 
# 1630
__surf2DLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1631
} 
#endif
# 1633 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1634
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1636
::exit(___);}
#if 0
# 1634
{ 
# 1635
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1636
} 
#endif
# 1638 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1639
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1641
::exit(___);}
#if 0
# 1639
{ 
# 1640
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1641
} 
#endif
# 1643 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1644
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1646
::exit(___);}
#if 0
# 1644
{ 
# 1645
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1646
} 
#endif
# 1648 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1649
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1651
::exit(___);}
#if 0
# 1649
{ 
# 1650
__surf2DLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1651
} 
#endif
# 1653 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1654
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1656
::exit(___);}
#if 0
# 1654
{ 
# 1655
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1656
} 
#endif
# 1658 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1659
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1661
::exit(___);}
#if 0
# 1659
{ 
# 1660
__surf2DLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1661
} 
#endif
# 1663 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1664
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1666
::exit(___);}
#if 0
# 1664
{ 
# 1665
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1666
} 
#endif
# 1668 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1669
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1671
::exit(___);}
#if 0
# 1669
{ 
# 1670
__surf2DLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1671
} 
#endif
# 1673 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1674
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1676
::exit(___);}
#if 0
# 1674
{ 
# 1675
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1676
} 
#endif
# 1678 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1679
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1681
::exit(___);}
#if 0
# 1679
{ 
# 1680
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1681
} 
#endif
# 1683 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1684
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1686
::exit(___);}
#if 0
# 1684
{ 
# 1685
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1686
} 
#endif
# 1688 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1691
::exit(___);}
#if 0
# 1689
{ 
# 1690
__surf2DLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1691
} 
#endif
# 1693 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1694
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1696
::exit(___);}
#if 0
# 1694
{ 
# 1695
__surf2DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1696
} 
#endif
# 1698 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1699
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1701
::exit(___);}
#if 0
# 1699
{ 
# 1700
__surf2DLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1701
} 
#endif
# 1747 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1748
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1750
} 
#endif
# 1752 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1753
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1755
::exit(___);}
#if 0
# 1753
{ 
# 1754
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1755
} 
#endif
# 1757 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1758
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1760
::exit(___);}
#if 0
# 1758
{ 
# 1759
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1760
} 
#endif
# 1762 "/usr/local/cuda-7.0//include/surface_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 1763
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1765
::exit(___);}
#if 0
# 1763
{ 
# 1764
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 1765
} 
#endif
# 141 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> 
# 142
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 143
__utexfetchi(texture< T, 1, readMode>  t, int4 i) 
# 144
{int volatile ___ = 1;(void)t;(void)i;
# 146
::exit(___);}
#if 0
# 144
{ 
# 145
return __utexfetchi1D(t, i); 
# 146
} 
#endif
# 148 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> 
# 149
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 150
__itexfetchi(texture< T, 1, readMode>  t, int4 i) 
# 151
{int volatile ___ = 1;(void)t;(void)i;
# 153
::exit(___);}
#if 0
# 151
{ 
# 152
return __itexfetchi1D(t, i); 
# 153
} 
#endif
# 155 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> 
# 156
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 157
__ftexfetchi(texture< T, 1, readMode>  t, int4 i) 
# 158
{int volatile ___ = 1;(void)t;(void)i;
# 160
::exit(___);}
#if 0
# 158
{ 
# 159
return __ftexfetchi1D(t, i); 
# 160
} 
#endif
# 162 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 163
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 164
__utexfetch(texture< T, texType, readMode>  t, float4 i, int d = texType) 
# 165
{int volatile ___ = 1;(void)t;(void)i;(void)d;
# 172
::exit(___);}
#if 0
# 165
{ 
# 166
switch (d) { 
# 167
case 1:  return __utexfetch1D(t, i); 
# 168
case 2:  return __utexfetch2D(t, i); 
# 170
default:  return __utexfetch3D(t, i); 
# 171
}  
# 172
} 
#endif
# 174 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 175
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 176
__itexfetch(texture< T, texType, readMode>  t, float4 i, int d = texType) 
# 177
{int volatile ___ = 1;(void)t;(void)i;(void)d;
# 184
::exit(___);}
#if 0
# 177
{ 
# 178
switch (d) { 
# 179
case 1:  return __itexfetch1D(t, i); 
# 180
case 2:  return __itexfetch2D(t, i); 
# 182
default:  return __itexfetch3D(t, i); 
# 183
}  
# 184
} 
#endif
# 186 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 187
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 188
__ftexfetch(texture< T, texType, readMode>  t, float4 i, int d = texType) 
# 189
{int volatile ___ = 1;(void)t;(void)i;(void)d;
# 196
::exit(___);}
#if 0
# 189
{ 
# 190
switch (d) { 
# 191
case 1:  return __ftexfetch1D(t, i); 
# 192
case 2:  return __ftexfetch2D(t, i); 
# 194
default:  return __ftexfetch3D(t, i); 
# 195
}  
# 196
} 
#endif
# 198 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 199
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 200
__utexfetchc(texture< T, texType, readMode>  t, float4 i) 
# 201
{int volatile ___ = 1;(void)t;(void)i;
# 203
::exit(___);}
#if 0
# 201
{ 
# 202
return __utexfetchcube(t, i); 
# 203
} 
#endif
# 205 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 206
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 207
__itexfetchc(texture< T, texType, readMode>  t, float4 i) 
# 208
{int volatile ___ = 1;(void)t;(void)i;
# 210
::exit(___);}
#if 0
# 208
{ 
# 209
return __itexfetchcube(t, i); 
# 210
} 
#endif
# 212 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 213
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 214
__ftexfetchc(texture< T, texType, readMode>  t, float4 i) 
# 215
{int volatile ___ = 1;(void)t;(void)i;
# 217
::exit(___);}
#if 0
# 215
{ 
# 216
return __ftexfetchcube(t, i); 
# 217
} 
#endif
# 219 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 220
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 221
__utexfetchl(texture< T, texType, readMode>  t, float4 i, int l, int d = texType & 15) 
# 222
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
# 228
::exit(___);}
#if 0
# 222
{ 
# 223
switch (d) { 
# 224
case 1:  return __utexfetchl1D(t, i, l); 
# 226
default:  return __utexfetchl2D(t, i, l); 
# 227
}  
# 228
} 
#endif
# 230 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 231
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 232
__itexfetchl(texture< T, texType, readMode>  t, float4 i, int l, int d = texType & 15) 
# 233
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
# 239
::exit(___);}
#if 0
# 233
{ 
# 234
switch (d) { 
# 235
case 1:  return __itexfetchl1D(t, i, l); 
# 237
default:  return __itexfetchl2D(t, i, l); 
# 238
}  
# 239
} 
#endif
# 241 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 242
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 243
__ftexfetchl(texture< T, texType, readMode>  t, float4 i, int l, int d = texType & 15) 
# 244
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
# 250
::exit(___);}
#if 0
# 244
{ 
# 245
switch (d) { 
# 246
case 1:  return __ftexfetchl1D(t, i, l); 
# 248
default:  return __ftexfetchl2D(t, i, l); 
# 249
}  
# 250
} 
#endif
# 252 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 253
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 254
__utexfetchlc(texture< T, texType, readMode>  t, float4 i, int l) 
# 255
{int volatile ___ = 1;(void)t;(void)i;(void)l;
# 257
::exit(___);}
#if 0
# 255
{ 
# 256
return __utexfetchlcube(t, i, l); 
# 257
} 
#endif
# 259 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 260
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 261
__itexfetchlc(texture< T, texType, readMode>  t, float4 i, int l) 
# 262
{int volatile ___ = 1;(void)t;(void)i;(void)l;
# 264
::exit(___);}
#if 0
# 262
{ 
# 263
return __itexfetchlcube(t, i, l); 
# 264
} 
#endif
# 266 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 267
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 268
__ftexfetchlc(texture< T, texType, readMode>  t, float4 i, int l) 
# 269
{int volatile ___ = 1;(void)t;(void)i;(void)l;
# 271
::exit(___);}
#if 0
# 269
{ 
# 270
return __ftexfetchlcube(t, i, l); 
# 271
} 
#endif
# 280 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x); 
# 282
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x); 
# 284
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x); 
# 286
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x); 
# 288
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x); 
# 290
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x); 
# 292
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x); 
# 294
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x); 
# 296
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x); 
# 304
__attribute((always_inline)) __attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x); 
# 306
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x); 
# 308
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x); 
# 310
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x); 
# 312
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x); 
# 314
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x); 
# 316
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x); 
# 318
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x); 
# 326
__attribute((always_inline)) __attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x); 
# 328
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x); 
# 330
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x); 
# 332
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x); 
# 334
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x); 
# 336
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x); 
# 338
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x); 
# 340
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x); 
# 374 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x); 
# 376
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x); 
# 378
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x); 
# 380
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x); 
# 388
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 390
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 392
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 394
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 396
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 398
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 400
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 402
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 404
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 412
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 414
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 416
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 418
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 420
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 422
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 424
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 426
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x); 
# 434
__attribute((always_inline)) __attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x); 
# 436
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x); 
# 438
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x); 
# 440
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x); 
# 442
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x); 
# 444
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x); 
# 446
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x); 
# 448
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x); 
# 450
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x); 
# 458
__attribute((always_inline)) __attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x); 
# 460
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x); 
# 462
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x); 
# 464
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x); 
# 466
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x); 
# 468
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x); 
# 470
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x); 
# 472
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x); 
# 480
__attribute((always_inline)) __attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x); 
# 482
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x); 
# 484
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x); 
# 486
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x); 
# 488
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x); 
# 490
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x); 
# 492
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x); 
# 494
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x); 
# 534 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x); 
# 536
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x); 
# 538
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x); 
# 540
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x); 
# 548
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 550
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 552
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 554
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 556
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 558
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 560
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 562
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 564
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 572
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 574
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 576
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 578
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 580
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 582
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 584
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 586
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x); 
# 594
__attribute((always_inline)) __attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y); 
# 596
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y); 
# 598
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y); 
# 600
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y); 
# 602
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y); 
# 604
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y); 
# 606
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y); 
# 608
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y); 
# 610
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y); 
# 618
__attribute((always_inline)) __attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y); 
# 620
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y); 
# 622
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y); 
# 624
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y); 
# 626
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y); 
# 628
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y); 
# 630
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y); 
# 632
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y); 
# 640
__attribute((always_inline)) __attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y); 
# 642
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y); 
# 644
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y); 
# 646
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y); 
# 648
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y); 
# 650
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y); 
# 652
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y); 
# 654
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y); 
# 688 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y); 
# 690
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y); 
# 692
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y); 
# 694
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y); 
# 702
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 704
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 706
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 708
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 710
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 712
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 714
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 716
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 718
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 726
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 728
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 730
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 732
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 734
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 736
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 738
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 740
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
# 748
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer); 
# 750
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer); 
# 752
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer); 
# 754
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 756
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 758
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 760
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 762
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 764
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 772
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer); 
# 774
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer); 
# 776
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 778
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 780
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 782
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 784
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 786
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 794
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer); 
# 796
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer); 
# 798
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 800
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 802
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 804
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 806
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 808
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 842 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer); 
# 844
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer); 
# 846
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer); 
# 848
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer); 
# 856
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 858
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 860
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 862
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 864
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 866
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 868
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 870
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 872
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 880
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 882
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 884
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 886
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 888
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 890
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 892
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 894
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
# 902
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 904
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 906
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 908
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 910
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 912
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 914
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 916
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 918
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 926
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 928
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 930
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 932
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 934
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 936
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 938
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 940
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 948
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 950
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 952
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 954
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 956
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 958
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 960
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 962
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 996 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 998
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 1000
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 1002
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
# 1010
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1012
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1014
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1016
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1018
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1020
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1022
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1024
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1026
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1034
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1036
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1038
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1040
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1042
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1044
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1046
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1048
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
# 1056
__attribute((always_inline)) __attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1058
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1060
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1062
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1064
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1066
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1068
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1070
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1072
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1080
__attribute((always_inline)) __attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1082
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1084
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1086
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1088
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1090
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1092
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1094
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1102
__attribute((always_inline)) __attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1104
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1106
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1108
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1110
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1112
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1114
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1116
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1150 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1152
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1154
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1156
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
# 1164
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1166
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1168
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1170
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1172
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1174
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1176
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1178
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1180
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1188
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1190
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1192
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1194
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1196
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1198
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1200
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1202
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1210
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1212
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1214
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1216
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1218
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1220
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1222
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1224
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1226
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1234
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1236
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1238
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1240
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1242
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1244
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1246
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1248
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1256
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1258
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1260
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1262
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1264
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1266
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1268
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1270
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1304 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1306
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1308
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1310
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
# 1318
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1320
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1322
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1324
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1326
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1328
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1330
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1332
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1334
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1342
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1344
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1346
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1348
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1350
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1352
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1354
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1356
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
# 1364
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1366
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1368
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1370
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1372
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1374
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1376
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1378
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1380
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1388
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1390
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1392
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1394
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1396
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1398
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1400
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1402
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1410
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1412
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1414
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1416
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1418
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1420
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1422
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1424
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1458 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1460
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1462
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1464
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
# 1472
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1474
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1476
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1478
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1480
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1482
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1484
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1486
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1488
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1496
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1498
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1500
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1502
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1504
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1506
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1508
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1510
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
# 1581 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> 
# 1582
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 1583
__itex2Dgather(texture< T, 2, readMode>  t, float2 i, int 
# 1584
c = comp) 
# 1585
{int volatile ___ = 1;(void)t;(void)i;(void)c;
# 1593
::exit(___);}
#if 0
# 1585
{ 
# 1586
switch (c) { 
# 1587
case 0:  return __itex2Dgather0(t, i); 
# 1588
case 1:  return __itex2Dgather1(t, i); 
# 1589
case 2:  return __itex2Dgather2(t, i); 
# 1591
default:  return __itex2Dgather3(t, i); 
# 1592
}  
# 1593
} 
#endif
# 1595 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> 
# 1596
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 1597
__utex2Dgather(texture< T, 2, readMode>  t, float2 i, int 
# 1598
c = comp) 
# 1599
{int volatile ___ = 1;(void)t;(void)i;(void)c;
# 1607
::exit(___);}
#if 0
# 1599
{ 
# 1600
switch (c) { 
# 1601
case 0:  return __utex2Dgather0(t, i); 
# 1602
case 1:  return __utex2Dgather1(t, i); 
# 1603
case 2:  return __utex2Dgather2(t, i); 
# 1605
default:  return __utex2Dgather3(t, i); 
# 1606
}  
# 1607
} 
#endif
# 1609 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> 
# 1610
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 1611
__ftex2Dgather(texture< T, 2, readMode>  t, float2 i, int 
# 1612
c = comp) 
# 1613
{int volatile ___ = 1;(void)t;(void)i;(void)c;
# 1621
::exit(___);}
#if 0
# 1613
{ 
# 1614
switch (c) { 
# 1615
case 0:  return __ftex2Dgather0(t, i); 
# 1616
case 1:  return __ftex2Dgather1(t, i); 
# 1617
case 2:  return __ftex2Dgather2(t, i); 
# 1619
default:  return __ftex2Dgather3(t, i); 
# 1620
}  
# 1621
} 
#endif
# 1623 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1625
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1627
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1629
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1631
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1633
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1635
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1637
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1639
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1641
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1643
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1645
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1647
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1649
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1651
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1653
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1655
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1657
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1659
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1661
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1663
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1665
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1667
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1669
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1671
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1673
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1675
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1677
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1679
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1681
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1683
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1685
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1687
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1689
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1691
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1693
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
# 1702 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1704
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1706
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1708
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1710
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1712
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1714
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1716
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1718
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1720
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1722
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1724
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1726
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1728
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1730
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1732
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1734
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1736
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1738
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1740
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1742
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
# 1834
template< class T, int texType, cudaTextureReadMode readMode> 
# 1835
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 1836
__utexfetchlod(texture< T, texType, readMode>  t, float4 i, float level, int 
# 1837
d = texType) 
# 1838
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
# 1845
::exit(___);}
#if 0
# 1838
{ 
# 1839
switch (d) { 
# 1840
case 1:  return __utexfetchlod1D(t, i, level); 
# 1841
case 2:  return __utexfetchlod2D(t, i, level); 
# 1843
default:  return __utexfetchlod3D(t, i, level); 
# 1844
}  
# 1845
} 
#endif
# 1847 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1848
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 1849
__itexfetchlod(texture< T, texType, readMode>  t, float4 i, float level, int 
# 1850
d = texType) 
# 1851
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
# 1858
::exit(___);}
#if 0
# 1851
{ 
# 1852
switch (d) { 
# 1853
case 1:  return __itexfetchlod1D(t, i, level); 
# 1854
case 2:  return __itexfetchlod2D(t, i, level); 
# 1856
default:  return __itexfetchlod3D(t, i, level); 
# 1857
}  
# 1858
} 
#endif
# 1860 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1861
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 1862
__ftexfetchlod(texture< T, texType, readMode>  t, float4 i, float level, int 
# 1863
d = texType) 
# 1864
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
# 1871
::exit(___);}
#if 0
# 1864
{ 
# 1865
switch (d) { 
# 1866
case 1:  return __ftexfetchlod1D(t, i, level); 
# 1867
case 2:  return __ftexfetchlod2D(t, i, level); 
# 1869
default:  return __ftexfetchlod3D(t, i, level); 
# 1870
}  
# 1871
} 
#endif
# 1874 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1875
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 1876
__utexfetchlodc(texture< T, texType, readMode>  t, float4 i, float level) 
# 1877
{int volatile ___ = 1;(void)t;(void)i;(void)level;
# 1879
::exit(___);}
#if 0
# 1877
{ 
# 1878
return __utexfetchlodcube(t, i, level); 
# 1879
} 
#endif
# 1881 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1882
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 1883
__itexfetchlodc(texture< T, texType, readMode>  t, float4 i, float level) 
# 1884
{int volatile ___ = 1;(void)t;(void)i;(void)level;
# 1886
::exit(___);}
#if 0
# 1884
{ 
# 1885
return __itexfetchlodcube(t, i, level); 
# 1886
} 
#endif
# 1888 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1889
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 1890
__ftexfetchlodc(texture< T, texType, readMode>  t, float4 i, float level) 
# 1891
{int volatile ___ = 1;(void)t;(void)i;(void)level;
# 1893
::exit(___);}
#if 0
# 1891
{ 
# 1892
return __ftexfetchlodcube(t, i, level); 
# 1893
} 
#endif
# 1895 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1896
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 1897
__utexfetchlodl(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1898
level, int d = texType & 15) 
# 1899
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
# 1905
::exit(___);}
#if 0
# 1899
{ 
# 1900
switch (d) { 
# 1901
case 1:  return __utexfetchlodl1D(t, i, l, level); 
# 1903
default:  return __utexfetchlodl2D(t, i, l, level); 
# 1904
}  
# 1905
} 
#endif
# 1907 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1908
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 1909
__itexfetchlodl(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1910
level, int d = texType & 15) 
# 1911
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
# 1917
::exit(___);}
#if 0
# 1911
{ 
# 1912
switch (d) { 
# 1913
case 1:  return __itexfetchlodl1D(t, i, l, level); 
# 1915
default:  return __itexfetchlodl2D(t, i, l, level); 
# 1916
}  
# 1917
} 
#endif
# 1919 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1920
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 1921
__ftexfetchlodl(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1922
level, int d = texType & 15) 
# 1923
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
# 1929
::exit(___);}
#if 0
# 1923
{ 
# 1924
switch (d) { 
# 1925
case 1:  return __ftexfetchlodl1D(t, i, l, level); 
# 1927
default:  return __ftexfetchlodl2D(t, i, l, level); 
# 1928
}  
# 1929
} 
#endif
# 1932 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1933
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 1934
__utexfetchlodlc(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1935
level) 
# 1936
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
# 1938
::exit(___);}
#if 0
# 1936
{ 
# 1937
return __utexfetchlodlcube(t, i, l, level); 
# 1938
} 
#endif
# 1940 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1941
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 1942
__itexfetchlodlc(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1943
level) 
# 1944
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
# 1946
::exit(___);}
#if 0
# 1944
{ 
# 1945
return __itexfetchlodlcube(t, i, l, level); 
# 1946
} 
#endif
# 1948 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 1949
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 1950
__ftexfetchlodlc(texture< T, texType, readMode>  t, float4 i, int l, float 
# 1951
level) 
# 1952
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
# 1954
::exit(___);}
#if 0
# 1952
{ 
# 1953
return __ftexfetchlodlcube(t, i, l, level); 
# 1954
} 
#endif
# 1963 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLod(texture< char, 1, cudaReadModeElementType>  t, float x, float level); 
# 1965
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLod(texture< signed char, 1, cudaReadModeElementType>  t, float x, float level); 
# 1967
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLod(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float level); 
# 1969
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLod(texture< char1, 1, cudaReadModeElementType>  t, float x, float level); 
# 1971
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLod(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float level); 
# 1973
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLod(texture< char2, 1, cudaReadModeElementType>  t, float x, float level); 
# 1975
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLod(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float level); 
# 1977
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLod(texture< char4, 1, cudaReadModeElementType>  t, float x, float level); 
# 1979
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLod(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float level); 
# 1987
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLod(texture< short, 1, cudaReadModeElementType>  t, float x, float level); 
# 1989
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLod(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float level); 
# 1991
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLod(texture< short1, 1, cudaReadModeElementType>  t, float x, float level); 
# 1993
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLod(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float level); 
# 1995
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLod(texture< short2, 1, cudaReadModeElementType>  t, float x, float level); 
# 1997
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLod(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float level); 
# 1999
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLod(texture< short4, 1, cudaReadModeElementType>  t, float x, float level); 
# 2001
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLod(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float level); 
# 2009
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLod(texture< int, 1, cudaReadModeElementType>  t, float x, float level); 
# 2011
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLod(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float level); 
# 2013
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLod(texture< int1, 1, cudaReadModeElementType>  t, float x, float level); 
# 2015
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLod(texture< uint1, 1, cudaReadModeElementType>  t, float x, float level); 
# 2017
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLod(texture< int2, 1, cudaReadModeElementType>  t, float x, float level); 
# 2019
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLod(texture< uint2, 1, cudaReadModeElementType>  t, float x, float level); 
# 2021
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLod(texture< int4, 1, cudaReadModeElementType>  t, float x, float level); 
# 2023
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLod(texture< uint4, 1, cudaReadModeElementType>  t, float x, float level); 
# 2063 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< float, 1, cudaReadModeElementType>  t, float x, float level); 
# 2065
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< float1, 1, cudaReadModeElementType>  t, float x, float level); 
# 2067
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< float2, 1, cudaReadModeElementType>  t, float x, float level); 
# 2069
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< float4, 1, cudaReadModeElementType>  t, float x, float level); 
# 2077
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2079
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2081
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2083
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2085
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2087
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2089
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2091
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2093
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2101
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2103
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2105
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2107
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2109
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2111
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2113
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2115
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
# 2123
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLod(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2125
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLod(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2127
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLod(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2129
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLod(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2131
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLod(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2133
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLod(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2135
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLod(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2137
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLod(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2139
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLod(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2147
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLod(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2149
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLod(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2151
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLod(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2153
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLod(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2155
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLod(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2157
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLod(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2159
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLod(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2161
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLod(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2169
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLod(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2171
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLod(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2173
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLod(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2175
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLod(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2177
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLod(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2179
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLod(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2181
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLod(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2183
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLod(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2217 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2219
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2221
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2223
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
# 2231
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2233
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2235
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2237
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2239
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2241
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2243
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2245
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2247
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2255
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2257
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2259
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2261
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2263
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2265
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2267
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2269
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
# 2277
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredLod(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2279
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredLod(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2281
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2283
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredLod(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2285
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2287
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredLod(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2289
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2291
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredLod(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2293
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2301
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredLod(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2303
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2305
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredLod(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2307
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2309
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredLod(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2311
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2313
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredLod(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2315
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2323
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredLod(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2325
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredLod(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2327
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredLod(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2329
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredLod(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2331
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredLod(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2333
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredLod(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2335
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredLod(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2337
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredLod(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2371 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2373
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2375
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2377
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
# 2385
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2387
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2389
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2391
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2393
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2395
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2397
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2399
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2401
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2409
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2411
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2413
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2415
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2417
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2419
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2421
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2423
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
# 2431
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredLod(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2433
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredLod(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2435
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2437
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredLod(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2439
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2441
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredLod(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2443
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2445
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredLod(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2447
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2455
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredLod(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2457
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2459
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredLod(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2461
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2463
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredLod(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2465
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2467
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredLod(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2469
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2477
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredLod(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2479
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredLod(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2481
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredLod(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2483
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredLod(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2485
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredLod(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2487
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredLod(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2489
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredLod(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2491
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredLod(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2525 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2527
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2529
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2531
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
# 2539
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2541
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2543
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2545
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2547
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2549
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2551
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2553
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2555
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2563
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2565
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2567
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2569
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2571
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2573
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2575
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2577
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
# 2585
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DLod(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2587
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DLod(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2589
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DLod(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2591
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DLod(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2593
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DLod(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2595
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DLod(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2597
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DLod(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2599
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DLod(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2601
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DLod(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2609
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DLod(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2611
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DLod(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2613
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DLod(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2615
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DLod(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2617
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DLod(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2619
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DLod(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2621
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DLod(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2623
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DLod(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2631
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DLod(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2633
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DLod(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2635
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DLod(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2637
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DLod(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2639
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DLod(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2641
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DLod(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2643
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DLod(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2645
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DLod(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2679 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2681
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2683
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2685
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2693
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2695
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2697
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2699
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2701
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2703
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2705
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2707
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2709
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2717
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2719
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2721
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2723
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2725
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2727
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2729
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2731
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2739
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLod(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2741
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLod(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2743
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLod(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2745
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLod(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2747
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLod(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2749
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLod(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2751
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLod(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2753
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLod(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2755
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLod(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2763
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLod(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2765
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLod(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2767
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLod(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2769
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLod(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2771
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLod(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2773
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLod(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2775
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLod(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2777
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLod(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2785
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLod(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2787
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLod(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2789
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLod(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2791
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLod(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2793
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLod(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2795
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLod(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2797
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLod(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2799
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLod(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2833 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2835
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2837
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2839
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
# 2847
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2849
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2851
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2853
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2855
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2857
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2859
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2861
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2863
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2871
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2873
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2875
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2877
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2879
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2881
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2883
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2885
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
# 2893
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayeredLod(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2895
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayeredLod(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2897
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2899
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2901
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2903
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2905
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2907
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2909
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2917
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayeredLod(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2919
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2921
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2923
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2925
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2927
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2929
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2931
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2939
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayeredLod(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2941
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayeredLod(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2943
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayeredLod(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2945
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayeredLod(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2947
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayeredLod(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2949
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayeredLod(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2951
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayeredLod(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2953
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayeredLod(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2987 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2989
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2991
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 2993
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
# 3001
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3003
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3005
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3007
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3009
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3011
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3013
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3015
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3017
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3025
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3027
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3029
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3031
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3033
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3035
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3037
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3039
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
# 3042
template< class T, int texType, cudaTextureReadMode readMode> 
# 3043
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 3044
__utexfetchgrad(texture< T, texType, readMode>  t, float4 i, float4 dPdx, float4 dPdy, int d = texType) 
# 3045
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
# 3052
::exit(___);}
#if 0
# 3045
{ 
# 3046
switch (d) { 
# 3047
case 1:  return __utexfetchgrad1D(t, i, dPdx, dPdy); 
# 3048
case 2:  return __utexfetchgrad2D(t, i, dPdx, dPdy); 
# 3050
default:  return __utexfetchgrad3D(t, i, dPdx, dPdy); 
# 3051
}  
# 3052
} 
#endif
# 3054 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 3055
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 3056
__itexfetchgrad(texture< T, texType, readMode>  t, float4 i, float4 dPdx, float4 dPdy, int d = texType) 
# 3057
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
# 3064
::exit(___);}
#if 0
# 3057
{ 
# 3058
switch (d) { 
# 3059
case 1:  return __itexfetchgrad1D(t, i, dPdx, dPdy); 
# 3060
case 2:  return __itexfetchgrad2D(t, i, dPdx, dPdy); 
# 3062
default:  return __itexfetchgrad3D(t, i, dPdx, dPdy); 
# 3063
}  
# 3064
} 
#endif
# 3066 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 3067
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 3068
__ftexfetchgrad(texture< T, texType, readMode>  t, float4 i, float4 dPdx, float4 dPdy, int d = texType) 
# 3069
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
# 3076
::exit(___);}
#if 0
# 3069
{ 
# 3070
switch (d) { 
# 3071
case 1:  return __ftexfetchgrad1D(t, i, dPdx, dPdy); 
# 3072
case 2:  return __ftexfetchgrad2D(t, i, dPdx, dPdy); 
# 3074
default:  return __ftexfetchgrad3D(t, i, dPdx, dPdy); 
# 3075
}  
# 3076
} 
#endif
# 3078 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 3079
__attribute((always_inline)) __attribute__((unused)) static inline uint4 
# 3080
__utexfetchgradl(texture< T, texType, readMode>  t, float4 i, int l, float4 dPdx, float4 dPdy, int d = texType & 15) 
# 3081
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
# 3087
::exit(___);}
#if 0
# 3081
{ 
# 3082
switch (d) { 
# 3083
case 1:  return __utexfetchgradl1D(t, i, l, dPdx, dPdy); 
# 3085
default:  return __utexfetchgradl2D(t, i, l, dPdx, dPdy); 
# 3086
}  
# 3087
} 
#endif
# 3089 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 3090
__attribute((always_inline)) __attribute__((unused)) static inline int4 
# 3091
__itexfetchgradl(texture< T, texType, readMode>  t, float4 i, int l, float4 dPdx, float4 dPdy, int d = texType & 15) 
# 3092
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
# 3098
::exit(___);}
#if 0
# 3092
{ 
# 3093
switch (d) { 
# 3094
case 1:  return __itexfetchgradl1D(t, i, l, dPdx, dPdy); 
# 3096
default:  return __itexfetchgradl2D(t, i, l, dPdx, dPdy); 
# 3097
}  
# 3098
} 
#endif
# 3100 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> 
# 3101
__attribute((always_inline)) __attribute__((unused)) static inline float4 
# 3102
__ftexfetchgradl(texture< T, texType, readMode>  t, float4 i, int l, float4 dPdx, float4 dPdy, int d = texType & 15) 
# 3103
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
# 3109
::exit(___);}
#if 0
# 3103
{ 
# 3104
switch (d) { 
# 3105
case 1:  return __ftexfetchgradl1D(t, i, l, dPdx, dPdy); 
# 3107
default:  return __ftexfetchgradl2D(t, i, l, dPdx, dPdy); 
# 3108
}  
# 3109
} 
#endif
# 3118 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DGrad(texture< char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3120
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DGrad(texture< signed char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3122
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DGrad(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3124
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DGrad(texture< char1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3126
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DGrad(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3128
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DGrad(texture< char2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3130
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DGrad(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3132
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DGrad(texture< char4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3134
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DGrad(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3142
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DGrad(texture< short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3144
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DGrad(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3146
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DGrad(texture< short1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3148
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DGrad(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3150
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DGrad(texture< short2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3152
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DGrad(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3154
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DGrad(texture< short4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3156
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DGrad(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3164
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DGrad(texture< int, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3166
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DGrad(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3168
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DGrad(texture< int1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3170
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DGrad(texture< uint1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3172
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DGrad(texture< int2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3174
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DGrad(texture< uint2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3176
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DGrad(texture< int4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3178
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DGrad(texture< uint4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3218 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< float, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3220
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< float1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3222
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< float2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3224
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< float4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
# 3232
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3234
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3236
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3238
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3240
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3242
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3244
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3246
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3248
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3256
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3258
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3260
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3262
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3264
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3266
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3268
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3270
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
# 3278
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DGrad(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3280
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DGrad(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3282
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DGrad(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3284
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DGrad(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3286
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DGrad(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3288
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DGrad(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3290
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DGrad(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3292
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DGrad(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3294
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DGrad(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3302
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DGrad(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3304
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DGrad(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3306
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DGrad(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3308
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DGrad(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3310
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DGrad(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3312
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DGrad(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3314
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DGrad(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3316
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DGrad(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3324
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DGrad(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3326
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DGrad(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3328
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DGrad(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3330
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DGrad(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3332
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DGrad(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3334
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DGrad(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3336
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DGrad(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3338
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DGrad(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3372 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3374
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3376
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3378
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3386
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3388
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3390
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3392
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3394
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3396
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3398
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3400
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3402
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3410
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3412
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3414
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3416
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3418
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3420
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3422
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3424
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
# 3432
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredGrad(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3434
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredGrad(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3436
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3438
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3440
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3442
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3444
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3446
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3448
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3456
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredGrad(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3458
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3460
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3462
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3464
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3466
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3468
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3470
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3478
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredGrad(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3480
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredGrad(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3482
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredGrad(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3484
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredGrad(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3486
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredGrad(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3488
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredGrad(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3490
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredGrad(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3492
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredGrad(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3526 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3528
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3530
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3532
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
# 3540
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3542
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3544
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3546
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3548
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3550
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3552
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3554
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3556
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3564
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3566
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3568
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3570
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3572
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3574
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3576
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3578
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
# 3586
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredGrad(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3588
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredGrad(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3590
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3592
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3594
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3596
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3598
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3600
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3602
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3610
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredGrad(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3612
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3614
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3616
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3618
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3620
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3622
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3624
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3632
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredGrad(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3634
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredGrad(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3636
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredGrad(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3638
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredGrad(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3640
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredGrad(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3642
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredGrad(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3644
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredGrad(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3646
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredGrad(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3680 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3682
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3684
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3686
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3694
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3696
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3698
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3700
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3702
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3704
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3706
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3708
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3710
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3718
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3720
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3722
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3724
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3726
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3728
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3730
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3732
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 3740
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DGrad(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3742
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DGrad(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3744
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DGrad(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3746
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DGrad(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3748
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DGrad(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3750
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DGrad(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3752
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DGrad(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3754
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DGrad(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3756
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DGrad(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3764
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DGrad(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3766
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DGrad(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3768
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DGrad(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3770
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DGrad(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3772
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DGrad(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3774
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DGrad(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3776
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DGrad(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3778
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DGrad(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3786
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DGrad(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3788
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DGrad(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3790
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DGrad(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3792
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DGrad(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3794
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DGrad(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3796
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DGrad(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3798
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DGrad(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3800
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DGrad(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3834 "/usr/local/cuda-7.0//include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3836
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3838
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3840
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3848
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3850
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3852
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3854
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3856
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3858
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3860
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3862
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3864
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3872
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3874
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3876
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3878
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3880
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3882
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3884
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 3886
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 80 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x) 
# 81
{int volatile ___ = 1;(void)t;(void)x;
# 89
::exit(___);}
#if 0
# 81
{ 
# 85
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 88
return (char)(v.x); 
# 89
} 
#endif
# 91 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x) 
# 92
{int volatile ___ = 1;(void)t;(void)x;
# 96
::exit(___);}
#if 0
# 92
{ 
# 93
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 95
return (signed char)(v.x); 
# 96
} 
#endif
# 98 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x) 
# 99
{int volatile ___ = 1;(void)t;(void)x;
# 103
::exit(___);}
#if 0
# 99
{ 
# 100
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 102
return (unsigned char)(v.x); 
# 103
} 
#endif
# 105 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x) 
# 106
{int volatile ___ = 1;(void)t;(void)x;
# 110
::exit(___);}
#if 0
# 106
{ 
# 107
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 109
return make_char1(v.x); 
# 110
} 
#endif
# 112 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x) 
# 113
{int volatile ___ = 1;(void)t;(void)x;
# 117
::exit(___);}
#if 0
# 113
{ 
# 114
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 116
return make_uchar1(v.x); 
# 117
} 
#endif
# 119 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x) 
# 120
{int volatile ___ = 1;(void)t;(void)x;
# 124
::exit(___);}
#if 0
# 120
{ 
# 121
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 123
return make_char2(v.x, v.y); 
# 124
} 
#endif
# 126 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x) 
# 127
{int volatile ___ = 1;(void)t;(void)x;
# 131
::exit(___);}
#if 0
# 127
{ 
# 128
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 130
return make_uchar2(v.x, v.y); 
# 131
} 
#endif
# 133 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x) 
# 134
{int volatile ___ = 1;(void)t;(void)x;
# 138
::exit(___);}
#if 0
# 134
{ 
# 135
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 137
return make_char4(v.x, v.y, v.z, v.w); 
# 138
} 
#endif
# 140 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x) 
# 141
{int volatile ___ = 1;(void)t;(void)x;
# 145
::exit(___);}
#if 0
# 141
{ 
# 142
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 144
return make_uchar4(v.x, v.y, v.z, v.w); 
# 145
} 
#endif
# 153 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x) 
# 154
{int volatile ___ = 1;(void)t;(void)x;
# 158
::exit(___);}
#if 0
# 154
{ 
# 155
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 157
return (short)(v.x); 
# 158
} 
#endif
# 160 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x) 
# 161
{int volatile ___ = 1;(void)t;(void)x;
# 165
::exit(___);}
#if 0
# 161
{ 
# 162
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 164
return (unsigned short)(v.x); 
# 165
} 
#endif
# 167 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x) 
# 168
{int volatile ___ = 1;(void)t;(void)x;
# 172
::exit(___);}
#if 0
# 168
{ 
# 169
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 171
return make_short1(v.x); 
# 172
} 
#endif
# 174 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x) 
# 175
{int volatile ___ = 1;(void)t;(void)x;
# 179
::exit(___);}
#if 0
# 175
{ 
# 176
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 178
return make_ushort1(v.x); 
# 179
} 
#endif
# 181 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x) 
# 182
{int volatile ___ = 1;(void)t;(void)x;
# 186
::exit(___);}
#if 0
# 182
{ 
# 183
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 185
return make_short2(v.x, v.y); 
# 186
} 
#endif
# 188 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x) 
# 189
{int volatile ___ = 1;(void)t;(void)x;
# 193
::exit(___);}
#if 0
# 189
{ 
# 190
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 192
return make_ushort2(v.x, v.y); 
# 193
} 
#endif
# 195 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x) 
# 196
{int volatile ___ = 1;(void)t;(void)x;
# 200
::exit(___);}
#if 0
# 196
{ 
# 197
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 199
return make_short4(v.x, v.y, v.z, v.w); 
# 200
} 
#endif
# 202 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x) 
# 203
{int volatile ___ = 1;(void)t;(void)x;
# 207
::exit(___);}
#if 0
# 203
{ 
# 204
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 206
return make_ushort4(v.x, v.y, v.z, v.w); 
# 207
} 
#endif
# 215 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x) 
# 216
{int volatile ___ = 1;(void)t;(void)x;
# 220
::exit(___);}
#if 0
# 216
{ 
# 217
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 219
return (int)(v.x); 
# 220
} 
#endif
# 222 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x) 
# 223
{int volatile ___ = 1;(void)t;(void)x;
# 227
::exit(___);}
#if 0
# 223
{ 
# 224
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 226
return (unsigned)(v.x); 
# 227
} 
#endif
# 229 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x) 
# 230
{int volatile ___ = 1;(void)t;(void)x;
# 234
::exit(___);}
#if 0
# 230
{ 
# 231
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 233
return make_int1(v.x); 
# 234
} 
#endif
# 236 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x) 
# 237
{int volatile ___ = 1;(void)t;(void)x;
# 241
::exit(___);}
#if 0
# 237
{ 
# 238
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 240
return make_uint1(v.x); 
# 241
} 
#endif
# 243 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x) 
# 244
{int volatile ___ = 1;(void)t;(void)x;
# 248
::exit(___);}
#if 0
# 244
{ 
# 245
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 247
return make_int2(v.x, v.y); 
# 248
} 
#endif
# 250 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x) 
# 251
{int volatile ___ = 1;(void)t;(void)x;
# 255
::exit(___);}
#if 0
# 251
{ 
# 252
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 254
return make_uint2(v.x, v.y); 
# 255
} 
#endif
# 257 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x) 
# 258
{int volatile ___ = 1;(void)t;(void)x;
# 262
::exit(___);}
#if 0
# 258
{ 
# 259
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 261
return make_int4(v.x, v.y, v.z, v.w); 
# 262
} 
#endif
# 264 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x) 
# 265
{int volatile ___ = 1;(void)t;(void)x;
# 269
::exit(___);}
#if 0
# 265
{ 
# 266
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 268
return make_uint4(v.x, v.y, v.z, v.w); 
# 269
} 
#endif
# 343 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x) 
# 344
{int volatile ___ = 1;(void)t;(void)x;
# 348
::exit(___);}
#if 0
# 344
{ 
# 345
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 347
return v.x; 
# 348
} 
#endif
# 350 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x) 
# 351
{int volatile ___ = 1;(void)t;(void)x;
# 355
::exit(___);}
#if 0
# 351
{ 
# 352
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 354
return make_float1(v.x); 
# 355
} 
#endif
# 357 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x) 
# 358
{int volatile ___ = 1;(void)t;(void)x;
# 362
::exit(___);}
#if 0
# 358
{ 
# 359
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 361
return make_float2(v.x, v.y); 
# 362
} 
#endif
# 364 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x) 
# 365
{int volatile ___ = 1;(void)t;(void)x;
# 369
::exit(___);}
#if 0
# 365
{ 
# 366
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 368
return make_float4(v.x, v.y, v.z, v.w); 
# 369
} 
#endif
# 377 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 378
{int volatile ___ = 1;(void)t;(void)x;
# 387
::exit(___);}
#if 0
# 378
{ 
# 382
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 384
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 386
return w.x; 
# 387
} 
#endif
# 389 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 390
{int volatile ___ = 1;(void)t;(void)x;
# 395
::exit(___);}
#if 0
# 390
{ 
# 391
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 392
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 394
return w.x; 
# 395
} 
#endif
# 397 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 398
{int volatile ___ = 1;(void)t;(void)x;
# 403
::exit(___);}
#if 0
# 398
{ 
# 399
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 400
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 402
return w.x; 
# 403
} 
#endif
# 405 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 406
{int volatile ___ = 1;(void)t;(void)x;
# 411
::exit(___);}
#if 0
# 406
{ 
# 407
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 408
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 410
return make_float1(w.x); 
# 411
} 
#endif
# 413 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 414
{int volatile ___ = 1;(void)t;(void)x;
# 419
::exit(___);}
#if 0
# 414
{ 
# 415
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 416
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 418
return make_float1(w.x); 
# 419
} 
#endif
# 421 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 422
{int volatile ___ = 1;(void)t;(void)x;
# 427
::exit(___);}
#if 0
# 422
{ 
# 423
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 424
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 426
return make_float2(w.x, w.y); 
# 427
} 
#endif
# 429 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 430
{int volatile ___ = 1;(void)t;(void)x;
# 435
::exit(___);}
#if 0
# 430
{ 
# 431
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 432
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 434
return make_float2(w.x, w.y); 
# 435
} 
#endif
# 437 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 438
{int volatile ___ = 1;(void)t;(void)x;
# 443
::exit(___);}
#if 0
# 438
{ 
# 439
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 440
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 442
return make_float4(w.x, w.y, w.z, w.w); 
# 443
} 
#endif
# 445 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 446
{int volatile ___ = 1;(void)t;(void)x;
# 451
::exit(___);}
#if 0
# 446
{ 
# 447
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 448
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 450
return make_float4(w.x, w.y, w.z, w.w); 
# 451
} 
#endif
# 459 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 460
{int volatile ___ = 1;(void)t;(void)x;
# 465
::exit(___);}
#if 0
# 460
{ 
# 461
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 462
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 464
return w.x; 
# 465
} 
#endif
# 467 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 468
{int volatile ___ = 1;(void)t;(void)x;
# 473
::exit(___);}
#if 0
# 468
{ 
# 469
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 470
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 472
return w.x; 
# 473
} 
#endif
# 475 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 476
{int volatile ___ = 1;(void)t;(void)x;
# 481
::exit(___);}
#if 0
# 476
{ 
# 477
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 478
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 480
return make_float1(w.x); 
# 481
} 
#endif
# 483 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 484
{int volatile ___ = 1;(void)t;(void)x;
# 489
::exit(___);}
#if 0
# 484
{ 
# 485
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 486
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 488
return make_float1(w.x); 
# 489
} 
#endif
# 491 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 492
{int volatile ___ = 1;(void)t;(void)x;
# 497
::exit(___);}
#if 0
# 492
{ 
# 493
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 494
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 496
return make_float2(w.x, w.y); 
# 497
} 
#endif
# 499 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 500
{int volatile ___ = 1;(void)t;(void)x;
# 505
::exit(___);}
#if 0
# 500
{ 
# 501
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 502
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 504
return make_float2(w.x, w.y); 
# 505
} 
#endif
# 507 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 508
{int volatile ___ = 1;(void)t;(void)x;
# 513
::exit(___);}
#if 0
# 508
{ 
# 509
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 510
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 512
return make_float4(w.x, w.y, w.z, w.w); 
# 513
} 
#endif
# 515 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 516
{int volatile ___ = 1;(void)t;(void)x;
# 521
::exit(___);}
#if 0
# 516
{ 
# 517
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 518
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 520
return make_float4(w.x, w.y, w.z, w.w); 
# 521
} 
#endif
# 529 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x) 
# 530
{int volatile ___ = 1;(void)t;(void)x;
# 538
::exit(___);}
#if 0
# 530
{ 
# 534
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 537
return (char)(v.x); 
# 538
} 
#endif
# 540 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x) 
# 541
{int volatile ___ = 1;(void)t;(void)x;
# 545
::exit(___);}
#if 0
# 541
{ 
# 542
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 544
return (signed char)(v.x); 
# 545
} 
#endif
# 547 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x) 
# 548
{int volatile ___ = 1;(void)t;(void)x;
# 552
::exit(___);}
#if 0
# 548
{ 
# 549
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 551
return (unsigned char)(v.x); 
# 552
} 
#endif
# 554 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x) 
# 555
{int volatile ___ = 1;(void)t;(void)x;
# 559
::exit(___);}
#if 0
# 555
{ 
# 556
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 558
return make_char1(v.x); 
# 559
} 
#endif
# 561 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x) 
# 562
{int volatile ___ = 1;(void)t;(void)x;
# 566
::exit(___);}
#if 0
# 562
{ 
# 563
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 565
return make_uchar1(v.x); 
# 566
} 
#endif
# 568 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x) 
# 569
{int volatile ___ = 1;(void)t;(void)x;
# 573
::exit(___);}
#if 0
# 569
{ 
# 570
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 572
return make_char2(v.x, v.y); 
# 573
} 
#endif
# 575 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x) 
# 576
{int volatile ___ = 1;(void)t;(void)x;
# 580
::exit(___);}
#if 0
# 576
{ 
# 577
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 579
return make_uchar2(v.x, v.y); 
# 580
} 
#endif
# 582 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x) 
# 583
{int volatile ___ = 1;(void)t;(void)x;
# 587
::exit(___);}
#if 0
# 583
{ 
# 584
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 586
return make_char4(v.x, v.y, v.z, v.w); 
# 587
} 
#endif
# 589 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x) 
# 590
{int volatile ___ = 1;(void)t;(void)x;
# 594
::exit(___);}
#if 0
# 590
{ 
# 591
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 593
return make_uchar4(v.x, v.y, v.z, v.w); 
# 594
} 
#endif
# 602 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x) 
# 603
{int volatile ___ = 1;(void)t;(void)x;
# 607
::exit(___);}
#if 0
# 603
{ 
# 604
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 606
return (short)(v.x); 
# 607
} 
#endif
# 609 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x) 
# 610
{int volatile ___ = 1;(void)t;(void)x;
# 614
::exit(___);}
#if 0
# 610
{ 
# 611
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 613
return (unsigned short)(v.x); 
# 614
} 
#endif
# 616 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x) 
# 617
{int volatile ___ = 1;(void)t;(void)x;
# 621
::exit(___);}
#if 0
# 617
{ 
# 618
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 620
return make_short1(v.x); 
# 621
} 
#endif
# 623 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x) 
# 624
{int volatile ___ = 1;(void)t;(void)x;
# 628
::exit(___);}
#if 0
# 624
{ 
# 625
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 627
return make_ushort1(v.x); 
# 628
} 
#endif
# 630 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x) 
# 631
{int volatile ___ = 1;(void)t;(void)x;
# 635
::exit(___);}
#if 0
# 631
{ 
# 632
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 634
return make_short2(v.x, v.y); 
# 635
} 
#endif
# 637 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x) 
# 638
{int volatile ___ = 1;(void)t;(void)x;
# 642
::exit(___);}
#if 0
# 638
{ 
# 639
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 641
return make_ushort2(v.x, v.y); 
# 642
} 
#endif
# 644 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x) 
# 645
{int volatile ___ = 1;(void)t;(void)x;
# 649
::exit(___);}
#if 0
# 645
{ 
# 646
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 648
return make_short4(v.x, v.y, v.z, v.w); 
# 649
} 
#endif
# 651 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x) 
# 652
{int volatile ___ = 1;(void)t;(void)x;
# 656
::exit(___);}
#if 0
# 652
{ 
# 653
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 655
return make_ushort4(v.x, v.y, v.z, v.w); 
# 656
} 
#endif
# 664 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x) 
# 665
{int volatile ___ = 1;(void)t;(void)x;
# 669
::exit(___);}
#if 0
# 665
{ 
# 666
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 668
return (int)(v.x); 
# 669
} 
#endif
# 671 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x) 
# 672
{int volatile ___ = 1;(void)t;(void)x;
# 676
::exit(___);}
#if 0
# 672
{ 
# 673
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 675
return (unsigned)(v.x); 
# 676
} 
#endif
# 678 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x) 
# 679
{int volatile ___ = 1;(void)t;(void)x;
# 683
::exit(___);}
#if 0
# 679
{ 
# 680
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 682
return make_int1(v.x); 
# 683
} 
#endif
# 685 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x) 
# 686
{int volatile ___ = 1;(void)t;(void)x;
# 690
::exit(___);}
#if 0
# 686
{ 
# 687
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 689
return make_uint1(v.x); 
# 690
} 
#endif
# 692 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x) 
# 693
{int volatile ___ = 1;(void)t;(void)x;
# 697
::exit(___);}
#if 0
# 693
{ 
# 694
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 696
return make_int2(v.x, v.y); 
# 697
} 
#endif
# 699 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x) 
# 700
{int volatile ___ = 1;(void)t;(void)x;
# 704
::exit(___);}
#if 0
# 700
{ 
# 701
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 703
return make_uint2(v.x, v.y); 
# 704
} 
#endif
# 706 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x) 
# 707
{int volatile ___ = 1;(void)t;(void)x;
# 711
::exit(___);}
#if 0
# 707
{ 
# 708
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 710
return make_int4(v.x, v.y, v.z, v.w); 
# 711
} 
#endif
# 713 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x) 
# 714
{int volatile ___ = 1;(void)t;(void)x;
# 718
::exit(___);}
#if 0
# 714
{ 
# 715
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 717
return make_uint4(v.x, v.y, v.z, v.w); 
# 718
} 
#endif
# 798 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x) 
# 799
{int volatile ___ = 1;(void)t;(void)x;
# 803
::exit(___);}
#if 0
# 799
{ 
# 800
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 802
return v.x; 
# 803
} 
#endif
# 805 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x) 
# 806
{int volatile ___ = 1;(void)t;(void)x;
# 810
::exit(___);}
#if 0
# 806
{ 
# 807
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 809
return make_float1(v.x); 
# 810
} 
#endif
# 812 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x) 
# 813
{int volatile ___ = 1;(void)t;(void)x;
# 817
::exit(___);}
#if 0
# 813
{ 
# 814
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 816
return make_float2(v.x, v.y); 
# 817
} 
#endif
# 819 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x) 
# 820
{int volatile ___ = 1;(void)t;(void)x;
# 824
::exit(___);}
#if 0
# 820
{ 
# 821
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 823
return make_float4(v.x, v.y, v.z, v.w); 
# 824
} 
#endif
# 832 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 833
{int volatile ___ = 1;(void)t;(void)x;
# 842
::exit(___);}
#if 0
# 833
{ 
# 837
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 839
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 841
return w.x; 
# 842
} 
#endif
# 844 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 845
{int volatile ___ = 1;(void)t;(void)x;
# 850
::exit(___);}
#if 0
# 845
{ 
# 846
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 849
return w.x; 
# 850
} 
#endif
# 852 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 853
{int volatile ___ = 1;(void)t;(void)x;
# 858
::exit(___);}
#if 0
# 853
{ 
# 854
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 857
return w.x; 
# 858
} 
#endif
# 860 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 861
{int volatile ___ = 1;(void)t;(void)x;
# 866
::exit(___);}
#if 0
# 861
{ 
# 862
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 865
return make_float1(w.x); 
# 866
} 
#endif
# 868 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 869
{int volatile ___ = 1;(void)t;(void)x;
# 874
::exit(___);}
#if 0
# 869
{ 
# 870
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 873
return make_float1(w.x); 
# 874
} 
#endif
# 876 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 877
{int volatile ___ = 1;(void)t;(void)x;
# 882
::exit(___);}
#if 0
# 877
{ 
# 878
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 881
return make_float2(w.x, w.y); 
# 882
} 
#endif
# 884 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 885
{int volatile ___ = 1;(void)t;(void)x;
# 890
::exit(___);}
#if 0
# 885
{ 
# 886
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 889
return make_float2(w.x, w.y); 
# 890
} 
#endif
# 892 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 893
{int volatile ___ = 1;(void)t;(void)x;
# 898
::exit(___);}
#if 0
# 893
{ 
# 894
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 895
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 897
return make_float4(w.x, w.y, w.z, w.w); 
# 898
} 
#endif
# 900 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 901
{int volatile ___ = 1;(void)t;(void)x;
# 906
::exit(___);}
#if 0
# 901
{ 
# 902
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 903
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 905
return make_float4(w.x, w.y, w.z, w.w); 
# 906
} 
#endif
# 914 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 915
{int volatile ___ = 1;(void)t;(void)x;
# 920
::exit(___);}
#if 0
# 915
{ 
# 916
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 917
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 919
return w.x; 
# 920
} 
#endif
# 922 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 923
{int volatile ___ = 1;(void)t;(void)x;
# 928
::exit(___);}
#if 0
# 923
{ 
# 924
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 925
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 927
return w.x; 
# 928
} 
#endif
# 930 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 931
{int volatile ___ = 1;(void)t;(void)x;
# 936
::exit(___);}
#if 0
# 931
{ 
# 932
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 933
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 935
return make_float1(w.x); 
# 936
} 
#endif
# 938 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 939
{int volatile ___ = 1;(void)t;(void)x;
# 944
::exit(___);}
#if 0
# 939
{ 
# 940
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 941
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 943
return make_float1(w.x); 
# 944
} 
#endif
# 946 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 947
{int volatile ___ = 1;(void)t;(void)x;
# 952
::exit(___);}
#if 0
# 947
{ 
# 948
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 949
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 951
return make_float2(w.x, w.y); 
# 952
} 
#endif
# 954 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 955
{int volatile ___ = 1;(void)t;(void)x;
# 960
::exit(___);}
#if 0
# 955
{ 
# 956
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 957
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 959
return make_float2(w.x, w.y); 
# 960
} 
#endif
# 962 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 963
{int volatile ___ = 1;(void)t;(void)x;
# 968
::exit(___);}
#if 0
# 963
{ 
# 964
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 965
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 967
return make_float4(w.x, w.y, w.z, w.w); 
# 968
} 
#endif
# 970 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 971
{int volatile ___ = 1;(void)t;(void)x;
# 976
::exit(___);}
#if 0
# 971
{ 
# 972
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 973
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 975
return make_float4(w.x, w.y, w.z, w.w); 
# 976
} 
#endif
# 984 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y) 
# 985
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 993
::exit(___);}
#if 0
# 985
{ 
# 989
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 992
return (char)(v.x); 
# 993
} 
#endif
# 995 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y) 
# 996
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1000
::exit(___);}
#if 0
# 996
{ 
# 997
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 999
return (signed char)(v.x); 
# 1000
} 
#endif
# 1002 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1003
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1007
::exit(___);}
#if 0
# 1003
{ 
# 1004
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1006
return (unsigned char)(v.x); 
# 1007
} 
#endif
# 1009 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1010
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1014
::exit(___);}
#if 0
# 1010
{ 
# 1011
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1013
return make_char1(v.x); 
# 1014
} 
#endif
# 1016 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1017
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1021
::exit(___);}
#if 0
# 1017
{ 
# 1018
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1020
return make_uchar1(v.x); 
# 1021
} 
#endif
# 1023 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1024
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1028
::exit(___);}
#if 0
# 1024
{ 
# 1025
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1027
return make_char2(v.x, v.y); 
# 1028
} 
#endif
# 1030 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1031
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1035
::exit(___);}
#if 0
# 1031
{ 
# 1032
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1034
return make_uchar2(v.x, v.y); 
# 1035
} 
#endif
# 1037 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1038
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1042
::exit(___);}
#if 0
# 1038
{ 
# 1039
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1041
return make_char4(v.x, v.y, v.z, v.w); 
# 1042
} 
#endif
# 1044 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1045
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1049
::exit(___);}
#if 0
# 1045
{ 
# 1046
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1048
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1049
} 
#endif
# 1057 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1058
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1062
::exit(___);}
#if 0
# 1058
{ 
# 1059
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1061
return (short)(v.x); 
# 1062
} 
#endif
# 1064 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1065
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1069
::exit(___);}
#if 0
# 1065
{ 
# 1066
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1068
return (unsigned short)(v.x); 
# 1069
} 
#endif
# 1071 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1072
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1076
::exit(___);}
#if 0
# 1072
{ 
# 1073
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1075
return make_short1(v.x); 
# 1076
} 
#endif
# 1078 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1079
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1083
::exit(___);}
#if 0
# 1079
{ 
# 1080
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1082
return make_ushort1(v.x); 
# 1083
} 
#endif
# 1085 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1086
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1090
::exit(___);}
#if 0
# 1086
{ 
# 1087
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1089
return make_short2(v.x, v.y); 
# 1090
} 
#endif
# 1092 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1093
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1097
::exit(___);}
#if 0
# 1093
{ 
# 1094
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1096
return make_ushort2(v.x, v.y); 
# 1097
} 
#endif
# 1099 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1100
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1104
::exit(___);}
#if 0
# 1100
{ 
# 1101
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1103
return make_short4(v.x, v.y, v.z, v.w); 
# 1104
} 
#endif
# 1106 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1107
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1111
::exit(___);}
#if 0
# 1107
{ 
# 1108
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1110
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1111
} 
#endif
# 1119 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y) 
# 1120
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1124
::exit(___);}
#if 0
# 1120
{ 
# 1121
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1123
return (int)(v.x); 
# 1124
} 
#endif
# 1126 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y) 
# 1127
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1131
::exit(___);}
#if 0
# 1127
{ 
# 1128
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1130
return (unsigned)(v.x); 
# 1131
} 
#endif
# 1133 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1134
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1138
::exit(___);}
#if 0
# 1134
{ 
# 1135
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1137
return make_int1(v.x); 
# 1138
} 
#endif
# 1140 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1141
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1145
::exit(___);}
#if 0
# 1141
{ 
# 1142
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1144
return make_uint1(v.x); 
# 1145
} 
#endif
# 1147 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1148
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1152
::exit(___);}
#if 0
# 1148
{ 
# 1149
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1151
return make_int2(v.x, v.y); 
# 1152
} 
#endif
# 1154 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1155
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1159
::exit(___);}
#if 0
# 1155
{ 
# 1156
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1158
return make_uint2(v.x, v.y); 
# 1159
} 
#endif
# 1161 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1162
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1166
::exit(___);}
#if 0
# 1162
{ 
# 1163
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1165
return make_int4(v.x, v.y, v.z, v.w); 
# 1166
} 
#endif
# 1168 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1169
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1173
::exit(___);}
#if 0
# 1169
{ 
# 1170
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1172
return make_uint4(v.x, v.y, v.z, v.w); 
# 1173
} 
#endif
# 1247 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y) 
# 1248
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1252
::exit(___);}
#if 0
# 1248
{ 
# 1249
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1251
return v.x; 
# 1252
} 
#endif
# 1254 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1255
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1259
::exit(___);}
#if 0
# 1255
{ 
# 1256
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1258
return make_float1(v.x); 
# 1259
} 
#endif
# 1261 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1262
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1266
::exit(___);}
#if 0
# 1262
{ 
# 1263
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1265
return make_float2(v.x, v.y); 
# 1266
} 
#endif
# 1268 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1269
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1273
::exit(___);}
#if 0
# 1269
{ 
# 1270
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1272
return make_float4(v.x, v.y, v.z, v.w); 
# 1273
} 
#endif
# 1281 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1282
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1291
::exit(___);}
#if 0
# 1282
{ 
# 1286
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1288
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1290
return w.x; 
# 1291
} 
#endif
# 1293 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1294
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1299
::exit(___);}
#if 0
# 1294
{ 
# 1295
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1298
return w.x; 
# 1299
} 
#endif
# 1301 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1302
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1307
::exit(___);}
#if 0
# 1302
{ 
# 1303
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1306
return w.x; 
# 1307
} 
#endif
# 1309 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1310
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1315
::exit(___);}
#if 0
# 1310
{ 
# 1311
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1314
return make_float1(w.x); 
# 1315
} 
#endif
# 1317 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1318
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1323
::exit(___);}
#if 0
# 1318
{ 
# 1319
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1322
return make_float1(w.x); 
# 1323
} 
#endif
# 1325 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1326
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1331
::exit(___);}
#if 0
# 1326
{ 
# 1327
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1330
return make_float2(w.x, w.y); 
# 1331
} 
#endif
# 1333 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1334
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1339
::exit(___);}
#if 0
# 1334
{ 
# 1335
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1338
return make_float2(w.x, w.y); 
# 1339
} 
#endif
# 1341 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1342
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1347
::exit(___);}
#if 0
# 1342
{ 
# 1343
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1344
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1346
return make_float4(w.x, w.y, w.z, w.w); 
# 1347
} 
#endif
# 1349 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1350
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1355
::exit(___);}
#if 0
# 1350
{ 
# 1351
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1352
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1354
return make_float4(w.x, w.y, w.z, w.w); 
# 1355
} 
#endif
# 1363 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1364
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1369
::exit(___);}
#if 0
# 1364
{ 
# 1365
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1366
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1368
return w.x; 
# 1369
} 
#endif
# 1371 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1372
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1377
::exit(___);}
#if 0
# 1372
{ 
# 1373
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1374
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1376
return w.x; 
# 1377
} 
#endif
# 1379 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1380
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1385
::exit(___);}
#if 0
# 1380
{ 
# 1381
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1382
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1384
return make_float1(w.x); 
# 1385
} 
#endif
# 1387 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1388
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1393
::exit(___);}
#if 0
# 1388
{ 
# 1389
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1390
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1392
return make_float1(w.x); 
# 1393
} 
#endif
# 1395 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1396
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1401
::exit(___);}
#if 0
# 1396
{ 
# 1397
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1398
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1400
return make_float2(w.x, w.y); 
# 1401
} 
#endif
# 1403 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1404
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1409
::exit(___);}
#if 0
# 1404
{ 
# 1405
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1406
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1408
return make_float2(w.x, w.y); 
# 1409
} 
#endif
# 1411 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1412
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1417
::exit(___);}
#if 0
# 1412
{ 
# 1413
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1414
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1416
return make_float4(w.x, w.y, w.z, w.w); 
# 1417
} 
#endif
# 1419 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1420
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1425
::exit(___);}
#if 0
# 1420
{ 
# 1421
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1422
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1424
return make_float4(w.x, w.y, w.z, w.w); 
# 1425
} 
#endif
# 1433 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1434
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1442
::exit(___);}
#if 0
# 1434
{ 
# 1438
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1441
return (char)(v.x); 
# 1442
} 
#endif
# 1444 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1445
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1449
::exit(___);}
#if 0
# 1445
{ 
# 1446
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1448
return (signed char)(v.x); 
# 1449
} 
#endif
# 1451 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1452
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1456
::exit(___);}
#if 0
# 1452
{ 
# 1453
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1455
return (unsigned char)(v.x); 
# 1456
} 
#endif
# 1458 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1459
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1463
::exit(___);}
#if 0
# 1459
{ 
# 1460
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1462
return make_char1(v.x); 
# 1463
} 
#endif
# 1465 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1466
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1470
::exit(___);}
#if 0
# 1466
{ 
# 1467
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1469
return make_uchar1(v.x); 
# 1470
} 
#endif
# 1472 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1473
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1477
::exit(___);}
#if 0
# 1473
{ 
# 1474
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1476
return make_char2(v.x, v.y); 
# 1477
} 
#endif
# 1479 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1480
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1484
::exit(___);}
#if 0
# 1480
{ 
# 1481
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1483
return make_uchar2(v.x, v.y); 
# 1484
} 
#endif
# 1486 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1487
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1491
::exit(___);}
#if 0
# 1487
{ 
# 1488
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1490
return make_char4(v.x, v.y, v.z, v.w); 
# 1491
} 
#endif
# 1493 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1494
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1498
::exit(___);}
#if 0
# 1494
{ 
# 1495
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1497
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1498
} 
#endif
# 1506 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1507
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1511
::exit(___);}
#if 0
# 1507
{ 
# 1508
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1510
return (short)(v.x); 
# 1511
} 
#endif
# 1513 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1514
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1518
::exit(___);}
#if 0
# 1514
{ 
# 1515
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1517
return (unsigned short)(v.x); 
# 1518
} 
#endif
# 1520 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1521
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1525
::exit(___);}
#if 0
# 1521
{ 
# 1522
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1524
return make_short1(v.x); 
# 1525
} 
#endif
# 1527 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1528
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1532
::exit(___);}
#if 0
# 1528
{ 
# 1529
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1531
return make_ushort1(v.x); 
# 1532
} 
#endif
# 1534 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1535
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1539
::exit(___);}
#if 0
# 1535
{ 
# 1536
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1538
return make_short2(v.x, v.y); 
# 1539
} 
#endif
# 1541 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1542
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1546
::exit(___);}
#if 0
# 1542
{ 
# 1543
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1545
return make_ushort2(v.x, v.y); 
# 1546
} 
#endif
# 1548 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1549
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1553
::exit(___);}
#if 0
# 1549
{ 
# 1550
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1552
return make_short4(v.x, v.y, v.z, v.w); 
# 1553
} 
#endif
# 1555 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1556
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1560
::exit(___);}
#if 0
# 1556
{ 
# 1557
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1559
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1560
} 
#endif
# 1568 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1569
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1573
::exit(___);}
#if 0
# 1569
{ 
# 1570
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1572
return (int)(v.x); 
# 1573
} 
#endif
# 1575 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1576
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1580
::exit(___);}
#if 0
# 1576
{ 
# 1577
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1579
return (unsigned)(v.x); 
# 1580
} 
#endif
# 1582 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1583
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1587
::exit(___);}
#if 0
# 1583
{ 
# 1584
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1586
return make_int1(v.x); 
# 1587
} 
#endif
# 1589 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1590
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1594
::exit(___);}
#if 0
# 1590
{ 
# 1591
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1593
return make_uint1(v.x); 
# 1594
} 
#endif
# 1596 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1597
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1601
::exit(___);}
#if 0
# 1597
{ 
# 1598
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1600
return make_int2(v.x, v.y); 
# 1601
} 
#endif
# 1603 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1604
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1608
::exit(___);}
#if 0
# 1604
{ 
# 1605
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1607
return make_uint2(v.x, v.y); 
# 1608
} 
#endif
# 1610 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1611
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1615
::exit(___);}
#if 0
# 1611
{ 
# 1612
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1614
return make_int4(v.x, v.y, v.z, v.w); 
# 1615
} 
#endif
# 1617 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1618
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1622
::exit(___);}
#if 0
# 1618
{ 
# 1619
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1621
return make_uint4(v.x, v.y, v.z, v.w); 
# 1622
} 
#endif
# 1696 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1697
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1701
::exit(___);}
#if 0
# 1697
{ 
# 1698
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1700
return v.x; 
# 1701
} 
#endif
# 1703 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1704
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1708
::exit(___);}
#if 0
# 1704
{ 
# 1705
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1707
return make_float1(v.x); 
# 1708
} 
#endif
# 1710 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1711
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1715
::exit(___);}
#if 0
# 1711
{ 
# 1712
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1714
return make_float2(v.x, v.y); 
# 1715
} 
#endif
# 1717 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1718
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1722
::exit(___);}
#if 0
# 1718
{ 
# 1719
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1721
return make_float4(v.x, v.y, v.z, v.w); 
# 1722
} 
#endif
# 1730 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1731
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1740
::exit(___);}
#if 0
# 1731
{ 
# 1735
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1737
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1739
return w.x; 
# 1740
} 
#endif
# 1742 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1743
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1748
::exit(___);}
#if 0
# 1743
{ 
# 1744
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1747
return w.x; 
# 1748
} 
#endif
# 1750 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1751
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1756
::exit(___);}
#if 0
# 1751
{ 
# 1752
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1755
return w.x; 
# 1756
} 
#endif
# 1758 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1759
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1764
::exit(___);}
#if 0
# 1759
{ 
# 1760
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1763
return make_float1(w.x); 
# 1764
} 
#endif
# 1766 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1767
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1772
::exit(___);}
#if 0
# 1767
{ 
# 1768
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1771
return make_float1(w.x); 
# 1772
} 
#endif
# 1774 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1775
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1780
::exit(___);}
#if 0
# 1775
{ 
# 1776
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1779
return make_float2(w.x, w.y); 
# 1780
} 
#endif
# 1782 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1783
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1788
::exit(___);}
#if 0
# 1783
{ 
# 1784
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1787
return make_float2(w.x, w.y); 
# 1788
} 
#endif
# 1790 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1791
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1796
::exit(___);}
#if 0
# 1791
{ 
# 1792
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1793
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1795
return make_float4(w.x, w.y, w.z, w.w); 
# 1796
} 
#endif
# 1798 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1799
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1804
::exit(___);}
#if 0
# 1799
{ 
# 1800
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1801
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1803
return make_float4(w.x, w.y, w.z, w.w); 
# 1804
} 
#endif
# 1812 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1813
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1818
::exit(___);}
#if 0
# 1813
{ 
# 1814
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1815
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1817
return w.x; 
# 1818
} 
#endif
# 1820 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1821
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1826
::exit(___);}
#if 0
# 1821
{ 
# 1822
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1823
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1825
return w.x; 
# 1826
} 
#endif
# 1828 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1829
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1834
::exit(___);}
#if 0
# 1829
{ 
# 1830
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1831
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1833
return make_float1(w.x); 
# 1834
} 
#endif
# 1836 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1837
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1842
::exit(___);}
#if 0
# 1837
{ 
# 1838
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1839
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1841
return make_float1(w.x); 
# 1842
} 
#endif
# 1844 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1845
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1850
::exit(___);}
#if 0
# 1845
{ 
# 1846
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1849
return make_float2(w.x, w.y); 
# 1850
} 
#endif
# 1852 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1853
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1858
::exit(___);}
#if 0
# 1853
{ 
# 1854
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1857
return make_float2(w.x, w.y); 
# 1858
} 
#endif
# 1860 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1861
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1866
::exit(___);}
#if 0
# 1861
{ 
# 1862
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1865
return make_float4(w.x, w.y, w.z, w.w); 
# 1866
} 
#endif
# 1868 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1869
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1874
::exit(___);}
#if 0
# 1869
{ 
# 1870
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1873
return make_float4(w.x, w.y, w.z, w.w); 
# 1874
} 
#endif
# 1882 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1891
::exit(___);}
#if 0
# 1883
{ 
# 1887
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1890
return (char)(v.x); 
# 1891
} 
#endif
# 1893 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1894
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1898
::exit(___);}
#if 0
# 1894
{ 
# 1895
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1897
return (signed char)(v.x); 
# 1898
} 
#endif
# 1900 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1901
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1905
::exit(___);}
#if 0
# 1901
{ 
# 1902
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1904
return (unsigned char)(v.x); 
# 1905
} 
#endif
# 1907 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1908
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1912
::exit(___);}
#if 0
# 1908
{ 
# 1909
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1911
return make_char1(v.x); 
# 1912
} 
#endif
# 1914 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1915
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1919
::exit(___);}
#if 0
# 1915
{ 
# 1916
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1918
return make_uchar1(v.x); 
# 1919
} 
#endif
# 1921 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1926
::exit(___);}
#if 0
# 1922
{ 
# 1923
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1925
return make_char2(v.x, v.y); 
# 1926
} 
#endif
# 1928 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1929
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1933
::exit(___);}
#if 0
# 1929
{ 
# 1930
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1932
return make_uchar2(v.x, v.y); 
# 1933
} 
#endif
# 1935 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1936
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1940
::exit(___);}
#if 0
# 1936
{ 
# 1937
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1939
return make_char4(v.x, v.y, v.z, v.w); 
# 1940
} 
#endif
# 1942 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1943
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1947
::exit(___);}
#if 0
# 1943
{ 
# 1944
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1946
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1947
} 
#endif
# 1955 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1960
::exit(___);}
#if 0
# 1956
{ 
# 1957
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1959
return (short)(v.x); 
# 1960
} 
#endif
# 1962 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1963
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1967
::exit(___);}
#if 0
# 1963
{ 
# 1964
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1966
return (unsigned short)(v.x); 
# 1967
} 
#endif
# 1969 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1970
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1974
::exit(___);}
#if 0
# 1970
{ 
# 1971
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1973
return make_short1(v.x); 
# 1974
} 
#endif
# 1976 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1977
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1981
::exit(___);}
#if 0
# 1977
{ 
# 1978
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1980
return make_ushort1(v.x); 
# 1981
} 
#endif
# 1983 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1984
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1988
::exit(___);}
#if 0
# 1984
{ 
# 1985
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1987
return make_short2(v.x, v.y); 
# 1988
} 
#endif
# 1990 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1991
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1995
::exit(___);}
#if 0
# 1991
{ 
# 1992
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1994
return make_ushort2(v.x, v.y); 
# 1995
} 
#endif
# 1997 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1998
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2002
::exit(___);}
#if 0
# 1998
{ 
# 1999
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2001
return make_short4(v.x, v.y, v.z, v.w); 
# 2002
} 
#endif
# 2004 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2005
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2009
::exit(___);}
#if 0
# 2005
{ 
# 2006
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2008
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2009
} 
#endif
# 2017 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2018
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2022
::exit(___);}
#if 0
# 2018
{ 
# 2019
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2021
return (int)(v.x); 
# 2022
} 
#endif
# 2024 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2025
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2029
::exit(___);}
#if 0
# 2025
{ 
# 2026
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2028
return (unsigned)(v.x); 
# 2029
} 
#endif
# 2031 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2032
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2036
::exit(___);}
#if 0
# 2032
{ 
# 2033
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2035
return make_int1(v.x); 
# 2036
} 
#endif
# 2038 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2039
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2043
::exit(___);}
#if 0
# 2039
{ 
# 2040
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2042
return make_uint1(v.x); 
# 2043
} 
#endif
# 2045 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2046
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2050
::exit(___);}
#if 0
# 2046
{ 
# 2047
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2049
return make_int2(v.x, v.y); 
# 2050
} 
#endif
# 2052 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2053
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2057
::exit(___);}
#if 0
# 2053
{ 
# 2054
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2056
return make_uint2(v.x, v.y); 
# 2057
} 
#endif
# 2059 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2060
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2064
::exit(___);}
#if 0
# 2060
{ 
# 2061
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2063
return make_int4(v.x, v.y, v.z, v.w); 
# 2064
} 
#endif
# 2066 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2067
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2071
::exit(___);}
#if 0
# 2067
{ 
# 2068
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2070
return make_uint4(v.x, v.y, v.z, v.w); 
# 2071
} 
#endif
# 2145 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2150
::exit(___);}
#if 0
# 2146
{ 
# 2147
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2149
return v.x; 
# 2150
} 
#endif
# 2152 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2153
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2157
::exit(___);}
#if 0
# 2153
{ 
# 2154
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2156
return make_float1(v.x); 
# 2157
} 
#endif
# 2159 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2160
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2164
::exit(___);}
#if 0
# 2160
{ 
# 2161
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2163
return make_float2(v.x, v.y); 
# 2164
} 
#endif
# 2166 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2167
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2171
::exit(___);}
#if 0
# 2167
{ 
# 2168
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2170
return make_float4(v.x, v.y, v.z, v.w); 
# 2171
} 
#endif
# 2179 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2180
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2189
::exit(___);}
#if 0
# 2180
{ 
# 2184
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2186
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2188
return w.x; 
# 2189
} 
#endif
# 2191 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2197
::exit(___);}
#if 0
# 2192
{ 
# 2193
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2196
return w.x; 
# 2197
} 
#endif
# 2199 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2205
::exit(___);}
#if 0
# 2200
{ 
# 2201
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2204
return w.x; 
# 2205
} 
#endif
# 2207 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2213
::exit(___);}
#if 0
# 2208
{ 
# 2209
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2212
return make_float1(w.x); 
# 2213
} 
#endif
# 2215 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2221
::exit(___);}
#if 0
# 2216
{ 
# 2217
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2220
return make_float1(w.x); 
# 2221
} 
#endif
# 2223 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2229
::exit(___);}
#if 0
# 2224
{ 
# 2225
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2228
return make_float2(w.x, w.y); 
# 2229
} 
#endif
# 2231 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2237
::exit(___);}
#if 0
# 2232
{ 
# 2233
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2236
return make_float2(w.x, w.y); 
# 2237
} 
#endif
# 2239 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2245
::exit(___);}
#if 0
# 2240
{ 
# 2241
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2242
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2244
return make_float4(w.x, w.y, w.z, w.w); 
# 2245
} 
#endif
# 2247 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2253
::exit(___);}
#if 0
# 2248
{ 
# 2249
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2250
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2252
return make_float4(w.x, w.y, w.z, w.w); 
# 2253
} 
#endif
# 2261 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2267
::exit(___);}
#if 0
# 2262
{ 
# 2263
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2264
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2266
return w.x; 
# 2267
} 
#endif
# 2269 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2270
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2275
::exit(___);}
#if 0
# 2270
{ 
# 2271
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2272
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2274
return w.x; 
# 2275
} 
#endif
# 2277 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2283
::exit(___);}
#if 0
# 2278
{ 
# 2279
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2280
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2282
return make_float1(w.x); 
# 2283
} 
#endif
# 2285 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2286
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2291
::exit(___);}
#if 0
# 2286
{ 
# 2287
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2288
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2290
return make_float1(w.x); 
# 2291
} 
#endif
# 2293 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2299
::exit(___);}
#if 0
# 2294
{ 
# 2295
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2298
return make_float2(w.x, w.y); 
# 2299
} 
#endif
# 2301 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2302
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2307
::exit(___);}
#if 0
# 2302
{ 
# 2303
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2306
return make_float2(w.x, w.y); 
# 2307
} 
#endif
# 2309 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2315
::exit(___);}
#if 0
# 2310
{ 
# 2311
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2314
return make_float4(w.x, w.y, w.z, w.w); 
# 2315
} 
#endif
# 2317 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2318
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2323
::exit(___);}
#if 0
# 2318
{ 
# 2319
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2322
return make_float4(w.x, w.y, w.z, w.w); 
# 2323
} 
#endif
# 2331 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2332
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2340
::exit(___);}
#if 0
# 2332
{ 
# 2336
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2339
return (char)(v.x); 
# 2340
} 
#endif
# 2342 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2343
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2347
::exit(___);}
#if 0
# 2343
{ 
# 2344
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2346
return (signed char)(v.x); 
# 2347
} 
#endif
# 2349 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2350
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2354
::exit(___);}
#if 0
# 2350
{ 
# 2351
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2353
return (unsigned char)(v.x); 
# 2354
} 
#endif
# 2356 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2357
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2361
::exit(___);}
#if 0
# 2357
{ 
# 2358
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2360
return make_char1(v.x); 
# 2361
} 
#endif
# 2363 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2364
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2368
::exit(___);}
#if 0
# 2364
{ 
# 2365
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2367
return make_uchar1(v.x); 
# 2368
} 
#endif
# 2370 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2371
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2375
::exit(___);}
#if 0
# 2371
{ 
# 2372
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2374
return make_char2(v.x, v.y); 
# 2375
} 
#endif
# 2377 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2378
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2382
::exit(___);}
#if 0
# 2378
{ 
# 2379
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2381
return make_uchar2(v.x, v.y); 
# 2382
} 
#endif
# 2384 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2385
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2389
::exit(___);}
#if 0
# 2385
{ 
# 2386
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2388
return make_char4(v.x, v.y, v.z, v.w); 
# 2389
} 
#endif
# 2391 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2392
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2396
::exit(___);}
#if 0
# 2392
{ 
# 2393
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2395
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2396
} 
#endif
# 2404 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2405
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2409
::exit(___);}
#if 0
# 2405
{ 
# 2406
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2408
return (short)(v.x); 
# 2409
} 
#endif
# 2411 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2412
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2416
::exit(___);}
#if 0
# 2412
{ 
# 2413
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2415
return (unsigned short)(v.x); 
# 2416
} 
#endif
# 2418 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2419
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2423
::exit(___);}
#if 0
# 2419
{ 
# 2420
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2422
return make_short1(v.x); 
# 2423
} 
#endif
# 2425 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2426
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2430
::exit(___);}
#if 0
# 2426
{ 
# 2427
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2429
return make_ushort1(v.x); 
# 2430
} 
#endif
# 2432 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2433
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2437
::exit(___);}
#if 0
# 2433
{ 
# 2434
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2436
return make_short2(v.x, v.y); 
# 2437
} 
#endif
# 2439 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2440
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2444
::exit(___);}
#if 0
# 2440
{ 
# 2441
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2443
return make_ushort2(v.x, v.y); 
# 2444
} 
#endif
# 2446 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2447
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2451
::exit(___);}
#if 0
# 2447
{ 
# 2448
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2450
return make_short4(v.x, v.y, v.z, v.w); 
# 2451
} 
#endif
# 2453 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2454
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2458
::exit(___);}
#if 0
# 2454
{ 
# 2455
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2457
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2458
} 
#endif
# 2466 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2467
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2471
::exit(___);}
#if 0
# 2467
{ 
# 2468
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2470
return (int)(v.x); 
# 2471
} 
#endif
# 2473 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2474
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2478
::exit(___);}
#if 0
# 2474
{ 
# 2475
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2477
return (unsigned)(v.x); 
# 2478
} 
#endif
# 2480 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2481
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2485
::exit(___);}
#if 0
# 2481
{ 
# 2482
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2484
return make_int1(v.x); 
# 2485
} 
#endif
# 2487 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2488
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2492
::exit(___);}
#if 0
# 2488
{ 
# 2489
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2491
return make_uint1(v.x); 
# 2492
} 
#endif
# 2494 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2495
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2499
::exit(___);}
#if 0
# 2495
{ 
# 2496
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2498
return make_int2(v.x, v.y); 
# 2499
} 
#endif
# 2501 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2502
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2506
::exit(___);}
#if 0
# 2502
{ 
# 2503
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2505
return make_uint2(v.x, v.y); 
# 2506
} 
#endif
# 2508 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2513
::exit(___);}
#if 0
# 2509
{ 
# 2510
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2512
return make_int4(v.x, v.y, v.z, v.w); 
# 2513
} 
#endif
# 2515 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2520
::exit(___);}
#if 0
# 2516
{ 
# 2517
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2519
return make_uint4(v.x, v.y, v.z, v.w); 
# 2520
} 
#endif
# 2594 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2599
::exit(___);}
#if 0
# 2595
{ 
# 2596
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2598
return v.x; 
# 2599
} 
#endif
# 2601 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2602
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2606
::exit(___);}
#if 0
# 2602
{ 
# 2603
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2605
return make_float1(v.x); 
# 2606
} 
#endif
# 2608 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2609
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2613
::exit(___);}
#if 0
# 2609
{ 
# 2610
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2612
return make_float2(v.x, v.y); 
# 2613
} 
#endif
# 2615 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2616
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2620
::exit(___);}
#if 0
# 2616
{ 
# 2617
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2619
return make_float4(v.x, v.y, v.z, v.w); 
# 2620
} 
#endif
# 2628 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2629
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2638
::exit(___);}
#if 0
# 2629
{ 
# 2633
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2635
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2637
return w.x; 
# 2638
} 
#endif
# 2640 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2646
::exit(___);}
#if 0
# 2641
{ 
# 2642
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2645
return w.x; 
# 2646
} 
#endif
# 2648 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2654
::exit(___);}
#if 0
# 2649
{ 
# 2650
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2653
return w.x; 
# 2654
} 
#endif
# 2656 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2662
::exit(___);}
#if 0
# 2657
{ 
# 2658
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2661
return make_float1(w.x); 
# 2662
} 
#endif
# 2664 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2670
::exit(___);}
#if 0
# 2665
{ 
# 2666
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2669
return make_float1(w.x); 
# 2670
} 
#endif
# 2672 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2678
::exit(___);}
#if 0
# 2673
{ 
# 2674
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2677
return make_float2(w.x, w.y); 
# 2678
} 
#endif
# 2680 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2686
::exit(___);}
#if 0
# 2681
{ 
# 2682
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2685
return make_float2(w.x, w.y); 
# 2686
} 
#endif
# 2688 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2689
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2694
::exit(___);}
#if 0
# 2689
{ 
# 2690
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2691
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2693
return make_float4(w.x, w.y, w.z, w.w); 
# 2694
} 
#endif
# 2696 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2697
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2702
::exit(___);}
#if 0
# 2697
{ 
# 2698
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2699
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2701
return make_float4(w.x, w.y, w.z, w.w); 
# 2702
} 
#endif
# 2710 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2711
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2716
::exit(___);}
#if 0
# 2711
{ 
# 2712
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2713
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2715
return w.x; 
# 2716
} 
#endif
# 2718 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2724
::exit(___);}
#if 0
# 2719
{ 
# 2720
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2721
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2723
return w.x; 
# 2724
} 
#endif
# 2726 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2727
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2732
::exit(___);}
#if 0
# 2727
{ 
# 2728
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2729
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2731
return make_float1(w.x); 
# 2732
} 
#endif
# 2734 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2740
::exit(___);}
#if 0
# 2735
{ 
# 2736
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2737
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2739
return make_float1(w.x); 
# 2740
} 
#endif
# 2742 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2748
::exit(___);}
#if 0
# 2743
{ 
# 2744
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2747
return make_float2(w.x, w.y); 
# 2748
} 
#endif
# 2750 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2751
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2756
::exit(___);}
#if 0
# 2751
{ 
# 2752
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2755
return make_float2(w.x, w.y); 
# 2756
} 
#endif
# 2758 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2764
::exit(___);}
#if 0
# 2759
{ 
# 2760
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2763
return make_float4(w.x, w.y, w.z, w.w); 
# 2764
} 
#endif
# 2766 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2767
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2772
::exit(___);}
#if 0
# 2767
{ 
# 2768
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2771
return make_float4(w.x, w.y, w.z, w.w); 
# 2772
} 
#endif
# 2780 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2789
::exit(___);}
#if 0
# 2781
{ 
# 2785
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2788
return (char)(v.x); 
# 2789
} 
#endif
# 2791 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2792
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2796
::exit(___);}
#if 0
# 2792
{ 
# 2793
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2795
return (signed char)(v.x); 
# 2796
} 
#endif
# 2798 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2799
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2803
::exit(___);}
#if 0
# 2799
{ 
# 2800
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2802
return (unsigned char)(v.x); 
# 2803
} 
#endif
# 2805 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2806
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2810
::exit(___);}
#if 0
# 2806
{ 
# 2807
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2809
return make_char1(v.x); 
# 2810
} 
#endif
# 2812 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2813
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2817
::exit(___);}
#if 0
# 2813
{ 
# 2814
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2816
return make_uchar1(v.x); 
# 2817
} 
#endif
# 2819 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2824
::exit(___);}
#if 0
# 2820
{ 
# 2821
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2823
return make_char2(v.x, v.y); 
# 2824
} 
#endif
# 2826 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2827
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2831
::exit(___);}
#if 0
# 2827
{ 
# 2828
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2830
return make_uchar2(v.x, v.y); 
# 2831
} 
#endif
# 2833 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2834
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2838
::exit(___);}
#if 0
# 2834
{ 
# 2835
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2837
return make_char4(v.x, v.y, v.z, v.w); 
# 2838
} 
#endif
# 2840 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2841
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2845
::exit(___);}
#if 0
# 2841
{ 
# 2842
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2844
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2845
} 
#endif
# 2853 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2854
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2858
::exit(___);}
#if 0
# 2854
{ 
# 2855
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2857
return (short)(v.x); 
# 2858
} 
#endif
# 2860 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2861
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2865
::exit(___);}
#if 0
# 2861
{ 
# 2862
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2864
return (unsigned short)(v.x); 
# 2865
} 
#endif
# 2867 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2868
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2872
::exit(___);}
#if 0
# 2868
{ 
# 2869
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2871
return make_short1(v.x); 
# 2872
} 
#endif
# 2874 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2875
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2879
::exit(___);}
#if 0
# 2875
{ 
# 2876
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2878
return make_ushort1(v.x); 
# 2879
} 
#endif
# 2881 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2882
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2886
::exit(___);}
#if 0
# 2882
{ 
# 2883
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2885
return make_short2(v.x, v.y); 
# 2886
} 
#endif
# 2888 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2889
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2893
::exit(___);}
#if 0
# 2889
{ 
# 2890
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2892
return make_ushort2(v.x, v.y); 
# 2893
} 
#endif
# 2895 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2896
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2900
::exit(___);}
#if 0
# 2896
{ 
# 2897
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2899
return make_short4(v.x, v.y, v.z, v.w); 
# 2900
} 
#endif
# 2902 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2903
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2907
::exit(___);}
#if 0
# 2903
{ 
# 2904
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2906
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2907
} 
#endif
# 2915 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2916
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2920
::exit(___);}
#if 0
# 2916
{ 
# 2917
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2919
return (int)(v.x); 
# 2920
} 
#endif
# 2922 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2923
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2927
::exit(___);}
#if 0
# 2923
{ 
# 2924
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2926
return (unsigned)(v.x); 
# 2927
} 
#endif
# 2929 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2934
::exit(___);}
#if 0
# 2930
{ 
# 2931
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2933
return make_int1(v.x); 
# 2934
} 
#endif
# 2936 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2937
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2941
::exit(___);}
#if 0
# 2937
{ 
# 2938
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2940
return make_uint1(v.x); 
# 2941
} 
#endif
# 2943 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2944
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2948
::exit(___);}
#if 0
# 2944
{ 
# 2945
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2947
return make_int2(v.x, v.y); 
# 2948
} 
#endif
# 2950 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2951
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2955
::exit(___);}
#if 0
# 2951
{ 
# 2952
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2954
return make_uint2(v.x, v.y); 
# 2955
} 
#endif
# 2957 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2958
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2962
::exit(___);}
#if 0
# 2958
{ 
# 2959
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2961
return make_int4(v.x, v.y, v.z, v.w); 
# 2962
} 
#endif
# 2964 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2965
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2969
::exit(___);}
#if 0
# 2965
{ 
# 2966
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2968
return make_uint4(v.x, v.y, v.z, v.w); 
# 2969
} 
#endif
# 3043 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3044
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3048
::exit(___);}
#if 0
# 3044
{ 
# 3045
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3047
return v.x; 
# 3048
} 
#endif
# 3050 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3051
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3055
::exit(___);}
#if 0
# 3051
{ 
# 3052
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3054
return make_float1(v.x); 
# 3055
} 
#endif
# 3057 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3058
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3062
::exit(___);}
#if 0
# 3058
{ 
# 3059
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3061
return make_float2(v.x, v.y); 
# 3062
} 
#endif
# 3064 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3065
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3069
::exit(___);}
#if 0
# 3065
{ 
# 3066
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3068
return make_float4(v.x, v.y, v.z, v.w); 
# 3069
} 
#endif
# 3077 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3078
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3087
::exit(___);}
#if 0
# 3078
{ 
# 3082
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3084
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3086
return w.x; 
# 3087
} 
#endif
# 3089 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3090
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3095
::exit(___);}
#if 0
# 3090
{ 
# 3091
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3092
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3094
return w.x; 
# 3095
} 
#endif
# 3097 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3098
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3103
::exit(___);}
#if 0
# 3098
{ 
# 3099
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3100
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3102
return w.x; 
# 3103
} 
#endif
# 3105 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3106
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3111
::exit(___);}
#if 0
# 3106
{ 
# 3107
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3108
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3110
return make_float1(w.x); 
# 3111
} 
#endif
# 3113 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3114
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3119
::exit(___);}
#if 0
# 3114
{ 
# 3115
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3116
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3118
return make_float1(w.x); 
# 3119
} 
#endif
# 3121 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3122
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3127
::exit(___);}
#if 0
# 3122
{ 
# 3123
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3124
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3126
return make_float2(w.x, w.y); 
# 3127
} 
#endif
# 3129 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3135
::exit(___);}
#if 0
# 3130
{ 
# 3131
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3132
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3134
return make_float2(w.x, w.y); 
# 3135
} 
#endif
# 3137 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3138
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3143
::exit(___);}
#if 0
# 3138
{ 
# 3139
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3140
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3142
return make_float4(w.x, w.y, w.z, w.w); 
# 3143
} 
#endif
# 3145 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3151
::exit(___);}
#if 0
# 3146
{ 
# 3147
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3148
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3150
return make_float4(w.x, w.y, w.z, w.w); 
# 3151
} 
#endif
# 3159 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3160
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3165
::exit(___);}
#if 0
# 3160
{ 
# 3161
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3162
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3164
return w.x; 
# 3165
} 
#endif
# 3167 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3168
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3173
::exit(___);}
#if 0
# 3168
{ 
# 3169
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3170
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3172
return w.x; 
# 3173
} 
#endif
# 3175 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3181
::exit(___);}
#if 0
# 3176
{ 
# 3177
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3178
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3180
return make_float1(w.x); 
# 3181
} 
#endif
# 3183 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3184
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3189
::exit(___);}
#if 0
# 3184
{ 
# 3185
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3186
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3188
return make_float1(w.x); 
# 3189
} 
#endif
# 3191 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3197
::exit(___);}
#if 0
# 3192
{ 
# 3193
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3196
return make_float2(w.x, w.y); 
# 3197
} 
#endif
# 3199 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3205
::exit(___);}
#if 0
# 3200
{ 
# 3201
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3204
return make_float2(w.x, w.y); 
# 3205
} 
#endif
# 3207 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3213
::exit(___);}
#if 0
# 3208
{ 
# 3209
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3212
return make_float4(w.x, w.y, w.z, w.w); 
# 3213
} 
#endif
# 3215 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3221
::exit(___);}
#if 0
# 3216
{ 
# 3217
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3220
return make_float4(w.x, w.y, w.z, w.w); 
# 3221
} 
#endif
# 3229 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3230
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3238
::exit(___);}
#if 0
# 3230
{ 
# 3234
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3237
return (char)(v.x); 
# 3238
} 
#endif
# 3240 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3241
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3245
::exit(___);}
#if 0
# 3241
{ 
# 3242
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3244
return (signed char)(v.x); 
# 3245
} 
#endif
# 3247 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3252
::exit(___);}
#if 0
# 3248
{ 
# 3249
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3251
return (unsigned char)(v.x); 
# 3252
} 
#endif
# 3254 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3255
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3259
::exit(___);}
#if 0
# 3255
{ 
# 3256
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3258
return make_char1(v.x); 
# 3259
} 
#endif
# 3261 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3266
::exit(___);}
#if 0
# 3262
{ 
# 3263
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3265
return make_uchar1(v.x); 
# 3266
} 
#endif
# 3268 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3269
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3273
::exit(___);}
#if 0
# 3269
{ 
# 3270
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3272
return make_char2(v.x, v.y); 
# 3273
} 
#endif
# 3275 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3276
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3280
::exit(___);}
#if 0
# 3276
{ 
# 3277
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3279
return make_uchar2(v.x, v.y); 
# 3280
} 
#endif
# 3282 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3283
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3287
::exit(___);}
#if 0
# 3283
{ 
# 3284
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3286
return make_char4(v.x, v.y, v.z, v.w); 
# 3287
} 
#endif
# 3289 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3290
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3294
::exit(___);}
#if 0
# 3290
{ 
# 3291
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3293
return make_uchar4(v.x, v.y, v.z, v.w); 
# 3294
} 
#endif
# 3302 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3303
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3307
::exit(___);}
#if 0
# 3303
{ 
# 3304
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3306
return (short)(v.x); 
# 3307
} 
#endif
# 3309 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3314
::exit(___);}
#if 0
# 3310
{ 
# 3311
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3313
return (unsigned short)(v.x); 
# 3314
} 
#endif
# 3316 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3317
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3321
::exit(___);}
#if 0
# 3317
{ 
# 3318
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3320
return make_short1(v.x); 
# 3321
} 
#endif
# 3323 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3324
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3328
::exit(___);}
#if 0
# 3324
{ 
# 3325
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3327
return make_ushort1(v.x); 
# 3328
} 
#endif
# 3330 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3331
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3335
::exit(___);}
#if 0
# 3331
{ 
# 3332
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3334
return make_short2(v.x, v.y); 
# 3335
} 
#endif
# 3337 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3338
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3342
::exit(___);}
#if 0
# 3338
{ 
# 3339
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3341
return make_ushort2(v.x, v.y); 
# 3342
} 
#endif
# 3344 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3345
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3349
::exit(___);}
#if 0
# 3345
{ 
# 3346
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3348
return make_short4(v.x, v.y, v.z, v.w); 
# 3349
} 
#endif
# 3351 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3352
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3356
::exit(___);}
#if 0
# 3352
{ 
# 3353
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3355
return make_ushort4(v.x, v.y, v.z, v.w); 
# 3356
} 
#endif
# 3364 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3365
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3369
::exit(___);}
#if 0
# 3365
{ 
# 3366
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3368
return (int)(v.x); 
# 3369
} 
#endif
# 3371 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3372
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3376
::exit(___);}
#if 0
# 3372
{ 
# 3373
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3375
return (unsigned)(v.x); 
# 3376
} 
#endif
# 3378 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3383
::exit(___);}
#if 0
# 3379
{ 
# 3380
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3382
return make_int1(v.x); 
# 3383
} 
#endif
# 3385 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3386
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3390
::exit(___);}
#if 0
# 3386
{ 
# 3387
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3389
return make_uint1(v.x); 
# 3390
} 
#endif
# 3392 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3393
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3397
::exit(___);}
#if 0
# 3393
{ 
# 3394
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3396
return make_int2(v.x, v.y); 
# 3397
} 
#endif
# 3399 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3400
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3404
::exit(___);}
#if 0
# 3400
{ 
# 3401
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3403
return make_uint2(v.x, v.y); 
# 3404
} 
#endif
# 3406 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3407
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3411
::exit(___);}
#if 0
# 3407
{ 
# 3408
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3410
return make_int4(v.x, v.y, v.z, v.w); 
# 3411
} 
#endif
# 3413 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3414
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3418
::exit(___);}
#if 0
# 3414
{ 
# 3415
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3417
return make_uint4(v.x, v.y, v.z, v.w); 
# 3418
} 
#endif
# 3492 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3493
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3497
::exit(___);}
#if 0
# 3493
{ 
# 3494
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3496
return v.x; 
# 3497
} 
#endif
# 3499 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3504
::exit(___);}
#if 0
# 3500
{ 
# 3501
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3503
return make_float1(v.x); 
# 3504
} 
#endif
# 3506 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3507
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3511
::exit(___);}
#if 0
# 3507
{ 
# 3508
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3510
return make_float2(v.x, v.y); 
# 3511
} 
#endif
# 3513 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3514
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3518
::exit(___);}
#if 0
# 3514
{ 
# 3515
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3517
return make_float4(v.x, v.y, v.z, v.w); 
# 3518
} 
#endif
# 3526 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3527
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3536
::exit(___);}
#if 0
# 3527
{ 
# 3531
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3533
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3535
return w.x; 
# 3536
} 
#endif
# 3538 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3539
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3544
::exit(___);}
#if 0
# 3539
{ 
# 3540
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3541
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3543
return w.x; 
# 3544
} 
#endif
# 3546 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3547
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3552
::exit(___);}
#if 0
# 3547
{ 
# 3548
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3549
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3551
return w.x; 
# 3552
} 
#endif
# 3554 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3555
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3560
::exit(___);}
#if 0
# 3555
{ 
# 3556
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3557
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3559
return make_float1(w.x); 
# 3560
} 
#endif
# 3562 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3563
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3568
::exit(___);}
#if 0
# 3563
{ 
# 3564
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3565
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3567
return make_float1(w.x); 
# 3568
} 
#endif
# 3570 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3576
::exit(___);}
#if 0
# 3571
{ 
# 3572
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3573
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3575
return make_float2(w.x, w.y); 
# 3576
} 
#endif
# 3578 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3579
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3584
::exit(___);}
#if 0
# 3579
{ 
# 3580
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3581
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3583
return make_float2(w.x, w.y); 
# 3584
} 
#endif
# 3586 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3587
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3592
::exit(___);}
#if 0
# 3587
{ 
# 3588
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3589
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3591
return make_float4(w.x, w.y, w.z, w.w); 
# 3592
} 
#endif
# 3594 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3600
::exit(___);}
#if 0
# 3595
{ 
# 3596
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3597
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3599
return make_float4(w.x, w.y, w.z, w.w); 
# 3600
} 
#endif
# 3608 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3609
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3614
::exit(___);}
#if 0
# 3609
{ 
# 3610
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3611
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3613
return w.x; 
# 3614
} 
#endif
# 3616 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3617
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3622
::exit(___);}
#if 0
# 3617
{ 
# 3618
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3619
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3621
return w.x; 
# 3622
} 
#endif
# 3624 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3630
::exit(___);}
#if 0
# 3625
{ 
# 3626
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3627
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3629
return make_float1(w.x); 
# 3630
} 
#endif
# 3632 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3638
::exit(___);}
#if 0
# 3633
{ 
# 3634
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3635
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3637
return make_float1(w.x); 
# 3638
} 
#endif
# 3640 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3646
::exit(___);}
#if 0
# 3641
{ 
# 3642
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3645
return make_float2(w.x, w.y); 
# 3646
} 
#endif
# 3648 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3654
::exit(___);}
#if 0
# 3649
{ 
# 3650
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3653
return make_float2(w.x, w.y); 
# 3654
} 
#endif
# 3656 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3662
::exit(___);}
#if 0
# 3657
{ 
# 3658
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3661
return make_float4(w.x, w.y, w.z, w.w); 
# 3662
} 
#endif
# 3664 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3670
::exit(___);}
#if 0
# 3665
{ 
# 3666
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3669
return make_float4(w.x, w.y, w.z, w.w); 
# 3670
} 
#endif
# 3703 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3706
::exit(___);}
#if 0
# 3704
{ 
# 3705
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3706
} 
#endif
# 3708 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3709
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3711
::exit(___);}
#if 0
# 3709
{ 
# 3710
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3711
} 
#endif
# 3713 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3714
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3716
::exit(___);}
#if 0
# 3714
{ 
# 3715
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3716
} 
#endif
# 3718 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3721
::exit(___);}
#if 0
# 3719
{ 
# 3720
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3721
} 
#endif
# 3723 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3724
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3726
::exit(___);}
#if 0
# 3724
{ 
# 3725
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3726
} 
#endif
# 3728 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3729
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3731
::exit(___);}
#if 0
# 3729
{ 
# 3730
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  ; 
# 3731
} 
#endif
# 3733 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3734
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3736
::exit(___);}
#if 0
# 3734
{ 
# 3735
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  ; 
# 3736
} 
#endif
# 3738 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3739
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3741
::exit(___);}
#if 0
# 3739
{ 
# 3740
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  ; 
# 3741
} 
#endif
# 3743 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3744
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3746
::exit(___);}
#if 0
# 3744
{ 
# 3745
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  ; 
# 3746
} 
#endif
# 3748 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3749
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3751
::exit(___);}
#if 0
# 3749
{ 
# 3750
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3751
} 
#endif
# 3753 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3754
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3756
::exit(___);}
#if 0
# 3754
{ 
# 3755
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3756
} 
#endif
# 3758 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3761
::exit(___);}
#if 0
# 3759
{ 
# 3760
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3761
} 
#endif
# 3763 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3764
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3766
::exit(___);}
#if 0
# 3764
{ 
# 3765
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3766
} 
#endif
# 3768 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3769
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3771
::exit(___);}
#if 0
# 3769
{ 
# 3770
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3771
} 
#endif
# 3773 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3774
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3776
::exit(___);}
#if 0
# 3774
{ 
# 3775
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3776
} 
#endif
# 3778 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3779
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3781
::exit(___);}
#if 0
# 3779
{ 
# 3780
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  ; 
# 3781
} 
#endif
# 3783 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3784
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3786
::exit(___);}
#if 0
# 3784
{ 
# 3785
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  ; 
# 3786
} 
#endif
# 3788 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3789
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3791
::exit(___);}
#if 0
# 3789
{ 
# 3790
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  ; 
# 3791
} 
#endif
# 3793 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3794
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3796
::exit(___);}
#if 0
# 3794
{ 
# 3795
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  ; 
# 3796
} 
#endif
# 3798 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3799
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3801
::exit(___);}
#if 0
# 3799
{ 
# 3800
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3801
} 
#endif
# 3803 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3804
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3806
::exit(___);}
#if 0
# 3804
{ 
# 3805
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3806
} 
#endif
# 3808 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3809
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3811
::exit(___);}
#if 0
# 3809
{ 
# 3810
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3811
} 
#endif
# 3813 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3814
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3816
::exit(___);}
#if 0
# 3814
{ 
# 3815
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3816
} 
#endif
# 3818 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3819
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3821
::exit(___);}
#if 0
# 3819
{ 
# 3820
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3821
} 
#endif
# 3823 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3824
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3826
::exit(___);}
#if 0
# 3824
{ 
# 3825
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3826
} 
#endif
# 3828 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3829
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3831
::exit(___);}
#if 0
# 3829
{ 
# 3830
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3831
} 
#endif
# 3833 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3834
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3836
::exit(___);}
#if 0
# 3834
{ 
# 3835
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3836
} 
#endif
# 3838 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3839
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3841
::exit(___);}
#if 0
# 3839
{ 
# 3840
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3841
} 
#endif
# 3843 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3844
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3846
::exit(___);}
#if 0
# 3844
{ 
# 3845
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3846
} 
#endif
# 3848 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3849
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3851
::exit(___);}
#if 0
# 3849
{ 
# 3850
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3851
} 
#endif
# 3853 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3854
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3856
::exit(___);}
#if 0
# 3854
{ 
# 3855
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3856
} 
#endif
# 3858 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3859
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3861
::exit(___);}
#if 0
# 3859
{ 
# 3860
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3861
} 
#endif
# 3863 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3866
::exit(___);}
#if 0
# 3864
{ 
# 3865
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3866
} 
#endif
# 3868 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3869
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3871
::exit(___);}
#if 0
# 3869
{ 
# 3870
if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3871
} 
#endif
# 3873 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3874
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3876
::exit(___);}
#if 0
# 3874
{ 
# 3875
if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3876
} 
#endif
# 3878 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
# 3879
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3881
::exit(___);}
#if 0
# 3879
{ 
# 3880
if (comp == 3) { float4 v = __ftex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3881
} 
#endif
# 3890 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3891
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3893
::exit(___);}
#if 0
# 3891
{ 
# 3892
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3893
} 
#endif
# 3895 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3896
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3898
::exit(___);}
#if 0
# 3896
{ 
# 3897
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3898
} 
#endif
# 3900 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3901
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3903
::exit(___);}
#if 0
# 3901
{ 
# 3902
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3903
} 
#endif
# 3905 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3906
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3908
::exit(___);}
#if 0
# 3906
{ 
# 3907
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3908
} 
#endif
# 3910 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3911
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3913
::exit(___);}
#if 0
# 3911
{ 
# 3912
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3913
} 
#endif
# 3915 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3916
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3918
::exit(___);}
#if 0
# 3916
{ 
# 3917
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 3918
} 
#endif
# 3920 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3923
::exit(___);}
#if 0
# 3921
{ 
# 3922
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 3923
} 
#endif
# 3925 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3926
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3928
::exit(___);}
#if 0
# 3926
{ 
# 3927
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 3928
} 
#endif
# 3930 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3931
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3933
::exit(___);}
#if 0
# 3931
{ 
# 3932
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 3933
} 
#endif
# 3935 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3936
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3938
::exit(___);}
#if 0
# 3936
{ 
# 3937
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 3938
} 
#endif
# 3940 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3941
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3943
::exit(___);}
#if 0
# 3941
{ 
# 3942
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 3943
} 
#endif
# 3945 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3948
::exit(___);}
#if 0
# 3946
{ 
# 3947
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3948
} 
#endif
# 3950 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3951
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3953
::exit(___);}
#if 0
# 3951
{ 
# 3952
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3953
} 
#endif
# 3955 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3958
::exit(___);}
#if 0
# 3956
{ 
# 3957
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3958
} 
#endif
# 3960 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3961
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3963
::exit(___);}
#if 0
# 3961
{ 
# 3962
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3963
} 
#endif
# 3965 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3966
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3968
::exit(___);}
#if 0
# 3966
{ 
# 3967
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 3968
} 
#endif
# 3970 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3973
::exit(___);}
#if 0
# 3971
{ 
# 3972
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 3973
} 
#endif
# 3975 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3976
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3978
::exit(___);}
#if 0
# 3976
{ 
# 3977
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 3978
} 
#endif
# 3980 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3981
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3983
::exit(___);}
#if 0
# 3981
{ 
# 3982
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 3983
} 
#endif
# 3985 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3986
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3988
::exit(___);}
#if 0
# 3986
{ 
# 3987
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 3988
} 
#endif
# 3990 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
# 3991
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3993
::exit(___);}
#if 0
# 3991
{ 
# 3992
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 3993
} 
#endif
# 4007 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLod(texture< char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4008
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4016
::exit(___);}
#if 0
# 4008
{ 
# 4012
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4015
return (char)(v.x); 
# 4016
} 
#endif
# 4018 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLod(texture< signed char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4019
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4023
::exit(___);}
#if 0
# 4019
{ 
# 4020
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4022
return (signed char)(v.x); 
# 4023
} 
#endif
# 4025 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLod(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4026
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4030
::exit(___);}
#if 0
# 4026
{ 
# 4027
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4029
return (unsigned char)(v.x); 
# 4030
} 
#endif
# 4032 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLod(texture< char1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4033
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4037
::exit(___);}
#if 0
# 4033
{ 
# 4034
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4036
return make_char1(v.x); 
# 4037
} 
#endif
# 4039 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLod(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4040
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4044
::exit(___);}
#if 0
# 4040
{ 
# 4041
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4043
return make_uchar1(v.x); 
# 4044
} 
#endif
# 4046 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLod(texture< char2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4047
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4051
::exit(___);}
#if 0
# 4047
{ 
# 4048
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4050
return make_char2(v.x, v.y); 
# 4051
} 
#endif
# 4053 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLod(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4054
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4058
::exit(___);}
#if 0
# 4054
{ 
# 4055
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4057
return make_uchar2(v.x, v.y); 
# 4058
} 
#endif
# 4060 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLod(texture< char4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4061
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4065
::exit(___);}
#if 0
# 4061
{ 
# 4062
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4064
return make_char4(v.x, v.y, v.z, v.w); 
# 4065
} 
#endif
# 4067 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLod(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4068
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4072
::exit(___);}
#if 0
# 4068
{ 
# 4069
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4071
return make_uchar4(v.x, v.y, v.z, v.w); 
# 4072
} 
#endif
# 4080 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLod(texture< short, 1, cudaReadModeElementType>  t, float x, float level) 
# 4081
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4085
::exit(___);}
#if 0
# 4081
{ 
# 4082
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4084
return (short)(v.x); 
# 4085
} 
#endif
# 4087 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLod(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float level) 
# 4088
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4092
::exit(___);}
#if 0
# 4088
{ 
# 4089
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4091
return (unsigned short)(v.x); 
# 4092
} 
#endif
# 4094 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLod(texture< short1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4095
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4099
::exit(___);}
#if 0
# 4095
{ 
# 4096
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4098
return make_short1(v.x); 
# 4099
} 
#endif
# 4101 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLod(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4102
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4106
::exit(___);}
#if 0
# 4102
{ 
# 4103
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4105
return make_ushort1(v.x); 
# 4106
} 
#endif
# 4108 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLod(texture< short2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4109
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4113
::exit(___);}
#if 0
# 4109
{ 
# 4110
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4112
return make_short2(v.x, v.y); 
# 4113
} 
#endif
# 4115 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLod(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4116
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4120
::exit(___);}
#if 0
# 4116
{ 
# 4117
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4119
return make_ushort2(v.x, v.y); 
# 4120
} 
#endif
# 4122 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLod(texture< short4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4123
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4127
::exit(___);}
#if 0
# 4123
{ 
# 4124
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4126
return make_short4(v.x, v.y, v.z, v.w); 
# 4127
} 
#endif
# 4129 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLod(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4130
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4134
::exit(___);}
#if 0
# 4130
{ 
# 4131
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4133
return make_ushort4(v.x, v.y, v.z, v.w); 
# 4134
} 
#endif
# 4142 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLod(texture< int, 1, cudaReadModeElementType>  t, float x, float level) 
# 4143
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4147
::exit(___);}
#if 0
# 4143
{ 
# 4144
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4146
return (int)(v.x); 
# 4147
} 
#endif
# 4149 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLod(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float level) 
# 4150
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4154
::exit(___);}
#if 0
# 4150
{ 
# 4151
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4153
return (unsigned)(v.x); 
# 4154
} 
#endif
# 4156 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLod(texture< int1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4157
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4161
::exit(___);}
#if 0
# 4157
{ 
# 4158
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4160
return make_int1(v.x); 
# 4161
} 
#endif
# 4163 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLod(texture< uint1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4164
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4168
::exit(___);}
#if 0
# 4164
{ 
# 4165
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4167
return make_uint1(v.x); 
# 4168
} 
#endif
# 4170 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLod(texture< int2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4171
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4175
::exit(___);}
#if 0
# 4171
{ 
# 4172
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4174
return make_int2(v.x, v.y); 
# 4175
} 
#endif
# 4177 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLod(texture< uint2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4178
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4182
::exit(___);}
#if 0
# 4178
{ 
# 4179
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4181
return make_uint2(v.x, v.y); 
# 4182
} 
#endif
# 4184 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLod(texture< int4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4185
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4189
::exit(___);}
#if 0
# 4185
{ 
# 4186
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4188
return make_int4(v.x, v.y, v.z, v.w); 
# 4189
} 
#endif
# 4191 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLod(texture< uint4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4192
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4196
::exit(___);}
#if 0
# 4192
{ 
# 4193
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4195
return make_uint4(v.x, v.y, v.z, v.w); 
# 4196
} 
#endif
# 4276 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< float, 1, cudaReadModeElementType>  t, float x, float level) 
# 4277
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4281
::exit(___);}
#if 0
# 4277
{ 
# 4278
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4280
return v.x; 
# 4281
} 
#endif
# 4283 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< float1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4284
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4288
::exit(___);}
#if 0
# 4284
{ 
# 4285
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4287
return make_float1(v.x); 
# 4288
} 
#endif
# 4290 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< float2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4291
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4295
::exit(___);}
#if 0
# 4291
{ 
# 4292
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4294
return make_float2(v.x, v.y); 
# 4295
} 
#endif
# 4297 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< float4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4298
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4302
::exit(___);}
#if 0
# 4298
{ 
# 4299
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4301
return make_float4(v.x, v.y, v.z, v.w); 
# 4302
} 
#endif
# 4310 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4311
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4320
::exit(___);}
#if 0
# 4311
{ 
# 4315
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4317
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4319
return w.x; 
# 4320
} 
#endif
# 4322 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4323
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4328
::exit(___);}
#if 0
# 4323
{ 
# 4324
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4325
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4327
return w.x; 
# 4328
} 
#endif
# 4330 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4331
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4336
::exit(___);}
#if 0
# 4331
{ 
# 4332
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4333
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4335
return w.x; 
# 4336
} 
#endif
# 4338 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4339
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4344
::exit(___);}
#if 0
# 4339
{ 
# 4340
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4343
return make_float1(w.x); 
# 4344
} 
#endif
# 4346 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4347
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4352
::exit(___);}
#if 0
# 4347
{ 
# 4348
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4351
return make_float1(w.x); 
# 4352
} 
#endif
# 4354 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4355
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4360
::exit(___);}
#if 0
# 4355
{ 
# 4356
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4357
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4359
return make_float2(w.x, w.y); 
# 4360
} 
#endif
# 4362 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4363
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4368
::exit(___);}
#if 0
# 4363
{ 
# 4364
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4365
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4367
return make_float2(w.x, w.y); 
# 4368
} 
#endif
# 4370 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4371
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4376
::exit(___);}
#if 0
# 4371
{ 
# 4372
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4375
return make_float4(w.x, w.y, w.z, w.w); 
# 4376
} 
#endif
# 4378 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4379
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4384
::exit(___);}
#if 0
# 4379
{ 
# 4380
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4383
return make_float4(w.x, w.y, w.z, w.w); 
# 4384
} 
#endif
# 4392 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4393
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4398
::exit(___);}
#if 0
# 4393
{ 
# 4394
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4395
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4397
return w.x; 
# 4398
} 
#endif
# 4400 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4401
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4406
::exit(___);}
#if 0
# 4401
{ 
# 4402
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4403
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4405
return w.x; 
# 4406
} 
#endif
# 4408 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4409
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4414
::exit(___);}
#if 0
# 4409
{ 
# 4410
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4411
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4413
return make_float1(w.x); 
# 4414
} 
#endif
# 4416 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4417
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4422
::exit(___);}
#if 0
# 4417
{ 
# 4418
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4419
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4421
return make_float1(w.x); 
# 4422
} 
#endif
# 4424 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4425
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4430
::exit(___);}
#if 0
# 4425
{ 
# 4426
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4427
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4429
return make_float2(w.x, w.y); 
# 4430
} 
#endif
# 4432 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4433
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4438
::exit(___);}
#if 0
# 4433
{ 
# 4434
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4435
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4437
return make_float2(w.x, w.y); 
# 4438
} 
#endif
# 4440 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4441
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4446
::exit(___);}
#if 0
# 4441
{ 
# 4442
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4443
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4445
return make_float4(w.x, w.y, w.z, w.w); 
# 4446
} 
#endif
# 4448 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4449
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4454
::exit(___);}
#if 0
# 4449
{ 
# 4450
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4451
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4453
return make_float4(w.x, w.y, w.z, w.w); 
# 4454
} 
#endif
# 4462 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLod(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4471
::exit(___);}
#if 0
# 4463
{ 
# 4467
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4470
return (char)(v.x); 
# 4471
} 
#endif
# 4473 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLod(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4474
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4478
::exit(___);}
#if 0
# 4474
{ 
# 4475
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4477
return (signed char)(v.x); 
# 4478
} 
#endif
# 4480 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLod(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4481
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4485
::exit(___);}
#if 0
# 4481
{ 
# 4482
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4484
return (unsigned char)(v.x); 
# 4485
} 
#endif
# 4487 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLod(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4488
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4492
::exit(___);}
#if 0
# 4488
{ 
# 4489
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4491
return make_char1(v.x); 
# 4492
} 
#endif
# 4494 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLod(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4495
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4499
::exit(___);}
#if 0
# 4495
{ 
# 4496
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4498
return make_uchar1(v.x); 
# 4499
} 
#endif
# 4501 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLod(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4502
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4506
::exit(___);}
#if 0
# 4502
{ 
# 4503
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4505
return make_char2(v.x, v.y); 
# 4506
} 
#endif
# 4508 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLod(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4513
::exit(___);}
#if 0
# 4509
{ 
# 4510
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4512
return make_uchar2(v.x, v.y); 
# 4513
} 
#endif
# 4515 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLod(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4520
::exit(___);}
#if 0
# 4516
{ 
# 4517
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4519
return make_char4(v.x, v.y, v.z, v.w); 
# 4520
} 
#endif
# 4522 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLod(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4523
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4527
::exit(___);}
#if 0
# 4523
{ 
# 4524
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4526
return make_uchar4(v.x, v.y, v.z, v.w); 
# 4527
} 
#endif
# 4535 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLod(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4540
::exit(___);}
#if 0
# 4536
{ 
# 4537
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4539
return (short)(v.x); 
# 4540
} 
#endif
# 4542 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLod(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4547
::exit(___);}
#if 0
# 4543
{ 
# 4544
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4546
return (unsigned short)(v.x); 
# 4547
} 
#endif
# 4549 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLod(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4550
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4554
::exit(___);}
#if 0
# 4550
{ 
# 4551
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4553
return make_short1(v.x); 
# 4554
} 
#endif
# 4556 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLod(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4557
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4561
::exit(___);}
#if 0
# 4557
{ 
# 4558
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4560
return make_ushort1(v.x); 
# 4561
} 
#endif
# 4563 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLod(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4564
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4568
::exit(___);}
#if 0
# 4564
{ 
# 4565
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4567
return make_short2(v.x, v.y); 
# 4568
} 
#endif
# 4570 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLod(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4575
::exit(___);}
#if 0
# 4571
{ 
# 4572
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4574
return make_ushort2(v.x, v.y); 
# 4575
} 
#endif
# 4577 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLod(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4578
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4582
::exit(___);}
#if 0
# 4578
{ 
# 4579
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4581
return make_short4(v.x, v.y, v.z, v.w); 
# 4582
} 
#endif
# 4584 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLod(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4585
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4589
::exit(___);}
#if 0
# 4585
{ 
# 4586
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4588
return make_ushort4(v.x, v.y, v.z, v.w); 
# 4589
} 
#endif
# 4597 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLod(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4602
::exit(___);}
#if 0
# 4598
{ 
# 4599
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4601
return (int)(v.x); 
# 4602
} 
#endif
# 4604 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLod(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4605
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4609
::exit(___);}
#if 0
# 4605
{ 
# 4606
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4608
return (unsigned)(v.x); 
# 4609
} 
#endif
# 4611 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLod(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4612
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4616
::exit(___);}
#if 0
# 4612
{ 
# 4613
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4615
return make_int1(v.x); 
# 4616
} 
#endif
# 4618 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLod(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4619
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4623
::exit(___);}
#if 0
# 4619
{ 
# 4620
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4622
return make_uint1(v.x); 
# 4623
} 
#endif
# 4625 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLod(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4626
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4630
::exit(___);}
#if 0
# 4626
{ 
# 4627
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4629
return make_int2(v.x, v.y); 
# 4630
} 
#endif
# 4632 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLod(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4637
::exit(___);}
#if 0
# 4633
{ 
# 4634
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4636
return make_uint2(v.x, v.y); 
# 4637
} 
#endif
# 4639 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLod(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4640
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4644
::exit(___);}
#if 0
# 4640
{ 
# 4641
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4643
return make_int4(v.x, v.y, v.z, v.w); 
# 4644
} 
#endif
# 4646 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLod(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4647
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4651
::exit(___);}
#if 0
# 4647
{ 
# 4648
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4650
return make_uint4(v.x, v.y, v.z, v.w); 
# 4651
} 
#endif
# 4725 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4730
::exit(___);}
#if 0
# 4726
{ 
# 4727
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4729
return v.x; 
# 4730
} 
#endif
# 4732 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4733
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4737
::exit(___);}
#if 0
# 4733
{ 
# 4734
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4736
return make_float1(v.x); 
# 4737
} 
#endif
# 4739 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4744
::exit(___);}
#if 0
# 4740
{ 
# 4741
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4743
return make_float2(v.x, v.y); 
# 4744
} 
#endif
# 4746 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4747
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4751
::exit(___);}
#if 0
# 4747
{ 
# 4748
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4750
return make_float4(v.x, v.y, v.z, v.w); 
# 4751
} 
#endif
# 4759 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4760
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4769
::exit(___);}
#if 0
# 4760
{ 
# 4764
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4766
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4768
return w.x; 
# 4769
} 
#endif
# 4771 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4772
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4777
::exit(___);}
#if 0
# 4772
{ 
# 4773
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4774
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4776
return w.x; 
# 4777
} 
#endif
# 4779 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4780
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4785
::exit(___);}
#if 0
# 4780
{ 
# 4781
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4782
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4784
return w.x; 
# 4785
} 
#endif
# 4787 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4793
::exit(___);}
#if 0
# 4788
{ 
# 4789
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4790
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4792
return make_float1(w.x); 
# 4793
} 
#endif
# 4795 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4796
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4801
::exit(___);}
#if 0
# 4796
{ 
# 4797
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4798
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4800
return make_float1(w.x); 
# 4801
} 
#endif
# 4803 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4804
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4809
::exit(___);}
#if 0
# 4804
{ 
# 4805
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4806
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4808
return make_float2(w.x, w.y); 
# 4809
} 
#endif
# 4811 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4812
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4817
::exit(___);}
#if 0
# 4812
{ 
# 4813
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4814
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4816
return make_float2(w.x, w.y); 
# 4817
} 
#endif
# 4819 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4825
::exit(___);}
#if 0
# 4820
{ 
# 4821
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4822
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4824
return make_float4(w.x, w.y, w.z, w.w); 
# 4825
} 
#endif
# 4827 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4833
::exit(___);}
#if 0
# 4828
{ 
# 4829
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4830
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4832
return make_float4(w.x, w.y, w.z, w.w); 
# 4833
} 
#endif
# 4841 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4842
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4847
::exit(___);}
#if 0
# 4842
{ 
# 4843
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4844
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4846
return w.x; 
# 4847
} 
#endif
# 4849 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4855
::exit(___);}
#if 0
# 4850
{ 
# 4851
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4852
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4854
return w.x; 
# 4855
} 
#endif
# 4857 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4858
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4863
::exit(___);}
#if 0
# 4858
{ 
# 4859
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4860
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4862
return make_float1(w.x); 
# 4863
} 
#endif
# 4865 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4866
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4871
::exit(___);}
#if 0
# 4866
{ 
# 4867
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4868
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4870
return make_float1(w.x); 
# 4871
} 
#endif
# 4873 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4874
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4879
::exit(___);}
#if 0
# 4874
{ 
# 4875
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4876
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4878
return make_float2(w.x, w.y); 
# 4879
} 
#endif
# 4881 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4882
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4887
::exit(___);}
#if 0
# 4882
{ 
# 4883
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4884
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4886
return make_float2(w.x, w.y); 
# 4887
} 
#endif
# 4889 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4895
::exit(___);}
#if 0
# 4890
{ 
# 4891
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4892
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4894
return make_float4(w.x, w.y, w.z, w.w); 
# 4895
} 
#endif
# 4897 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4903
::exit(___);}
#if 0
# 4898
{ 
# 4899
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4900
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4902
return make_float4(w.x, w.y, w.z, w.w); 
# 4903
} 
#endif
# 4911 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredLod(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4912
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4920
::exit(___);}
#if 0
# 4912
{ 
# 4916
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4919
return (char)(v.x); 
# 4920
} 
#endif
# 4922 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredLod(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4923
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4927
::exit(___);}
#if 0
# 4923
{ 
# 4924
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4926
return (signed char)(v.x); 
# 4927
} 
#endif
# 4929 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4930
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4934
::exit(___);}
#if 0
# 4930
{ 
# 4931
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4933
return (unsigned char)(v.x); 
# 4934
} 
#endif
# 4936 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredLod(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4937
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4941
::exit(___);}
#if 0
# 4937
{ 
# 4938
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4940
return make_char1(v.x); 
# 4941
} 
#endif
# 4943 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4944
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4948
::exit(___);}
#if 0
# 4944
{ 
# 4945
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4947
return make_uchar1(v.x); 
# 4948
} 
#endif
# 4950 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredLod(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4951
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4955
::exit(___);}
#if 0
# 4951
{ 
# 4952
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4954
return make_char2(v.x, v.y); 
# 4955
} 
#endif
# 4957 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4958
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4962
::exit(___);}
#if 0
# 4958
{ 
# 4959
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4961
return make_uchar2(v.x, v.y); 
# 4962
} 
#endif
# 4964 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredLod(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4965
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4969
::exit(___);}
#if 0
# 4965
{ 
# 4966
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4968
return make_char4(v.x, v.y, v.z, v.w); 
# 4969
} 
#endif
# 4971 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4972
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4976
::exit(___);}
#if 0
# 4972
{ 
# 4973
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4975
return make_uchar4(v.x, v.y, v.z, v.w); 
# 4976
} 
#endif
# 4984 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredLod(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4985
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4989
::exit(___);}
#if 0
# 4985
{ 
# 4986
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4988
return (short)(v.x); 
# 4989
} 
#endif
# 4991 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4992
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 4996
::exit(___);}
#if 0
# 4992
{ 
# 4993
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 4995
return (unsigned short)(v.x); 
# 4996
} 
#endif
# 4998 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredLod(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 4999
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5003
::exit(___);}
#if 0
# 4999
{ 
# 5000
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5002
return make_short1(v.x); 
# 5003
} 
#endif
# 5005 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5006
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5010
::exit(___);}
#if 0
# 5006
{ 
# 5007
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5009
return make_ushort1(v.x); 
# 5010
} 
#endif
# 5012 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredLod(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5013
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5017
::exit(___);}
#if 0
# 5013
{ 
# 5014
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5016
return make_short2(v.x, v.y); 
# 5017
} 
#endif
# 5019 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5020
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5024
::exit(___);}
#if 0
# 5020
{ 
# 5021
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5023
return make_ushort2(v.x, v.y); 
# 5024
} 
#endif
# 5026 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredLod(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5027
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5031
::exit(___);}
#if 0
# 5027
{ 
# 5028
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5030
return make_short4(v.x, v.y, v.z, v.w); 
# 5031
} 
#endif
# 5033 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5034
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5038
::exit(___);}
#if 0
# 5034
{ 
# 5035
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5037
return make_ushort4(v.x, v.y, v.z, v.w); 
# 5038
} 
#endif
# 5046 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredLod(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5047
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5051
::exit(___);}
#if 0
# 5047
{ 
# 5048
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5050
return (int)(v.x); 
# 5051
} 
#endif
# 5053 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredLod(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5054
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5058
::exit(___);}
#if 0
# 5054
{ 
# 5055
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5057
return (unsigned)(v.x); 
# 5058
} 
#endif
# 5060 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredLod(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5061
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5065
::exit(___);}
#if 0
# 5061
{ 
# 5062
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5064
return make_int1(v.x); 
# 5065
} 
#endif
# 5067 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredLod(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5068
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5072
::exit(___);}
#if 0
# 5068
{ 
# 5069
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5071
return make_uint1(v.x); 
# 5072
} 
#endif
# 5074 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredLod(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5075
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5079
::exit(___);}
#if 0
# 5075
{ 
# 5076
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5078
return make_int2(v.x, v.y); 
# 5079
} 
#endif
# 5081 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredLod(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5082
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5086
::exit(___);}
#if 0
# 5082
{ 
# 5083
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5085
return make_uint2(v.x, v.y); 
# 5086
} 
#endif
# 5088 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredLod(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5089
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5093
::exit(___);}
#if 0
# 5089
{ 
# 5090
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5092
return make_int4(v.x, v.y, v.z, v.w); 
# 5093
} 
#endif
# 5095 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredLod(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5096
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5100
::exit(___);}
#if 0
# 5096
{ 
# 5097
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5099
return make_uint4(v.x, v.y, v.z, v.w); 
# 5100
} 
#endif
# 5174 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5175
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5179
::exit(___);}
#if 0
# 5175
{ 
# 5176
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5178
return v.x; 
# 5179
} 
#endif
# 5181 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5182
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5186
::exit(___);}
#if 0
# 5182
{ 
# 5183
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5185
return make_float1(v.x); 
# 5186
} 
#endif
# 5188 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5189
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5193
::exit(___);}
#if 0
# 5189
{ 
# 5190
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5192
return make_float2(v.x, v.y); 
# 5193
} 
#endif
# 5195 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5196
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5200
::exit(___);}
#if 0
# 5196
{ 
# 5197
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5199
return make_float4(v.x, v.y, v.z, v.w); 
# 5200
} 
#endif
# 5208 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5209
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5218
::exit(___);}
#if 0
# 5209
{ 
# 5213
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5215
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5217
return w.x; 
# 5218
} 
#endif
# 5220 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5221
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5226
::exit(___);}
#if 0
# 5221
{ 
# 5222
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5223
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5225
return w.x; 
# 5226
} 
#endif
# 5228 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5229
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5234
::exit(___);}
#if 0
# 5229
{ 
# 5230
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5231
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5233
return w.x; 
# 5234
} 
#endif
# 5236 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5237
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5242
::exit(___);}
#if 0
# 5237
{ 
# 5238
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5239
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5241
return make_float1(w.x); 
# 5242
} 
#endif
# 5244 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5245
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5250
::exit(___);}
#if 0
# 5245
{ 
# 5246
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5247
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5249
return make_float1(w.x); 
# 5250
} 
#endif
# 5252 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5253
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5258
::exit(___);}
#if 0
# 5253
{ 
# 5254
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5255
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5257
return make_float2(w.x, w.y); 
# 5258
} 
#endif
# 5260 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5261
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5266
::exit(___);}
#if 0
# 5261
{ 
# 5262
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5263
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5265
return make_float2(w.x, w.y); 
# 5266
} 
#endif
# 5268 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5269
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5274
::exit(___);}
#if 0
# 5269
{ 
# 5270
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5271
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5273
return make_float4(w.x, w.y, w.z, w.w); 
# 5274
} 
#endif
# 5276 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5277
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5282
::exit(___);}
#if 0
# 5277
{ 
# 5278
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5279
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5281
return make_float4(w.x, w.y, w.z, w.w); 
# 5282
} 
#endif
# 5290 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5291
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5296
::exit(___);}
#if 0
# 5291
{ 
# 5292
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5293
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5295
return w.x; 
# 5296
} 
#endif
# 5298 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5299
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5304
::exit(___);}
#if 0
# 5299
{ 
# 5300
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5301
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5303
return w.x; 
# 5304
} 
#endif
# 5306 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5307
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5312
::exit(___);}
#if 0
# 5307
{ 
# 5308
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5309
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5311
return make_float1(w.x); 
# 5312
} 
#endif
# 5314 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5315
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5320
::exit(___);}
#if 0
# 5315
{ 
# 5316
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5317
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5319
return make_float1(w.x); 
# 5320
} 
#endif
# 5322 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5323
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5328
::exit(___);}
#if 0
# 5323
{ 
# 5324
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5325
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5327
return make_float2(w.x, w.y); 
# 5328
} 
#endif
# 5330 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5331
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5336
::exit(___);}
#if 0
# 5331
{ 
# 5332
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5333
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5335
return make_float2(w.x, w.y); 
# 5336
} 
#endif
# 5338 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5339
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5344
::exit(___);}
#if 0
# 5339
{ 
# 5340
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5343
return make_float4(w.x, w.y, w.z, w.w); 
# 5344
} 
#endif
# 5346 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5347
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5352
::exit(___);}
#if 0
# 5347
{ 
# 5348
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5351
return make_float4(w.x, w.y, w.z, w.w); 
# 5352
} 
#endif
# 5360 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredLod(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5361
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5369
::exit(___);}
#if 0
# 5361
{ 
# 5365
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5368
return (char)(v.x); 
# 5369
} 
#endif
# 5371 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredLod(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5372
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5376
::exit(___);}
#if 0
# 5372
{ 
# 5373
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5375
return (signed char)(v.x); 
# 5376
} 
#endif
# 5378 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5383
::exit(___);}
#if 0
# 5379
{ 
# 5380
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5382
return (unsigned char)(v.x); 
# 5383
} 
#endif
# 5385 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredLod(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5386
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5390
::exit(___);}
#if 0
# 5386
{ 
# 5387
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5389
return make_char1(v.x); 
# 5390
} 
#endif
# 5392 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5393
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5397
::exit(___);}
#if 0
# 5393
{ 
# 5394
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5396
return make_uchar1(v.x); 
# 5397
} 
#endif
# 5399 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredLod(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5400
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5404
::exit(___);}
#if 0
# 5400
{ 
# 5401
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5403
return make_char2(v.x, v.y); 
# 5404
} 
#endif
# 5406 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5407
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5411
::exit(___);}
#if 0
# 5407
{ 
# 5408
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5410
return make_uchar2(v.x, v.y); 
# 5411
} 
#endif
# 5413 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredLod(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5414
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5418
::exit(___);}
#if 0
# 5414
{ 
# 5415
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5417
return make_char4(v.x, v.y, v.z, v.w); 
# 5418
} 
#endif
# 5420 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5421
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5425
::exit(___);}
#if 0
# 5421
{ 
# 5422
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5424
return make_uchar4(v.x, v.y, v.z, v.w); 
# 5425
} 
#endif
# 5433 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredLod(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5434
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5438
::exit(___);}
#if 0
# 5434
{ 
# 5435
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5437
return (short)(v.x); 
# 5438
} 
#endif
# 5440 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5441
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5445
::exit(___);}
#if 0
# 5441
{ 
# 5442
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5444
return (unsigned short)(v.x); 
# 5445
} 
#endif
# 5447 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredLod(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5448
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5452
::exit(___);}
#if 0
# 5448
{ 
# 5449
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5451
return make_short1(v.x); 
# 5452
} 
#endif
# 5454 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5455
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5459
::exit(___);}
#if 0
# 5455
{ 
# 5456
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5458
return make_ushort1(v.x); 
# 5459
} 
#endif
# 5461 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredLod(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5462
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5466
::exit(___);}
#if 0
# 5462
{ 
# 5463
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5465
return make_short2(v.x, v.y); 
# 5466
} 
#endif
# 5468 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5469
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5473
::exit(___);}
#if 0
# 5469
{ 
# 5470
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5472
return make_ushort2(v.x, v.y); 
# 5473
} 
#endif
# 5475 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredLod(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5476
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5480
::exit(___);}
#if 0
# 5476
{ 
# 5477
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5479
return make_short4(v.x, v.y, v.z, v.w); 
# 5480
} 
#endif
# 5482 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5483
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5487
::exit(___);}
#if 0
# 5483
{ 
# 5484
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5486
return make_ushort4(v.x, v.y, v.z, v.w); 
# 5487
} 
#endif
# 5495 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredLod(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5496
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5500
::exit(___);}
#if 0
# 5496
{ 
# 5497
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5499
return (int)(v.x); 
# 5500
} 
#endif
# 5502 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredLod(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5503
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5507
::exit(___);}
#if 0
# 5503
{ 
# 5504
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5506
return (unsigned)(v.x); 
# 5507
} 
#endif
# 5509 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredLod(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5510
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5514
::exit(___);}
#if 0
# 5510
{ 
# 5511
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5513
return make_int1(v.x); 
# 5514
} 
#endif
# 5516 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredLod(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5517
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5521
::exit(___);}
#if 0
# 5517
{ 
# 5518
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5520
return make_uint1(v.x); 
# 5521
} 
#endif
# 5523 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredLod(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5524
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5528
::exit(___);}
#if 0
# 5524
{ 
# 5525
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5527
return make_int2(v.x, v.y); 
# 5528
} 
#endif
# 5530 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredLod(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5531
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5535
::exit(___);}
#if 0
# 5531
{ 
# 5532
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5534
return make_uint2(v.x, v.y); 
# 5535
} 
#endif
# 5537 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredLod(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5538
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5542
::exit(___);}
#if 0
# 5538
{ 
# 5539
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5541
return make_int4(v.x, v.y, v.z, v.w); 
# 5542
} 
#endif
# 5544 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredLod(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5549
::exit(___);}
#if 0
# 5545
{ 
# 5546
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5548
return make_uint4(v.x, v.y, v.z, v.w); 
# 5549
} 
#endif
# 5623 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5628
::exit(___);}
#if 0
# 5624
{ 
# 5625
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5627
return v.x; 
# 5628
} 
#endif
# 5630 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5631
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5635
::exit(___);}
#if 0
# 5631
{ 
# 5632
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5634
return make_float1(v.x); 
# 5635
} 
#endif
# 5637 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5642
::exit(___);}
#if 0
# 5638
{ 
# 5639
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5641
return make_float2(v.x, v.y); 
# 5642
} 
#endif
# 5644 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5649
::exit(___);}
#if 0
# 5645
{ 
# 5646
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5648
return make_float4(v.x, v.y, v.z, v.w); 
# 5649
} 
#endif
# 5657 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5658
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5667
::exit(___);}
#if 0
# 5658
{ 
# 5662
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5664
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5666
return w.x; 
# 5667
} 
#endif
# 5669 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5670
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5675
::exit(___);}
#if 0
# 5670
{ 
# 5671
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5672
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5674
return w.x; 
# 5675
} 
#endif
# 5677 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5678
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5683
::exit(___);}
#if 0
# 5678
{ 
# 5679
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5680
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5682
return w.x; 
# 5683
} 
#endif
# 5685 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5691
::exit(___);}
#if 0
# 5686
{ 
# 5687
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5688
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5690
return make_float1(w.x); 
# 5691
} 
#endif
# 5693 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5699
::exit(___);}
#if 0
# 5694
{ 
# 5695
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5696
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5698
return make_float1(w.x); 
# 5699
} 
#endif
# 5701 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5702
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5707
::exit(___);}
#if 0
# 5702
{ 
# 5703
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5704
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5706
return make_float2(w.x, w.y); 
# 5707
} 
#endif
# 5709 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5710
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5715
::exit(___);}
#if 0
# 5710
{ 
# 5711
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5712
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5714
return make_float2(w.x, w.y); 
# 5715
} 
#endif
# 5717 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5718
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5723
::exit(___);}
#if 0
# 5718
{ 
# 5719
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5720
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5722
return make_float4(w.x, w.y, w.z, w.w); 
# 5723
} 
#endif
# 5725 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5731
::exit(___);}
#if 0
# 5726
{ 
# 5727
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5728
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5730
return make_float4(w.x, w.y, w.z, w.w); 
# 5731
} 
#endif
# 5739 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5745
::exit(___);}
#if 0
# 5740
{ 
# 5741
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5742
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5744
return w.x; 
# 5745
} 
#endif
# 5747 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5753
::exit(___);}
#if 0
# 5748
{ 
# 5749
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5750
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5752
return w.x; 
# 5753
} 
#endif
# 5755 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5756
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5761
::exit(___);}
#if 0
# 5756
{ 
# 5757
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5758
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5760
return make_float1(w.x); 
# 5761
} 
#endif
# 5763 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5764
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5769
::exit(___);}
#if 0
# 5764
{ 
# 5765
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5766
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5768
return make_float1(w.x); 
# 5769
} 
#endif
# 5771 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5772
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5777
::exit(___);}
#if 0
# 5772
{ 
# 5773
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5774
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5776
return make_float2(w.x, w.y); 
# 5777
} 
#endif
# 5779 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5780
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5785
::exit(___);}
#if 0
# 5780
{ 
# 5781
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5782
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5784
return make_float2(w.x, w.y); 
# 5785
} 
#endif
# 5787 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5793
::exit(___);}
#if 0
# 5788
{ 
# 5789
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5790
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5792
return make_float4(w.x, w.y, w.z, w.w); 
# 5793
} 
#endif
# 5795 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5796
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5801
::exit(___);}
#if 0
# 5796
{ 
# 5797
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5798
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5800
return make_float4(w.x, w.y, w.z, w.w); 
# 5801
} 
#endif
# 5809 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DLod(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5810
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5818
::exit(___);}
#if 0
# 5810
{ 
# 5814
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5817
return (char)(v.x); 
# 5818
} 
#endif
# 5820 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DLod(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5821
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5825
::exit(___);}
#if 0
# 5821
{ 
# 5822
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5824
return (signed char)(v.x); 
# 5825
} 
#endif
# 5827 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DLod(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5832
::exit(___);}
#if 0
# 5828
{ 
# 5829
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5831
return (unsigned char)(v.x); 
# 5832
} 
#endif
# 5834 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DLod(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5835
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5839
::exit(___);}
#if 0
# 5835
{ 
# 5836
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5838
return make_char1(v.x); 
# 5839
} 
#endif
# 5841 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DLod(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5842
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5846
::exit(___);}
#if 0
# 5842
{ 
# 5843
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5845
return make_uchar1(v.x); 
# 5846
} 
#endif
# 5848 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DLod(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5849
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5853
::exit(___);}
#if 0
# 5849
{ 
# 5850
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5852
return make_char2(v.x, v.y); 
# 5853
} 
#endif
# 5855 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DLod(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5856
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5860
::exit(___);}
#if 0
# 5856
{ 
# 5857
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5859
return make_uchar2(v.x, v.y); 
# 5860
} 
#endif
# 5862 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DLod(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5863
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5867
::exit(___);}
#if 0
# 5863
{ 
# 5864
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5866
return make_char4(v.x, v.y, v.z, v.w); 
# 5867
} 
#endif
# 5869 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DLod(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5870
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5874
::exit(___);}
#if 0
# 5870
{ 
# 5871
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5873
return make_uchar4(v.x, v.y, v.z, v.w); 
# 5874
} 
#endif
# 5882 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DLod(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5887
::exit(___);}
#if 0
# 5883
{ 
# 5884
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5886
return (short)(v.x); 
# 5887
} 
#endif
# 5889 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DLod(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5894
::exit(___);}
#if 0
# 5890
{ 
# 5891
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5893
return (unsigned short)(v.x); 
# 5894
} 
#endif
# 5896 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DLod(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5901
::exit(___);}
#if 0
# 5897
{ 
# 5898
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5900
return make_short1(v.x); 
# 5901
} 
#endif
# 5903 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DLod(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5904
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5908
::exit(___);}
#if 0
# 5904
{ 
# 5905
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5907
return make_ushort1(v.x); 
# 5908
} 
#endif
# 5910 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DLod(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5911
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5915
::exit(___);}
#if 0
# 5911
{ 
# 5912
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5914
return make_short2(v.x, v.y); 
# 5915
} 
#endif
# 5917 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DLod(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5918
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5922
::exit(___);}
#if 0
# 5918
{ 
# 5919
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5921
return make_ushort2(v.x, v.y); 
# 5922
} 
#endif
# 5924 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DLod(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5925
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5929
::exit(___);}
#if 0
# 5925
{ 
# 5926
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5928
return make_short4(v.x, v.y, v.z, v.w); 
# 5929
} 
#endif
# 5931 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DLod(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5932
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5936
::exit(___);}
#if 0
# 5932
{ 
# 5933
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5935
return make_ushort4(v.x, v.y, v.z, v.w); 
# 5936
} 
#endif
# 5944 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DLod(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5949
::exit(___);}
#if 0
# 5945
{ 
# 5946
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5948
return (int)(v.x); 
# 5949
} 
#endif
# 5951 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DLod(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5956
::exit(___);}
#if 0
# 5952
{ 
# 5953
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5955
return (unsigned)(v.x); 
# 5956
} 
#endif
# 5958 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DLod(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5963
::exit(___);}
#if 0
# 5959
{ 
# 5960
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5962
return make_int1(v.x); 
# 5963
} 
#endif
# 5965 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DLod(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5966
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5970
::exit(___);}
#if 0
# 5966
{ 
# 5967
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5969
return make_uint1(v.x); 
# 5970
} 
#endif
# 5972 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DLod(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5973
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5977
::exit(___);}
#if 0
# 5973
{ 
# 5974
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5976
return make_int2(v.x, v.y); 
# 5977
} 
#endif
# 5979 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DLod(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5980
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5984
::exit(___);}
#if 0
# 5980
{ 
# 5981
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5983
return make_uint2(v.x, v.y); 
# 5984
} 
#endif
# 5986 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DLod(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5987
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5991
::exit(___);}
#if 0
# 5987
{ 
# 5988
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5990
return make_int4(v.x, v.y, v.z, v.w); 
# 5991
} 
#endif
# 5993 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DLod(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5994
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5998
::exit(___);}
#if 0
# 5994
{ 
# 5995
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5997
return make_uint4(v.x, v.y, v.z, v.w); 
# 5998
} 
#endif
# 6072 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6073
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6077
::exit(___);}
#if 0
# 6073
{ 
# 6074
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6076
return v.x; 
# 6077
} 
#endif
# 6079 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6080
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6084
::exit(___);}
#if 0
# 6080
{ 
# 6081
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6083
return make_float1(v.x); 
# 6084
} 
#endif
# 6086 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6087
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6091
::exit(___);}
#if 0
# 6087
{ 
# 6088
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6090
return make_float2(v.x, v.y); 
# 6091
} 
#endif
# 6093 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6094
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6098
::exit(___);}
#if 0
# 6094
{ 
# 6095
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6097
return make_float4(v.x, v.y, v.z, v.w); 
# 6098
} 
#endif
# 6106 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6107
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6116
::exit(___);}
#if 0
# 6107
{ 
# 6111
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6113
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6115
return w.x; 
# 6116
} 
#endif
# 6118 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6119
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6124
::exit(___);}
#if 0
# 6119
{ 
# 6120
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6121
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6123
return w.x; 
# 6124
} 
#endif
# 6126 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6127
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6132
::exit(___);}
#if 0
# 6127
{ 
# 6128
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6129
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6131
return w.x; 
# 6132
} 
#endif
# 6134 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6135
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6140
::exit(___);}
#if 0
# 6135
{ 
# 6136
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6137
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6139
return make_float1(w.x); 
# 6140
} 
#endif
# 6142 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6143
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6148
::exit(___);}
#if 0
# 6143
{ 
# 6144
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6145
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6147
return make_float1(w.x); 
# 6148
} 
#endif
# 6150 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6151
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6156
::exit(___);}
#if 0
# 6151
{ 
# 6152
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6153
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6155
return make_float2(w.x, w.y); 
# 6156
} 
#endif
# 6158 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6159
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6164
::exit(___);}
#if 0
# 6159
{ 
# 6160
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6161
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6163
return make_float2(w.x, w.y); 
# 6164
} 
#endif
# 6166 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6167
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6172
::exit(___);}
#if 0
# 6167
{ 
# 6168
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6169
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6171
return make_float4(w.x, w.y, w.z, w.w); 
# 6172
} 
#endif
# 6174 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6175
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6180
::exit(___);}
#if 0
# 6175
{ 
# 6176
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6177
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6179
return make_float4(w.x, w.y, w.z, w.w); 
# 6180
} 
#endif
# 6188 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6189
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6194
::exit(___);}
#if 0
# 6189
{ 
# 6190
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6191
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6193
return w.x; 
# 6194
} 
#endif
# 6196 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6197
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6202
::exit(___);}
#if 0
# 6197
{ 
# 6198
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6199
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6201
return w.x; 
# 6202
} 
#endif
# 6204 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6205
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6210
::exit(___);}
#if 0
# 6205
{ 
# 6206
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6207
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6209
return make_float1(w.x); 
# 6210
} 
#endif
# 6212 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6213
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6218
::exit(___);}
#if 0
# 6213
{ 
# 6214
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6215
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6217
return make_float1(w.x); 
# 6218
} 
#endif
# 6220 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6221
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6226
::exit(___);}
#if 0
# 6221
{ 
# 6222
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6223
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6225
return make_float2(w.x, w.y); 
# 6226
} 
#endif
# 6228 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6229
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6234
::exit(___);}
#if 0
# 6229
{ 
# 6230
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6231
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6233
return make_float2(w.x, w.y); 
# 6234
} 
#endif
# 6236 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6237
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6242
::exit(___);}
#if 0
# 6237
{ 
# 6238
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6239
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6241
return make_float4(w.x, w.y, w.z, w.w); 
# 6242
} 
#endif
# 6244 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6245
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6250
::exit(___);}
#if 0
# 6245
{ 
# 6246
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6247
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6249
return make_float4(w.x, w.y, w.z, w.w); 
# 6250
} 
#endif
# 6258 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLod(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6259
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6267
::exit(___);}
#if 0
# 6259
{ 
# 6263
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6266
return (char)(v.x); 
# 6267
} 
#endif
# 6269 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLod(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6270
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6274
::exit(___);}
#if 0
# 6270
{ 
# 6271
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6273
return (signed char)(v.x); 
# 6274
} 
#endif
# 6276 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLod(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6277
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6281
::exit(___);}
#if 0
# 6277
{ 
# 6278
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6280
return (unsigned char)(v.x); 
# 6281
} 
#endif
# 6283 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLod(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6284
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6288
::exit(___);}
#if 0
# 6284
{ 
# 6285
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6287
return make_char1(v.x); 
# 6288
} 
#endif
# 6290 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLod(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6291
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6295
::exit(___);}
#if 0
# 6291
{ 
# 6292
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6294
return make_uchar1(v.x); 
# 6295
} 
#endif
# 6297 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLod(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6298
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6302
::exit(___);}
#if 0
# 6298
{ 
# 6299
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6301
return make_char2(v.x, v.y); 
# 6302
} 
#endif
# 6304 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLod(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6305
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6309
::exit(___);}
#if 0
# 6305
{ 
# 6306
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6308
return make_uchar2(v.x, v.y); 
# 6309
} 
#endif
# 6311 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLod(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6312
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6316
::exit(___);}
#if 0
# 6312
{ 
# 6313
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6315
return make_char4(v.x, v.y, v.z, v.w); 
# 6316
} 
#endif
# 6318 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLod(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6319
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6323
::exit(___);}
#if 0
# 6319
{ 
# 6320
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6322
return make_uchar4(v.x, v.y, v.z, v.w); 
# 6323
} 
#endif
# 6331 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLod(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6332
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6336
::exit(___);}
#if 0
# 6332
{ 
# 6333
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6335
return (short)(v.x); 
# 6336
} 
#endif
# 6338 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLod(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6339
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6343
::exit(___);}
#if 0
# 6339
{ 
# 6340
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6342
return (unsigned short)(v.x); 
# 6343
} 
#endif
# 6345 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLod(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6346
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6350
::exit(___);}
#if 0
# 6346
{ 
# 6347
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6349
return make_short1(v.x); 
# 6350
} 
#endif
# 6352 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLod(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6353
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6357
::exit(___);}
#if 0
# 6353
{ 
# 6354
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6356
return make_ushort1(v.x); 
# 6357
} 
#endif
# 6359 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLod(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6360
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6364
::exit(___);}
#if 0
# 6360
{ 
# 6361
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6363
return make_short2(v.x, v.y); 
# 6364
} 
#endif
# 6366 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLod(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6367
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6371
::exit(___);}
#if 0
# 6367
{ 
# 6368
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6370
return make_ushort2(v.x, v.y); 
# 6371
} 
#endif
# 6373 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLod(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6374
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6378
::exit(___);}
#if 0
# 6374
{ 
# 6375
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6377
return make_short4(v.x, v.y, v.z, v.w); 
# 6378
} 
#endif
# 6380 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLod(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6381
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6385
::exit(___);}
#if 0
# 6381
{ 
# 6382
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6384
return make_ushort4(v.x, v.y, v.z, v.w); 
# 6385
} 
#endif
# 6393 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLod(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6394
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6398
::exit(___);}
#if 0
# 6394
{ 
# 6395
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6397
return (int)(v.x); 
# 6398
} 
#endif
# 6400 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLod(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6405
::exit(___);}
#if 0
# 6401
{ 
# 6402
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6404
return (unsigned)(v.x); 
# 6405
} 
#endif
# 6407 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLod(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6408
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6412
::exit(___);}
#if 0
# 6408
{ 
# 6409
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6411
return make_int1(v.x); 
# 6412
} 
#endif
# 6414 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLod(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6415
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6419
::exit(___);}
#if 0
# 6415
{ 
# 6416
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6418
return make_uint1(v.x); 
# 6419
} 
#endif
# 6421 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLod(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6422
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6426
::exit(___);}
#if 0
# 6422
{ 
# 6423
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6425
return make_int2(v.x, v.y); 
# 6426
} 
#endif
# 6428 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLod(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6429
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6433
::exit(___);}
#if 0
# 6429
{ 
# 6430
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6432
return make_uint2(v.x, v.y); 
# 6433
} 
#endif
# 6435 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLod(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6436
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6440
::exit(___);}
#if 0
# 6436
{ 
# 6437
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6439
return make_int4(v.x, v.y, v.z, v.w); 
# 6440
} 
#endif
# 6442 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLod(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6443
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6447
::exit(___);}
#if 0
# 6443
{ 
# 6444
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6446
return make_uint4(v.x, v.y, v.z, v.w); 
# 6447
} 
#endif
# 6521 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6526
::exit(___);}
#if 0
# 6522
{ 
# 6523
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6525
return v.x; 
# 6526
} 
#endif
# 6528 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6533
::exit(___);}
#if 0
# 6529
{ 
# 6530
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6532
return make_float1(v.x); 
# 6533
} 
#endif
# 6535 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6540
::exit(___);}
#if 0
# 6536
{ 
# 6537
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6539
return make_float2(v.x, v.y); 
# 6540
} 
#endif
# 6542 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6547
::exit(___);}
#if 0
# 6543
{ 
# 6544
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6546
return make_float4(v.x, v.y, v.z, v.w); 
# 6547
} 
#endif
# 6555 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6556
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6565
::exit(___);}
#if 0
# 6556
{ 
# 6560
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6562
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6564
return w.x; 
# 6565
} 
#endif
# 6567 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6568
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6573
::exit(___);}
#if 0
# 6568
{ 
# 6569
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6570
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6572
return w.x; 
# 6573
} 
#endif
# 6575 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6576
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6581
::exit(___);}
#if 0
# 6576
{ 
# 6577
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6578
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6580
return w.x; 
# 6581
} 
#endif
# 6583 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6584
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6589
::exit(___);}
#if 0
# 6584
{ 
# 6585
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6586
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6588
return make_float1(w.x); 
# 6589
} 
#endif
# 6591 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6592
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6597
::exit(___);}
#if 0
# 6592
{ 
# 6593
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6594
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6596
return make_float1(w.x); 
# 6597
} 
#endif
# 6599 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6600
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6605
::exit(___);}
#if 0
# 6600
{ 
# 6601
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6602
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6604
return make_float2(w.x, w.y); 
# 6605
} 
#endif
# 6607 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6608
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6613
::exit(___);}
#if 0
# 6608
{ 
# 6609
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6610
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6612
return make_float2(w.x, w.y); 
# 6613
} 
#endif
# 6615 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6616
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6621
::exit(___);}
#if 0
# 6616
{ 
# 6617
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6618
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6620
return make_float4(w.x, w.y, w.z, w.w); 
# 6621
} 
#endif
# 6623 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6629
::exit(___);}
#if 0
# 6624
{ 
# 6625
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6626
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6628
return make_float4(w.x, w.y, w.z, w.w); 
# 6629
} 
#endif
# 6637 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6643
::exit(___);}
#if 0
# 6638
{ 
# 6639
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6640
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6642
return w.x; 
# 6643
} 
#endif
# 6645 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6651
::exit(___);}
#if 0
# 6646
{ 
# 6647
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6648
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6650
return w.x; 
# 6651
} 
#endif
# 6653 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6654
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6659
::exit(___);}
#if 0
# 6654
{ 
# 6655
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6656
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6658
return make_float1(w.x); 
# 6659
} 
#endif
# 6661 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6662
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6667
::exit(___);}
#if 0
# 6662
{ 
# 6663
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6664
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6666
return make_float1(w.x); 
# 6667
} 
#endif
# 6669 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6670
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6675
::exit(___);}
#if 0
# 6670
{ 
# 6671
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6672
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6674
return make_float2(w.x, w.y); 
# 6675
} 
#endif
# 6677 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6678
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6683
::exit(___);}
#if 0
# 6678
{ 
# 6679
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6680
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6682
return make_float2(w.x, w.y); 
# 6683
} 
#endif
# 6685 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6691
::exit(___);}
#if 0
# 6686
{ 
# 6687
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6688
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6690
return make_float4(w.x, w.y, w.z, w.w); 
# 6691
} 
#endif
# 6693 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6699
::exit(___);}
#if 0
# 6694
{ 
# 6695
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6696
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6698
return make_float4(w.x, w.y, w.z, w.w); 
# 6699
} 
#endif
# 6707 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayeredLod(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6708
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6716
::exit(___);}
#if 0
# 6708
{ 
# 6712
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6715
return (char)(v.x); 
# 6716
} 
#endif
# 6718 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayeredLod(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6723
::exit(___);}
#if 0
# 6719
{ 
# 6720
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6722
return (signed char)(v.x); 
# 6723
} 
#endif
# 6725 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6730
::exit(___);}
#if 0
# 6726
{ 
# 6727
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6729
return (unsigned char)(v.x); 
# 6730
} 
#endif
# 6732 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6733
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6737
::exit(___);}
#if 0
# 6733
{ 
# 6734
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6736
return make_char1(v.x); 
# 6737
} 
#endif
# 6739 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6744
::exit(___);}
#if 0
# 6740
{ 
# 6741
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6743
return make_uchar1(v.x); 
# 6744
} 
#endif
# 6746 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6747
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6751
::exit(___);}
#if 0
# 6747
{ 
# 6748
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6750
return make_char2(v.x, v.y); 
# 6751
} 
#endif
# 6753 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6754
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6758
::exit(___);}
#if 0
# 6754
{ 
# 6755
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6757
return make_uchar2(v.x, v.y); 
# 6758
} 
#endif
# 6760 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6761
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6765
::exit(___);}
#if 0
# 6761
{ 
# 6762
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6764
return make_char4(v.x, v.y, v.z, v.w); 
# 6765
} 
#endif
# 6767 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6768
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6772
::exit(___);}
#if 0
# 6768
{ 
# 6769
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6771
return make_uchar4(v.x, v.y, v.z, v.w); 
# 6772
} 
#endif
# 6780 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayeredLod(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6785
::exit(___);}
#if 0
# 6781
{ 
# 6782
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6784
return (short)(v.x); 
# 6785
} 
#endif
# 6787 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6792
::exit(___);}
#if 0
# 6788
{ 
# 6789
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6791
return (unsigned short)(v.x); 
# 6792
} 
#endif
# 6794 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6799
::exit(___);}
#if 0
# 6795
{ 
# 6796
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6798
return make_short1(v.x); 
# 6799
} 
#endif
# 6801 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6802
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6806
::exit(___);}
#if 0
# 6802
{ 
# 6803
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6805
return make_ushort1(v.x); 
# 6806
} 
#endif
# 6808 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6809
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6813
::exit(___);}
#if 0
# 6809
{ 
# 6810
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6812
return make_short2(v.x, v.y); 
# 6813
} 
#endif
# 6815 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6816
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6820
::exit(___);}
#if 0
# 6816
{ 
# 6817
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6819
return make_ushort2(v.x, v.y); 
# 6820
} 
#endif
# 6822 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6823
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6827
::exit(___);}
#if 0
# 6823
{ 
# 6824
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6826
return make_short4(v.x, v.y, v.z, v.w); 
# 6827
} 
#endif
# 6829 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6830
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6834
::exit(___);}
#if 0
# 6830
{ 
# 6831
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6833
return make_ushort4(v.x, v.y, v.z, v.w); 
# 6834
} 
#endif
# 6842 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayeredLod(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6847
::exit(___);}
#if 0
# 6843
{ 
# 6844
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6846
return (int)(v.x); 
# 6847
} 
#endif
# 6849 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayeredLod(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6854
::exit(___);}
#if 0
# 6850
{ 
# 6851
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6853
return (unsigned)(v.x); 
# 6854
} 
#endif
# 6856 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayeredLod(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6861
::exit(___);}
#if 0
# 6857
{ 
# 6858
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6860
return make_int1(v.x); 
# 6861
} 
#endif
# 6863 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayeredLod(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6868
::exit(___);}
#if 0
# 6864
{ 
# 6865
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6867
return make_uint1(v.x); 
# 6868
} 
#endif
# 6870 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayeredLod(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6871
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6875
::exit(___);}
#if 0
# 6871
{ 
# 6872
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6874
return make_int2(v.x, v.y); 
# 6875
} 
#endif
# 6877 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayeredLod(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6878
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6882
::exit(___);}
#if 0
# 6878
{ 
# 6879
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6881
return make_uint2(v.x, v.y); 
# 6882
} 
#endif
# 6884 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayeredLod(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6885
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6889
::exit(___);}
#if 0
# 6885
{ 
# 6886
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6888
return make_int4(v.x, v.y, v.z, v.w); 
# 6889
} 
#endif
# 6891 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayeredLod(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6892
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6896
::exit(___);}
#if 0
# 6892
{ 
# 6893
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6895
return make_uint4(v.x, v.y, v.z, v.w); 
# 6896
} 
#endif
# 6970 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6975
::exit(___);}
#if 0
# 6971
{ 
# 6972
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6974
return v.x; 
# 6975
} 
#endif
# 6977 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6982
::exit(___);}
#if 0
# 6978
{ 
# 6979
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6981
return make_float1(v.x); 
# 6982
} 
#endif
# 6984 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6985
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6989
::exit(___);}
#if 0
# 6985
{ 
# 6986
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6988
return make_float2(v.x, v.y); 
# 6989
} 
#endif
# 6991 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6996
::exit(___);}
#if 0
# 6992
{ 
# 6993
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6995
return make_float4(v.x, v.y, v.z, v.w); 
# 6996
} 
#endif
# 7004 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7005
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7014
::exit(___);}
#if 0
# 7005
{ 
# 7009
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7011
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7013
return w.x; 
# 7014
} 
#endif
# 7016 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7017
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7022
::exit(___);}
#if 0
# 7017
{ 
# 7018
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7019
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7021
return w.x; 
# 7022
} 
#endif
# 7024 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7025
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7030
::exit(___);}
#if 0
# 7025
{ 
# 7026
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7027
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7029
return w.x; 
# 7030
} 
#endif
# 7032 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7033
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7038
::exit(___);}
#if 0
# 7033
{ 
# 7034
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7035
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7037
return make_float1(w.x); 
# 7038
} 
#endif
# 7040 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7041
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7046
::exit(___);}
#if 0
# 7041
{ 
# 7042
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7043
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7045
return make_float1(w.x); 
# 7046
} 
#endif
# 7048 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7049
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7054
::exit(___);}
#if 0
# 7049
{ 
# 7050
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7051
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7053
return make_float2(w.x, w.y); 
# 7054
} 
#endif
# 7056 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7057
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7062
::exit(___);}
#if 0
# 7057
{ 
# 7058
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7059
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7061
return make_float2(w.x, w.y); 
# 7062
} 
#endif
# 7064 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7065
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7070
::exit(___);}
#if 0
# 7065
{ 
# 7066
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7067
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7069
return make_float4(w.x, w.y, w.z, w.w); 
# 7070
} 
#endif
# 7072 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7073
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7078
::exit(___);}
#if 0
# 7073
{ 
# 7074
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7075
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7077
return make_float4(w.x, w.y, w.z, w.w); 
# 7078
} 
#endif
# 7086 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7087
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7092
::exit(___);}
#if 0
# 7087
{ 
# 7088
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7089
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7091
return w.x; 
# 7092
} 
#endif
# 7094 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7100
::exit(___);}
#if 0
# 7095
{ 
# 7096
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7097
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7099
return w.x; 
# 7100
} 
#endif
# 7102 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7103
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7108
::exit(___);}
#if 0
# 7103
{ 
# 7104
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7105
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7107
return make_float1(w.x); 
# 7108
} 
#endif
# 7110 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7111
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7116
::exit(___);}
#if 0
# 7111
{ 
# 7112
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7113
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7115
return make_float1(w.x); 
# 7116
} 
#endif
# 7118 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7119
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7124
::exit(___);}
#if 0
# 7119
{ 
# 7120
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7121
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7123
return make_float2(w.x, w.y); 
# 7124
} 
#endif
# 7126 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7127
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7132
::exit(___);}
#if 0
# 7127
{ 
# 7128
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7129
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7131
return make_float2(w.x, w.y); 
# 7132
} 
#endif
# 7134 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7135
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7140
::exit(___);}
#if 0
# 7135
{ 
# 7136
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7137
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7139
return make_float4(w.x, w.y, w.z, w.w); 
# 7140
} 
#endif
# 7142 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7143
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7148
::exit(___);}
#if 0
# 7143
{ 
# 7144
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7145
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7147
return make_float4(w.x, w.y, w.z, w.w); 
# 7148
} 
#endif
# 7157 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DGrad(texture< char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7158
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7166
::exit(___);}
#if 0
# 7158
{ 
# 7162
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7165
return (char)(v.x); 
# 7166
} 
#endif
# 7168 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DGrad(texture< signed char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7169
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7173
::exit(___);}
#if 0
# 7169
{ 
# 7170
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7172
return (signed char)(v.x); 
# 7173
} 
#endif
# 7175 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DGrad(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7176
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7180
::exit(___);}
#if 0
# 7176
{ 
# 7177
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7179
return (unsigned char)(v.x); 
# 7180
} 
#endif
# 7182 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DGrad(texture< char1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7183
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7187
::exit(___);}
#if 0
# 7183
{ 
# 7184
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7186
return make_char1(v.x); 
# 7187
} 
#endif
# 7189 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DGrad(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7190
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7194
::exit(___);}
#if 0
# 7190
{ 
# 7191
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7193
return make_uchar1(v.x); 
# 7194
} 
#endif
# 7196 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DGrad(texture< char2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7197
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7201
::exit(___);}
#if 0
# 7197
{ 
# 7198
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7200
return make_char2(v.x, v.y); 
# 7201
} 
#endif
# 7203 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DGrad(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7204
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7208
::exit(___);}
#if 0
# 7204
{ 
# 7205
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7207
return make_uchar2(v.x, v.y); 
# 7208
} 
#endif
# 7210 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DGrad(texture< char4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7211
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7215
::exit(___);}
#if 0
# 7211
{ 
# 7212
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7214
return make_char4(v.x, v.y, v.z, v.w); 
# 7215
} 
#endif
# 7217 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DGrad(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7218
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7222
::exit(___);}
#if 0
# 7218
{ 
# 7219
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7221
return make_uchar4(v.x, v.y, v.z, v.w); 
# 7222
} 
#endif
# 7230 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DGrad(texture< short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7231
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7235
::exit(___);}
#if 0
# 7231
{ 
# 7232
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7234
return (short)(v.x); 
# 7235
} 
#endif
# 7237 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DGrad(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7238
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7242
::exit(___);}
#if 0
# 7238
{ 
# 7239
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7241
return (unsigned short)(v.x); 
# 7242
} 
#endif
# 7244 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DGrad(texture< short1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7245
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7249
::exit(___);}
#if 0
# 7245
{ 
# 7246
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7248
return make_short1(v.x); 
# 7249
} 
#endif
# 7251 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DGrad(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7252
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7256
::exit(___);}
#if 0
# 7252
{ 
# 7253
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7255
return make_ushort1(v.x); 
# 7256
} 
#endif
# 7258 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DGrad(texture< short2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7259
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7263
::exit(___);}
#if 0
# 7259
{ 
# 7260
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7262
return make_short2(v.x, v.y); 
# 7263
} 
#endif
# 7265 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DGrad(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7266
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7270
::exit(___);}
#if 0
# 7266
{ 
# 7267
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7269
return make_ushort2(v.x, v.y); 
# 7270
} 
#endif
# 7272 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DGrad(texture< short4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7273
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7277
::exit(___);}
#if 0
# 7273
{ 
# 7274
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7276
return make_short4(v.x, v.y, v.z, v.w); 
# 7277
} 
#endif
# 7279 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DGrad(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7280
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7284
::exit(___);}
#if 0
# 7280
{ 
# 7281
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7283
return make_ushort4(v.x, v.y, v.z, v.w); 
# 7284
} 
#endif
# 7292 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DGrad(texture< int, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7293
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7297
::exit(___);}
#if 0
# 7293
{ 
# 7294
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7296
return (int)(v.x); 
# 7297
} 
#endif
# 7299 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DGrad(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7300
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7304
::exit(___);}
#if 0
# 7300
{ 
# 7301
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7303
return (unsigned)(v.x); 
# 7304
} 
#endif
# 7306 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DGrad(texture< int1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7307
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7311
::exit(___);}
#if 0
# 7307
{ 
# 7308
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7310
return make_int1(v.x); 
# 7311
} 
#endif
# 7313 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DGrad(texture< uint1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7314
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7318
::exit(___);}
#if 0
# 7314
{ 
# 7315
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7317
return make_uint1(v.x); 
# 7318
} 
#endif
# 7320 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DGrad(texture< int2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7321
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7325
::exit(___);}
#if 0
# 7321
{ 
# 7322
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7324
return make_int2(v.x, v.y); 
# 7325
} 
#endif
# 7327 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DGrad(texture< uint2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7328
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7332
::exit(___);}
#if 0
# 7328
{ 
# 7329
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7331
return make_uint2(v.x, v.y); 
# 7332
} 
#endif
# 7334 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DGrad(texture< int4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7335
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7339
::exit(___);}
#if 0
# 7335
{ 
# 7336
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7338
return make_int4(v.x, v.y, v.z, v.w); 
# 7339
} 
#endif
# 7341 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DGrad(texture< uint4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7342
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7346
::exit(___);}
#if 0
# 7342
{ 
# 7343
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7345
return make_uint4(v.x, v.y, v.z, v.w); 
# 7346
} 
#endif
# 7426 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< float, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7427
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7431
::exit(___);}
#if 0
# 7427
{ 
# 7428
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7430
return v.x; 
# 7431
} 
#endif
# 7433 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< float1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7434
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7438
::exit(___);}
#if 0
# 7434
{ 
# 7435
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7437
return make_float1(v.x); 
# 7438
} 
#endif
# 7440 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< float2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7441
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7445
::exit(___);}
#if 0
# 7441
{ 
# 7442
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7444
return make_float2(v.x, v.y); 
# 7445
} 
#endif
# 7447 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< float4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7448
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7452
::exit(___);}
#if 0
# 7448
{ 
# 7449
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7451
return make_float4(v.x, v.y, v.z, v.w); 
# 7452
} 
#endif
# 7460 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7461
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7470
::exit(___);}
#if 0
# 7461
{ 
# 7465
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7467
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7469
return w.x; 
# 7470
} 
#endif
# 7472 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7473
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7478
::exit(___);}
#if 0
# 7473
{ 
# 7474
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7475
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7477
return w.x; 
# 7478
} 
#endif
# 7480 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7481
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7486
::exit(___);}
#if 0
# 7481
{ 
# 7482
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7483
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7485
return w.x; 
# 7486
} 
#endif
# 7488 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7489
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7494
::exit(___);}
#if 0
# 7489
{ 
# 7490
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7491
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7493
return make_float1(w.x); 
# 7494
} 
#endif
# 7496 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7497
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7502
::exit(___);}
#if 0
# 7497
{ 
# 7498
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7499
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7501
return make_float1(w.x); 
# 7502
} 
#endif
# 7504 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7505
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7510
::exit(___);}
#if 0
# 7505
{ 
# 7506
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7507
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7509
return make_float2(w.x, w.y); 
# 7510
} 
#endif
# 7512 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7513
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7518
::exit(___);}
#if 0
# 7513
{ 
# 7514
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7515
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7517
return make_float2(w.x, w.y); 
# 7518
} 
#endif
# 7520 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7521
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7526
::exit(___);}
#if 0
# 7521
{ 
# 7522
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7523
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7525
return make_float4(w.x, w.y, w.z, w.w); 
# 7526
} 
#endif
# 7528 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7529
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7534
::exit(___);}
#if 0
# 7529
{ 
# 7530
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7531
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7533
return make_float4(w.x, w.y, w.z, w.w); 
# 7534
} 
#endif
# 7542 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7543
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7548
::exit(___);}
#if 0
# 7543
{ 
# 7544
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7545
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7547
return w.x; 
# 7548
} 
#endif
# 7550 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7551
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7556
::exit(___);}
#if 0
# 7551
{ 
# 7552
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7553
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7555
return w.x; 
# 7556
} 
#endif
# 7558 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7559
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7564
::exit(___);}
#if 0
# 7559
{ 
# 7560
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7561
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7563
return make_float1(w.x); 
# 7564
} 
#endif
# 7566 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7567
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7572
::exit(___);}
#if 0
# 7567
{ 
# 7568
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7569
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7571
return make_float1(w.x); 
# 7572
} 
#endif
# 7574 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7575
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7580
::exit(___);}
#if 0
# 7575
{ 
# 7576
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7577
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7579
return make_float2(w.x, w.y); 
# 7580
} 
#endif
# 7582 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7583
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7588
::exit(___);}
#if 0
# 7583
{ 
# 7584
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7585
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7587
return make_float2(w.x, w.y); 
# 7588
} 
#endif
# 7590 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7591
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7596
::exit(___);}
#if 0
# 7591
{ 
# 7592
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7593
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7595
return make_float4(w.x, w.y, w.z, w.w); 
# 7596
} 
#endif
# 7598 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7599
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7604
::exit(___);}
#if 0
# 7599
{ 
# 7600
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7601
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7603
return make_float4(w.x, w.y, w.z, w.w); 
# 7604
} 
#endif
# 7612 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DGrad(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7613
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7621
::exit(___);}
#if 0
# 7613
{ 
# 7617
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7620
return (char)(v.x); 
# 7621
} 
#endif
# 7623 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DGrad(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7628
::exit(___);}
#if 0
# 7624
{ 
# 7625
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7627
return (signed char)(v.x); 
# 7628
} 
#endif
# 7630 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DGrad(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7631
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7635
::exit(___);}
#if 0
# 7631
{ 
# 7632
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7634
return (unsigned char)(v.x); 
# 7635
} 
#endif
# 7637 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DGrad(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7642
::exit(___);}
#if 0
# 7638
{ 
# 7639
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7641
return make_char1(v.x); 
# 7642
} 
#endif
# 7644 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DGrad(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7649
::exit(___);}
#if 0
# 7645
{ 
# 7646
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7648
return make_uchar1(v.x); 
# 7649
} 
#endif
# 7651 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DGrad(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7652
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7656
::exit(___);}
#if 0
# 7652
{ 
# 7653
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7655
return make_char2(v.x, v.y); 
# 7656
} 
#endif
# 7658 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DGrad(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7659
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7663
::exit(___);}
#if 0
# 7659
{ 
# 7660
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7662
return make_uchar2(v.x, v.y); 
# 7663
} 
#endif
# 7665 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DGrad(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7666
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7670
::exit(___);}
#if 0
# 7666
{ 
# 7667
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7669
return make_char4(v.x, v.y, v.z, v.w); 
# 7670
} 
#endif
# 7672 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DGrad(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7677
::exit(___);}
#if 0
# 7673
{ 
# 7674
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7676
return make_uchar4(v.x, v.y, v.z, v.w); 
# 7677
} 
#endif
# 7685 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DGrad(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7690
::exit(___);}
#if 0
# 7686
{ 
# 7687
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7689
return (short)(v.x); 
# 7690
} 
#endif
# 7692 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DGrad(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7693
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7697
::exit(___);}
#if 0
# 7693
{ 
# 7694
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7696
return (unsigned short)(v.x); 
# 7697
} 
#endif
# 7699 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DGrad(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7700
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7704
::exit(___);}
#if 0
# 7700
{ 
# 7701
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7703
return make_short1(v.x); 
# 7704
} 
#endif
# 7706 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DGrad(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7707
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7711
::exit(___);}
#if 0
# 7707
{ 
# 7708
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7710
return make_ushort1(v.x); 
# 7711
} 
#endif
# 7713 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DGrad(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7714
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7718
::exit(___);}
#if 0
# 7714
{ 
# 7715
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7717
return make_short2(v.x, v.y); 
# 7718
} 
#endif
# 7720 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DGrad(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7721
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7725
::exit(___);}
#if 0
# 7721
{ 
# 7722
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7724
return make_ushort2(v.x, v.y); 
# 7725
} 
#endif
# 7727 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DGrad(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7728
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7732
::exit(___);}
#if 0
# 7728
{ 
# 7729
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7731
return make_short4(v.x, v.y, v.z, v.w); 
# 7732
} 
#endif
# 7734 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DGrad(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7739
::exit(___);}
#if 0
# 7735
{ 
# 7736
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7738
return make_ushort4(v.x, v.y, v.z, v.w); 
# 7739
} 
#endif
# 7747 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DGrad(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7752
::exit(___);}
#if 0
# 7748
{ 
# 7749
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7751
return (int)(v.x); 
# 7752
} 
#endif
# 7754 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DGrad(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7755
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7759
::exit(___);}
#if 0
# 7755
{ 
# 7756
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7758
return (unsigned)(v.x); 
# 7759
} 
#endif
# 7761 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DGrad(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7762
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7766
::exit(___);}
#if 0
# 7762
{ 
# 7763
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7765
return make_int1(v.x); 
# 7766
} 
#endif
# 7768 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DGrad(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7769
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7773
::exit(___);}
#if 0
# 7769
{ 
# 7770
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7772
return make_uint1(v.x); 
# 7773
} 
#endif
# 7775 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DGrad(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7776
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7780
::exit(___);}
#if 0
# 7776
{ 
# 7777
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7779
return make_int2(v.x, v.y); 
# 7780
} 
#endif
# 7782 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DGrad(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7783
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7787
::exit(___);}
#if 0
# 7783
{ 
# 7784
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7786
return make_uint2(v.x, v.y); 
# 7787
} 
#endif
# 7789 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DGrad(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7790
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7794
::exit(___);}
#if 0
# 7790
{ 
# 7791
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7793
return make_int4(v.x, v.y, v.z, v.w); 
# 7794
} 
#endif
# 7796 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DGrad(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7797
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7801
::exit(___);}
#if 0
# 7797
{ 
# 7798
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7800
return make_uint4(v.x, v.y, v.z, v.w); 
# 7801
} 
#endif
# 7875 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7876
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7880
::exit(___);}
#if 0
# 7876
{ 
# 7877
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7879
return v.x; 
# 7880
} 
#endif
# 7882 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7887
::exit(___);}
#if 0
# 7883
{ 
# 7884
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7886
return make_float1(v.x); 
# 7887
} 
#endif
# 7889 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7894
::exit(___);}
#if 0
# 7890
{ 
# 7891
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7893
return make_float2(v.x, v.y); 
# 7894
} 
#endif
# 7896 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7901
::exit(___);}
#if 0
# 7897
{ 
# 7898
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7900
return make_float4(v.x, v.y, v.z, v.w); 
# 7901
} 
#endif
# 7909 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7910
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7919
::exit(___);}
#if 0
# 7910
{ 
# 7914
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7916
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7918
return w.x; 
# 7919
} 
#endif
# 7921 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7927
::exit(___);}
#if 0
# 7922
{ 
# 7923
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7924
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7926
return w.x; 
# 7927
} 
#endif
# 7929 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7935
::exit(___);}
#if 0
# 7930
{ 
# 7931
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7932
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7934
return w.x; 
# 7935
} 
#endif
# 7937 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7943
::exit(___);}
#if 0
# 7938
{ 
# 7939
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7940
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7942
return make_float1(w.x); 
# 7943
} 
#endif
# 7945 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7951
::exit(___);}
#if 0
# 7946
{ 
# 7947
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7948
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7950
return make_float1(w.x); 
# 7951
} 
#endif
# 7953 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7954
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7959
::exit(___);}
#if 0
# 7954
{ 
# 7955
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7956
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7958
return make_float2(w.x, w.y); 
# 7959
} 
#endif
# 7961 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7962
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7967
::exit(___);}
#if 0
# 7962
{ 
# 7963
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7964
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7966
return make_float2(w.x, w.y); 
# 7967
} 
#endif
# 7969 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7970
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7975
::exit(___);}
#if 0
# 7970
{ 
# 7971
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7972
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7974
return make_float4(w.x, w.y, w.z, w.w); 
# 7975
} 
#endif
# 7977 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7983
::exit(___);}
#if 0
# 7978
{ 
# 7979
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7980
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7982
return make_float4(w.x, w.y, w.z, w.w); 
# 7983
} 
#endif
# 7991 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7997
::exit(___);}
#if 0
# 7992
{ 
# 7993
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7994
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7996
return w.x; 
# 7997
} 
#endif
# 7999 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8005
::exit(___);}
#if 0
# 8000
{ 
# 8001
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8002
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8004
return w.x; 
# 8005
} 
#endif
# 8007 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8008
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8013
::exit(___);}
#if 0
# 8008
{ 
# 8009
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8010
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8012
return make_float1(w.x); 
# 8013
} 
#endif
# 8015 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8016
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8021
::exit(___);}
#if 0
# 8016
{ 
# 8017
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8018
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8020
return make_float1(w.x); 
# 8021
} 
#endif
# 8023 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8024
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8029
::exit(___);}
#if 0
# 8024
{ 
# 8025
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8026
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8028
return make_float2(w.x, w.y); 
# 8029
} 
#endif
# 8031 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8032
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8037
::exit(___);}
#if 0
# 8032
{ 
# 8033
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8034
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8036
return make_float2(w.x, w.y); 
# 8037
} 
#endif
# 8039 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8040
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8045
::exit(___);}
#if 0
# 8040
{ 
# 8041
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8042
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8044
return make_float4(w.x, w.y, w.z, w.w); 
# 8045
} 
#endif
# 8047 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8048
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8053
::exit(___);}
#if 0
# 8048
{ 
# 8049
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8050
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8052
return make_float4(w.x, w.y, w.z, w.w); 
# 8053
} 
#endif
# 8061 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredGrad(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8062
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8070
::exit(___);}
#if 0
# 8062
{ 
# 8066
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8069
return (char)(v.x); 
# 8070
} 
#endif
# 8072 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredGrad(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8073
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8077
::exit(___);}
#if 0
# 8073
{ 
# 8074
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8076
return (signed char)(v.x); 
# 8077
} 
#endif
# 8079 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8080
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8084
::exit(___);}
#if 0
# 8080
{ 
# 8081
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8083
return (unsigned char)(v.x); 
# 8084
} 
#endif
# 8086 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8087
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8091
::exit(___);}
#if 0
# 8087
{ 
# 8088
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8090
return make_char1(v.x); 
# 8091
} 
#endif
# 8093 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8094
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8098
::exit(___);}
#if 0
# 8094
{ 
# 8095
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8097
return make_uchar1(v.x); 
# 8098
} 
#endif
# 8100 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8101
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8105
::exit(___);}
#if 0
# 8101
{ 
# 8102
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8104
return make_char2(v.x, v.y); 
# 8105
} 
#endif
# 8107 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8108
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8112
::exit(___);}
#if 0
# 8108
{ 
# 8109
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8111
return make_uchar2(v.x, v.y); 
# 8112
} 
#endif
# 8114 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8115
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8119
::exit(___);}
#if 0
# 8115
{ 
# 8116
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8118
return make_char4(v.x, v.y, v.z, v.w); 
# 8119
} 
#endif
# 8121 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8122
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8126
::exit(___);}
#if 0
# 8122
{ 
# 8123
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8125
return make_uchar4(v.x, v.y, v.z, v.w); 
# 8126
} 
#endif
# 8134 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredGrad(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8135
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8139
::exit(___);}
#if 0
# 8135
{ 
# 8136
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8138
return (short)(v.x); 
# 8139
} 
#endif
# 8141 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8142
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8146
::exit(___);}
#if 0
# 8142
{ 
# 8143
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8145
return (unsigned short)(v.x); 
# 8146
} 
#endif
# 8148 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8149
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8153
::exit(___);}
#if 0
# 8149
{ 
# 8150
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8152
return make_short1(v.x); 
# 8153
} 
#endif
# 8155 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8156
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8160
::exit(___);}
#if 0
# 8156
{ 
# 8157
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8159
return make_ushort1(v.x); 
# 8160
} 
#endif
# 8162 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8163
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8167
::exit(___);}
#if 0
# 8163
{ 
# 8164
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8166
return make_short2(v.x, v.y); 
# 8167
} 
#endif
# 8169 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8170
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8174
::exit(___);}
#if 0
# 8170
{ 
# 8171
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8173
return make_ushort2(v.x, v.y); 
# 8174
} 
#endif
# 8176 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8177
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8181
::exit(___);}
#if 0
# 8177
{ 
# 8178
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8180
return make_short4(v.x, v.y, v.z, v.w); 
# 8181
} 
#endif
# 8183 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8184
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8188
::exit(___);}
#if 0
# 8184
{ 
# 8185
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8187
return make_ushort4(v.x, v.y, v.z, v.w); 
# 8188
} 
#endif
# 8196 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredGrad(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8197
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8201
::exit(___);}
#if 0
# 8197
{ 
# 8198
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8200
return (int)(v.x); 
# 8201
} 
#endif
# 8203 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredGrad(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8204
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8208
::exit(___);}
#if 0
# 8204
{ 
# 8205
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8207
return (unsigned)(v.x); 
# 8208
} 
#endif
# 8210 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredGrad(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8211
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8215
::exit(___);}
#if 0
# 8211
{ 
# 8212
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8214
return make_int1(v.x); 
# 8215
} 
#endif
# 8217 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredGrad(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8218
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8222
::exit(___);}
#if 0
# 8218
{ 
# 8219
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8221
return make_uint1(v.x); 
# 8222
} 
#endif
# 8224 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredGrad(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8225
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8229
::exit(___);}
#if 0
# 8225
{ 
# 8226
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8228
return make_int2(v.x, v.y); 
# 8229
} 
#endif
# 8231 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredGrad(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8232
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8236
::exit(___);}
#if 0
# 8232
{ 
# 8233
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8235
return make_uint2(v.x, v.y); 
# 8236
} 
#endif
# 8238 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredGrad(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8239
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8243
::exit(___);}
#if 0
# 8239
{ 
# 8240
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8242
return make_int4(v.x, v.y, v.z, v.w); 
# 8243
} 
#endif
# 8245 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredGrad(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8246
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8250
::exit(___);}
#if 0
# 8246
{ 
# 8247
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8249
return make_uint4(v.x, v.y, v.z, v.w); 
# 8250
} 
#endif
# 8324 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8325
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8329
::exit(___);}
#if 0
# 8325
{ 
# 8326
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8328
return v.x; 
# 8329
} 
#endif
# 8331 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8332
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8336
::exit(___);}
#if 0
# 8332
{ 
# 8333
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8335
return make_float1(v.x); 
# 8336
} 
#endif
# 8338 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8339
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8343
::exit(___);}
#if 0
# 8339
{ 
# 8340
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8342
return make_float2(v.x, v.y); 
# 8343
} 
#endif
# 8345 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8346
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8350
::exit(___);}
#if 0
# 8346
{ 
# 8347
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8349
return make_float4(v.x, v.y, v.z, v.w); 
# 8350
} 
#endif
# 8358 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8359
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8368
::exit(___);}
#if 0
# 8359
{ 
# 8363
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8365
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8367
return w.x; 
# 8368
} 
#endif
# 8370 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8371
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8376
::exit(___);}
#if 0
# 8371
{ 
# 8372
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8375
return w.x; 
# 8376
} 
#endif
# 8378 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8379
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8384
::exit(___);}
#if 0
# 8379
{ 
# 8380
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8383
return w.x; 
# 8384
} 
#endif
# 8386 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8387
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8392
::exit(___);}
#if 0
# 8387
{ 
# 8388
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8389
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8391
return make_float1(w.x); 
# 8392
} 
#endif
# 8394 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8395
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8400
::exit(___);}
#if 0
# 8395
{ 
# 8396
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8397
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8399
return make_float1(w.x); 
# 8400
} 
#endif
# 8402 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8403
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8408
::exit(___);}
#if 0
# 8403
{ 
# 8404
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8405
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8407
return make_float2(w.x, w.y); 
# 8408
} 
#endif
# 8410 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8411
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8416
::exit(___);}
#if 0
# 8411
{ 
# 8412
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8413
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8415
return make_float2(w.x, w.y); 
# 8416
} 
#endif
# 8418 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8419
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8424
::exit(___);}
#if 0
# 8419
{ 
# 8420
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8421
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8423
return make_float4(w.x, w.y, w.z, w.w); 
# 8424
} 
#endif
# 8426 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8427
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8432
::exit(___);}
#if 0
# 8427
{ 
# 8428
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8429
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8431
return make_float4(w.x, w.y, w.z, w.w); 
# 8432
} 
#endif
# 8440 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8441
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8446
::exit(___);}
#if 0
# 8441
{ 
# 8442
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8443
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8445
return w.x; 
# 8446
} 
#endif
# 8448 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8449
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8454
::exit(___);}
#if 0
# 8449
{ 
# 8450
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8451
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8453
return w.x; 
# 8454
} 
#endif
# 8456 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8457
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8462
::exit(___);}
#if 0
# 8457
{ 
# 8458
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8459
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8461
return make_float1(w.x); 
# 8462
} 
#endif
# 8464 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8465
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8470
::exit(___);}
#if 0
# 8465
{ 
# 8466
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8467
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8469
return make_float1(w.x); 
# 8470
} 
#endif
# 8472 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8473
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8478
::exit(___);}
#if 0
# 8473
{ 
# 8474
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8475
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8477
return make_float2(w.x, w.y); 
# 8478
} 
#endif
# 8480 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8481
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8486
::exit(___);}
#if 0
# 8481
{ 
# 8482
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8483
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8485
return make_float2(w.x, w.y); 
# 8486
} 
#endif
# 8488 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8489
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8494
::exit(___);}
#if 0
# 8489
{ 
# 8490
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8491
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8493
return make_float4(w.x, w.y, w.z, w.w); 
# 8494
} 
#endif
# 8496 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8497
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8502
::exit(___);}
#if 0
# 8497
{ 
# 8498
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8499
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8501
return make_float4(w.x, w.y, w.z, w.w); 
# 8502
} 
#endif
# 8510 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredGrad(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8519
::exit(___);}
#if 0
# 8511
{ 
# 8515
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8518
return (char)(v.x); 
# 8519
} 
#endif
# 8521 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredGrad(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8526
::exit(___);}
#if 0
# 8522
{ 
# 8523
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8525
return (signed char)(v.x); 
# 8526
} 
#endif
# 8528 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8533
::exit(___);}
#if 0
# 8529
{ 
# 8530
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8532
return (unsigned char)(v.x); 
# 8533
} 
#endif
# 8535 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8540
::exit(___);}
#if 0
# 8536
{ 
# 8537
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8539
return make_char1(v.x); 
# 8540
} 
#endif
# 8542 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8547
::exit(___);}
#if 0
# 8543
{ 
# 8544
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8546
return make_uchar1(v.x); 
# 8547
} 
#endif
# 8549 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8550
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8554
::exit(___);}
#if 0
# 8550
{ 
# 8551
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8553
return make_char2(v.x, v.y); 
# 8554
} 
#endif
# 8556 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8557
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8561
::exit(___);}
#if 0
# 8557
{ 
# 8558
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8560
return make_uchar2(v.x, v.y); 
# 8561
} 
#endif
# 8563 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8564
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8568
::exit(___);}
#if 0
# 8564
{ 
# 8565
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8567
return make_char4(v.x, v.y, v.z, v.w); 
# 8568
} 
#endif
# 8570 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8575
::exit(___);}
#if 0
# 8571
{ 
# 8572
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8574
return make_uchar4(v.x, v.y, v.z, v.w); 
# 8575
} 
#endif
# 8583 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredGrad(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8584
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8588
::exit(___);}
#if 0
# 8584
{ 
# 8585
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8587
return (short)(v.x); 
# 8588
} 
#endif
# 8590 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8595
::exit(___);}
#if 0
# 8591
{ 
# 8592
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8594
return (unsigned short)(v.x); 
# 8595
} 
#endif
# 8597 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8602
::exit(___);}
#if 0
# 8598
{ 
# 8599
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8601
return make_short1(v.x); 
# 8602
} 
#endif
# 8604 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8605
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8609
::exit(___);}
#if 0
# 8605
{ 
# 8606
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8608
return make_ushort1(v.x); 
# 8609
} 
#endif
# 8611 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8612
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8616
::exit(___);}
#if 0
# 8612
{ 
# 8613
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8615
return make_short2(v.x, v.y); 
# 8616
} 
#endif
# 8618 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8619
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8623
::exit(___);}
#if 0
# 8619
{ 
# 8620
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8622
return make_ushort2(v.x, v.y); 
# 8623
} 
#endif
# 8625 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8626
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8630
::exit(___);}
#if 0
# 8626
{ 
# 8627
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8629
return make_short4(v.x, v.y, v.z, v.w); 
# 8630
} 
#endif
# 8632 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8637
::exit(___);}
#if 0
# 8633
{ 
# 8634
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8636
return make_ushort4(v.x, v.y, v.z, v.w); 
# 8637
} 
#endif
# 8645 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredGrad(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8650
::exit(___);}
#if 0
# 8646
{ 
# 8647
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8649
return (int)(v.x); 
# 8650
} 
#endif
# 8652 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredGrad(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8653
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8657
::exit(___);}
#if 0
# 8653
{ 
# 8654
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8656
return (unsigned)(v.x); 
# 8657
} 
#endif
# 8659 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredGrad(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8664
::exit(___);}
#if 0
# 8660
{ 
# 8661
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8663
return make_int1(v.x); 
# 8664
} 
#endif
# 8666 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredGrad(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8667
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8671
::exit(___);}
#if 0
# 8667
{ 
# 8668
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8670
return make_uint1(v.x); 
# 8671
} 
#endif
# 8673 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredGrad(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8674
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8678
::exit(___);}
#if 0
# 8674
{ 
# 8675
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8677
return make_int2(v.x, v.y); 
# 8678
} 
#endif
# 8680 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredGrad(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8685
::exit(___);}
#if 0
# 8681
{ 
# 8682
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8684
return make_uint2(v.x, v.y); 
# 8685
} 
#endif
# 8687 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredGrad(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8692
::exit(___);}
#if 0
# 8688
{ 
# 8689
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8691
return make_int4(v.x, v.y, v.z, v.w); 
# 8692
} 
#endif
# 8694 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredGrad(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8695
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8699
::exit(___);}
#if 0
# 8695
{ 
# 8696
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8698
return make_uint4(v.x, v.y, v.z, v.w); 
# 8699
} 
#endif
# 8773 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8774
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8778
::exit(___);}
#if 0
# 8774
{ 
# 8775
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8777
return v.x; 
# 8778
} 
#endif
# 8780 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8785
::exit(___);}
#if 0
# 8781
{ 
# 8782
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8784
return make_float1(v.x); 
# 8785
} 
#endif
# 8787 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8792
::exit(___);}
#if 0
# 8788
{ 
# 8789
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8791
return make_float2(v.x, v.y); 
# 8792
} 
#endif
# 8794 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8799
::exit(___);}
#if 0
# 8795
{ 
# 8796
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8798
return make_float4(v.x, v.y, v.z, v.w); 
# 8799
} 
#endif
# 8807 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8808
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8817
::exit(___);}
#if 0
# 8808
{ 
# 8812
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8814
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8816
return w.x; 
# 8817
} 
#endif
# 8819 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8825
::exit(___);}
#if 0
# 8820
{ 
# 8821
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8822
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8824
return w.x; 
# 8825
} 
#endif
# 8827 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8833
::exit(___);}
#if 0
# 8828
{ 
# 8829
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8830
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8832
return w.x; 
# 8833
} 
#endif
# 8835 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8841
::exit(___);}
#if 0
# 8836
{ 
# 8837
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8838
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8840
return make_float1(w.x); 
# 8841
} 
#endif
# 8843 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8844
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8849
::exit(___);}
#if 0
# 8844
{ 
# 8845
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8846
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8848
return make_float1(w.x); 
# 8849
} 
#endif
# 8851 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8852
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8857
::exit(___);}
#if 0
# 8852
{ 
# 8853
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8854
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8856
return make_float2(w.x, w.y); 
# 8857
} 
#endif
# 8859 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8860
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8865
::exit(___);}
#if 0
# 8860
{ 
# 8861
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8862
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8864
return make_float2(w.x, w.y); 
# 8865
} 
#endif
# 8867 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8868
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8873
::exit(___);}
#if 0
# 8868
{ 
# 8869
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8870
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8872
return make_float4(w.x, w.y, w.z, w.w); 
# 8873
} 
#endif
# 8875 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8876
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8881
::exit(___);}
#if 0
# 8876
{ 
# 8877
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8878
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8880
return make_float4(w.x, w.y, w.z, w.w); 
# 8881
} 
#endif
# 8889 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8895
::exit(___);}
#if 0
# 8890
{ 
# 8891
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8892
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8894
return w.x; 
# 8895
} 
#endif
# 8897 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8903
::exit(___);}
#if 0
# 8898
{ 
# 8899
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8900
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8902
return w.x; 
# 8903
} 
#endif
# 8905 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8906
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8911
::exit(___);}
#if 0
# 8906
{ 
# 8907
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8908
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8910
return make_float1(w.x); 
# 8911
} 
#endif
# 8913 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8914
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8919
::exit(___);}
#if 0
# 8914
{ 
# 8915
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8916
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8918
return make_float1(w.x); 
# 8919
} 
#endif
# 8921 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8927
::exit(___);}
#if 0
# 8922
{ 
# 8923
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8924
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8926
return make_float2(w.x, w.y); 
# 8927
} 
#endif
# 8929 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8935
::exit(___);}
#if 0
# 8930
{ 
# 8931
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8932
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8934
return make_float2(w.x, w.y); 
# 8935
} 
#endif
# 8937 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8943
::exit(___);}
#if 0
# 8938
{ 
# 8939
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8940
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8942
return make_float4(w.x, w.y, w.z, w.w); 
# 8943
} 
#endif
# 8945 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8951
::exit(___);}
#if 0
# 8946
{ 
# 8947
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8948
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8950
return make_float4(w.x, w.y, w.z, w.w); 
# 8951
} 
#endif
# 8959 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DGrad(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 8968
::exit(___);}
#if 0
# 8960
{ 
# 8964
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 8967
return (char)(v.x); 
# 8968
} 
#endif
# 8970 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DGrad(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 8975
::exit(___);}
#if 0
# 8971
{ 
# 8972
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 8974
return (signed char)(v.x); 
# 8975
} 
#endif
# 8977 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DGrad(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 8982
::exit(___);}
#if 0
# 8978
{ 
# 8979
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 8981
return (unsigned char)(v.x); 
# 8982
} 
#endif
# 8984 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DGrad(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8985
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 8989
::exit(___);}
#if 0
# 8985
{ 
# 8986
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 8988
return make_char1(v.x); 
# 8989
} 
#endif
# 8991 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DGrad(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 8996
::exit(___);}
#if 0
# 8992
{ 
# 8993
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 8995
return make_uchar1(v.x); 
# 8996
} 
#endif
# 8998 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DGrad(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 8999
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9003
::exit(___);}
#if 0
# 8999
{ 
# 9000
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9002
return make_char2(v.x, v.y); 
# 9003
} 
#endif
# 9005 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DGrad(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9006
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9010
::exit(___);}
#if 0
# 9006
{ 
# 9007
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9009
return make_uchar2(v.x, v.y); 
# 9010
} 
#endif
# 9012 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DGrad(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9013
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9017
::exit(___);}
#if 0
# 9013
{ 
# 9014
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9016
return make_char4(v.x, v.y, v.z, v.w); 
# 9017
} 
#endif
# 9019 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DGrad(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9020
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9024
::exit(___);}
#if 0
# 9020
{ 
# 9021
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9023
return make_uchar4(v.x, v.y, v.z, v.w); 
# 9024
} 
#endif
# 9032 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DGrad(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9033
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9037
::exit(___);}
#if 0
# 9033
{ 
# 9034
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9036
return (short)(v.x); 
# 9037
} 
#endif
# 9039 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DGrad(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9040
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9044
::exit(___);}
#if 0
# 9040
{ 
# 9041
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9043
return (unsigned short)(v.x); 
# 9044
} 
#endif
# 9046 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DGrad(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9047
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9051
::exit(___);}
#if 0
# 9047
{ 
# 9048
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9050
return make_short1(v.x); 
# 9051
} 
#endif
# 9053 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DGrad(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9054
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9058
::exit(___);}
#if 0
# 9054
{ 
# 9055
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9057
return make_ushort1(v.x); 
# 9058
} 
#endif
# 9060 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DGrad(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9061
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9065
::exit(___);}
#if 0
# 9061
{ 
# 9062
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9064
return make_short2(v.x, v.y); 
# 9065
} 
#endif
# 9067 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DGrad(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9068
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9072
::exit(___);}
#if 0
# 9068
{ 
# 9069
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9071
return make_ushort2(v.x, v.y); 
# 9072
} 
#endif
# 9074 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DGrad(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9075
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9079
::exit(___);}
#if 0
# 9075
{ 
# 9076
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9078
return make_short4(v.x, v.y, v.z, v.w); 
# 9079
} 
#endif
# 9081 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DGrad(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9082
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9086
::exit(___);}
#if 0
# 9082
{ 
# 9083
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9085
return make_ushort4(v.x, v.y, v.z, v.w); 
# 9086
} 
#endif
# 9094 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DGrad(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9099
::exit(___);}
#if 0
# 9095
{ 
# 9096
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9098
return (int)(v.x); 
# 9099
} 
#endif
# 9101 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DGrad(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9102
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9106
::exit(___);}
#if 0
# 9102
{ 
# 9103
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9105
return (unsigned)(v.x); 
# 9106
} 
#endif
# 9108 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DGrad(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9109
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9113
::exit(___);}
#if 0
# 9109
{ 
# 9110
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9112
return make_int1(v.x); 
# 9113
} 
#endif
# 9115 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DGrad(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9116
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9120
::exit(___);}
#if 0
# 9116
{ 
# 9117
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9119
return make_uint1(v.x); 
# 9120
} 
#endif
# 9122 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DGrad(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9123
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9127
::exit(___);}
#if 0
# 9123
{ 
# 9124
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9126
return make_int2(v.x, v.y); 
# 9127
} 
#endif
# 9129 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DGrad(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9134
::exit(___);}
#if 0
# 9130
{ 
# 9131
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9133
return make_uint2(v.x, v.y); 
# 9134
} 
#endif
# 9136 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DGrad(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9137
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9141
::exit(___);}
#if 0
# 9137
{ 
# 9138
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9140
return make_int4(v.x, v.y, v.z, v.w); 
# 9141
} 
#endif
# 9143 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DGrad(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9144
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9148
::exit(___);}
#if 0
# 9144
{ 
# 9145
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9147
return make_uint4(v.x, v.y, v.z, v.w); 
# 9148
} 
#endif
# 9222 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9223
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9227
::exit(___);}
#if 0
# 9223
{ 
# 9224
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9226
return v.x; 
# 9227
} 
#endif
# 9229 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9230
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9234
::exit(___);}
#if 0
# 9230
{ 
# 9231
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9233
return make_float1(v.x); 
# 9234
} 
#endif
# 9236 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9237
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9241
::exit(___);}
#if 0
# 9237
{ 
# 9238
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9240
return make_float2(v.x, v.y); 
# 9241
} 
#endif
# 9243 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9244
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9248
::exit(___);}
#if 0
# 9244
{ 
# 9245
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9247
return make_float4(v.x, v.y, v.z, v.w); 
# 9248
} 
#endif
# 9256 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9257
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9266
::exit(___);}
#if 0
# 9257
{ 
# 9261
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9263
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9265
return w.x; 
# 9266
} 
#endif
# 9268 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9269
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9274
::exit(___);}
#if 0
# 9269
{ 
# 9270
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9271
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9273
return w.x; 
# 9274
} 
#endif
# 9276 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9277
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9282
::exit(___);}
#if 0
# 9277
{ 
# 9278
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9279
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9281
return w.x; 
# 9282
} 
#endif
# 9284 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9285
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9290
::exit(___);}
#if 0
# 9285
{ 
# 9286
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9287
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9289
return make_float1(w.x); 
# 9290
} 
#endif
# 9292 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9293
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9298
::exit(___);}
#if 0
# 9293
{ 
# 9294
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9295
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9297
return make_float1(w.x); 
# 9298
} 
#endif
# 9300 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9301
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9306
::exit(___);}
#if 0
# 9301
{ 
# 9302
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9303
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9305
return make_float2(w.x, w.y); 
# 9306
} 
#endif
# 9308 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9309
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9314
::exit(___);}
#if 0
# 9309
{ 
# 9310
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9311
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9313
return make_float2(w.x, w.y); 
# 9314
} 
#endif
# 9316 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9317
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9322
::exit(___);}
#if 0
# 9317
{ 
# 9318
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9319
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9321
return make_float4(w.x, w.y, w.z, w.w); 
# 9322
} 
#endif
# 9324 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9325
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9330
::exit(___);}
#if 0
# 9325
{ 
# 9326
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9327
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9329
return make_float4(w.x, w.y, w.z, w.w); 
# 9330
} 
#endif
# 9338 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9339
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9344
::exit(___);}
#if 0
# 9339
{ 
# 9340
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9343
return w.x; 
# 9344
} 
#endif
# 9346 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9347
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9352
::exit(___);}
#if 0
# 9347
{ 
# 9348
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9351
return w.x; 
# 9352
} 
#endif
# 9354 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9355
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9360
::exit(___);}
#if 0
# 9355
{ 
# 9356
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9357
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9359
return make_float1(w.x); 
# 9360
} 
#endif
# 9362 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9363
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9368
::exit(___);}
#if 0
# 9363
{ 
# 9364
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9365
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9367
return make_float1(w.x); 
# 9368
} 
#endif
# 9370 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9371
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9376
::exit(___);}
#if 0
# 9371
{ 
# 9372
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9375
return make_float2(w.x, w.y); 
# 9376
} 
#endif
# 9378 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9384
::exit(___);}
#if 0
# 9379
{ 
# 9380
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9383
return make_float2(w.x, w.y); 
# 9384
} 
#endif
# 9386 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9387
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9392
::exit(___);}
#if 0
# 9387
{ 
# 9388
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9389
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9391
return make_float4(w.x, w.y, w.z, w.w); 
# 9392
} 
#endif
# 9394 "/usr/local/cuda-7.0//include/texture_fetch_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9395
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9400
::exit(___);}
#if 0
# 9395
{ 
# 9396
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9397
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9399
return make_float4(w.x, w.y, w.z, w.w); 
# 9400
} 
#endif
# 70 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
extern "C" { __attribute__((unused)) void __tex_1d_v4f32_s32(cudaTextureObject_t, int, float *, float *, float *, float *); } 
# 71
extern "C" { __attribute__((unused)) void __tex_1d_v4f32_f32(cudaTextureObject_t, float, float *, float *, float *, float *); } 
# 72
extern "C" { __attribute__((unused)) void __tex_1d_level_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 73
extern "C" { __attribute__((unused)) void __tex_1d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
# 74
extern "C" { __attribute__((unused)) void __tex_1d_v4s32_s32(cudaTextureObject_t, int, int *, int *, int *, int *); } 
# 75
extern "C" { __attribute__((unused)) void __tex_1d_v4s32_f32(cudaTextureObject_t, float, int *, int *, int *, int *); } 
# 76
extern "C" { __attribute__((unused)) void __tex_1d_level_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 77
extern "C" { __attribute__((unused)) void __tex_1d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
# 78
extern "C" { __attribute__((unused)) void __tex_1d_v4u32_s32(cudaTextureObject_t, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 79
extern "C" { __attribute__((unused)) void __tex_1d_v4u32_f32(cudaTextureObject_t, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 80
extern "C" { __attribute__((unused)) void __tex_1d_level_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 81
extern "C" { __attribute__((unused)) void __tex_1d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 83
extern "C" { __attribute__((unused)) void __tex_1d_array_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *); } 
# 84
extern "C" { __attribute__((unused)) void __tex_1d_array_v4f32_f32(cudaTextureObject_t, int, float, float *, float *, float *, float *); } 
# 85
extern "C" { __attribute__((unused)) void __tex_1d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *); } 
# 86
extern "C" { __attribute__((unused)) void __tex_1d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
# 87
extern "C" { __attribute__((unused)) void __tex_1d_array_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *); } 
# 88
extern "C" { __attribute__((unused)) void __tex_1d_array_v4s32_f32(cudaTextureObject_t, int, float, int *, int *, int *, int *); } 
# 89
extern "C" { __attribute__((unused)) void __tex_1d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *); } 
# 90
extern "C" { __attribute__((unused)) void __tex_1d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
# 91
extern "C" { __attribute__((unused)) void __tex_1d_array_v4u32_s32(cudaTextureObject_t, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 92
extern "C" { __attribute__((unused)) void __tex_1d_array_v4u32_f32(cudaTextureObject_t, int, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 93
extern "C" { __attribute__((unused)) void __tex_1d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 94
extern "C" { __attribute__((unused)) void __tex_1d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 96
extern "C" { __attribute__((unused)) void __tex_2d_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *); } 
# 97
extern "C" { __attribute__((unused)) void __tex_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 98
extern "C" { __attribute__((unused)) void __tex_2d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
# 99
extern "C" { __attribute__((unused)) void __tex_2d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float *, float *, float *, float *); } 
# 100
extern "C" { __attribute__((unused)) void __tex_2d_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *); } 
# 101
extern "C" { __attribute__((unused)) void __tex_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 102
extern "C" { __attribute__((unused)) void __tex_2d_level_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
# 103
extern "C" { __attribute__((unused)) void __tex_2d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, int *, int *, int *, int *); } 
# 104
extern "C" { __attribute__((unused)) void __tex_2d_v4u32_s32(cudaTextureObject_t, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 105
extern "C" { __attribute__((unused)) void __tex_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 106
extern "C" { __attribute__((unused)) void __tex_2d_level_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 107
extern "C" { __attribute__((unused)) void __tex_2d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 109
extern "C" { __attribute__((unused)) void __tex_2d_array_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *); } 
# 110
extern "C" { __attribute__((unused)) void __tex_2d_array_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *); } 
# 111
extern "C" { __attribute__((unused)) void __tex_2d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
# 112
extern "C" { __attribute__((unused)) void __tex_2d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, float *, float *, float *, float *); } 
# 113
extern "C" { __attribute__((unused)) void __tex_2d_array_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *); } 
# 114
extern "C" { __attribute__((unused)) void __tex_2d_array_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *); } 
# 115
extern "C" { __attribute__((unused)) void __tex_2d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
# 116
extern "C" { __attribute__((unused)) void __tex_2d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, int *, int *, int *, int *); } 
# 117
extern "C" { __attribute__((unused)) void __tex_2d_array_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 118
extern "C" { __attribute__((unused)) void __tex_2d_array_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 119
extern "C" { __attribute__((unused)) void __tex_2d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 120
extern "C" { __attribute__((unused)) void __tex_2d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 122
extern "C" { __attribute__((unused)) void __tex_3d_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *); } 
# 123
extern "C" { __attribute__((unused)) void __tex_3d_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
# 124
extern "C" { __attribute__((unused)) void __tex_3d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *); } 
# 125
extern "C" { __attribute__((unused)) void __tex_3d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, float *, float *, float *, float *); } 
# 126
extern "C" { __attribute__((unused)) void __tex_3d_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *); } 
# 127
extern "C" { __attribute__((unused)) void __tex_3d_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
# 128
extern "C" { __attribute__((unused)) void __tex_3d_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *); } 
# 129
extern "C" { __attribute__((unused)) void __tex_3d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, int *, int *, int *, int *); } 
# 130
extern "C" { __attribute__((unused)) void __tex_3d_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 131
extern "C" { __attribute__((unused)) void __tex_3d_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 132
extern "C" { __attribute__((unused)) void __tex_3d_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 133
extern "C" { __attribute__((unused)) void __tex_3d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 135
extern "C" { __attribute__((unused)) void __tex_cube_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
# 136
extern "C" { __attribute__((unused)) void __tex_cube_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *); } 
# 137
extern "C" { __attribute__((unused)) void __tex_cube_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
# 138
extern "C" { __attribute__((unused)) void __tex_cube_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *); } 
# 139
extern "C" { __attribute__((unused)) void __tex_cube_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 140
extern "C" { __attribute__((unused)) void __tex_cube_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 142
extern "C" { __attribute__((unused)) void __tex_cube_array_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
# 143
extern "C" { __attribute__((unused)) void __tex_cube_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float *, float *, float *, float *); } 
# 144
extern "C" { __attribute__((unused)) void __tex_cube_array_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
# 145
extern "C" { __attribute__((unused)) void __tex_cube_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, int *, int *, int *, int *); } 
# 146
extern "C" { __attribute__((unused)) void __tex_cube_array_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 147
extern "C" { __attribute__((unused)) void __tex_cube_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 149
extern "C" { __attribute__((unused)) void __tld4_r_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 150
extern "C" { __attribute__((unused)) void __tld4_g_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 151
extern "C" { __attribute__((unused)) void __tld4_b_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 152
extern "C" { __attribute__((unused)) void __tld4_a_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
# 153
extern "C" { __attribute__((unused)) void __tld4_r_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 154
extern "C" { __attribute__((unused)) void __tld4_g_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 155
extern "C" { __attribute__((unused)) void __tld4_b_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 156
extern "C" { __attribute__((unused)) void __tld4_a_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
# 157
extern "C" { __attribute__((unused)) void __tld4_r_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 158
extern "C" { __attribute__((unused)) void __tld4_g_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 159
extern "C" { __attribute__((unused)) void __tld4_b_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 160
extern "C" { __attribute__((unused)) void __tld4_a_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char * retVal, cudaTextureObject_t texObject, int x); 
# 170
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(signed char * retVal, cudaTextureObject_t texObject, int x); 
# 172
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char1 * retVal, cudaTextureObject_t texObject, int x); 
# 174
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char2 * retVal, cudaTextureObject_t texObject, int x); 
# 176
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char4 * retVal, cudaTextureObject_t texObject, int x); 
# 178
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned char * retVal, cudaTextureObject_t texObject, int x); 
# 180
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar1 * retVal, cudaTextureObject_t texObject, int x); 
# 182
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar2 * retVal, cudaTextureObject_t texObject, int x); 
# 184
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar4 * retVal, cudaTextureObject_t texObject, int x); 
# 192
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short * retVal, cudaTextureObject_t texObject, int x); 
# 194
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short1 * retVal, cudaTextureObject_t texObject, int x); 
# 196
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short2 * retVal, cudaTextureObject_t texObject, int x); 
# 198
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short4 * retVal, cudaTextureObject_t texObject, int x); 
# 200
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned short * retVal, cudaTextureObject_t texObject, int x); 
# 202
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort1 * retVal, cudaTextureObject_t texObject, int x); 
# 204
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort2 * retVal, cudaTextureObject_t texObject, int x); 
# 206
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort4 * retVal, cudaTextureObject_t texObject, int x); 
# 214
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int * retVal, cudaTextureObject_t texObject, int x); 
# 216
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int1 * retVal, cudaTextureObject_t texObject, int x); 
# 218
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int2 * retVal, cudaTextureObject_t texObject, int x); 
# 220
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int4 * retVal, cudaTextureObject_t texObject, int x); 
# 222
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned * retVal, cudaTextureObject_t texObject, int x); 
# 224
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint1 * retVal, cudaTextureObject_t texObject, int x); 
# 226
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint2 * retVal, cudaTextureObject_t texObject, int x); 
# 228
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint4 * retVal, cudaTextureObject_t texObject, int x); 
# 263 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float * retVal, cudaTextureObject_t texObject, int x); 
# 265
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float1 * retVal, cudaTextureObject_t texObject, int x); 
# 267
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float2 * retVal, cudaTextureObject_t texObject, int x); 
# 269
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float4 * retVal, cudaTextureObject_t texObject, int x); 
# 277
template< class T> 
# 278
__attribute((always_inline)) __attribute__((unused)) static inline T tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 279
{int volatile ___ = 1;(void)texObject;(void)x;
# 283
::exit(___);}
#if 0
# 279
{ 
# 280
T ret; 
# 281
tex1Dfetch(&ret, texObject, x); 
# 282
return ret; 
# 283
} 
#endif
# 291 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char * retVal, cudaTextureObject_t texObject, float x); 
# 292
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(signed char * retVal, cudaTextureObject_t texObject, float x); 
# 294
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char1 * retVal, cudaTextureObject_t texObject, float x); 
# 296
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char2 * retVal, cudaTextureObject_t texObject, float x); 
# 298
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char4 * retVal, cudaTextureObject_t texObject, float x); 
# 300
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned char * retVal, cudaTextureObject_t texObject, float x); 
# 302
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar1 * retVal, cudaTextureObject_t texObject, float x); 
# 304
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar2 * retVal, cudaTextureObject_t texObject, float x); 
# 306
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar4 * retVal, cudaTextureObject_t texObject, float x); 
# 314
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short * retVal, cudaTextureObject_t texObject, float x); 
# 316
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short1 * retVal, cudaTextureObject_t texObject, float x); 
# 318
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short2 * retVal, cudaTextureObject_t texObject, float x); 
# 320
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short4 * retVal, cudaTextureObject_t texObject, float x); 
# 322
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned short * retVal, cudaTextureObject_t texObject, float x); 
# 324
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort1 * retVal, cudaTextureObject_t texObject, float x); 
# 326
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort2 * retVal, cudaTextureObject_t texObject, float x); 
# 328
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort4 * retVal, cudaTextureObject_t texObject, float x); 
# 336
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int * retVal, cudaTextureObject_t texObject, float x); 
# 338
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int1 * retVal, cudaTextureObject_t texObject, float x); 
# 340
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int2 * retVal, cudaTextureObject_t texObject, float x); 
# 342
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int4 * retVal, cudaTextureObject_t texObject, float x); 
# 344
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned * retVal, cudaTextureObject_t texObject, float x); 
# 346
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint1 * retVal, cudaTextureObject_t texObject, float x); 
# 348
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint2 * retVal, cudaTextureObject_t texObject, float x); 
# 350
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint4 * retVal, cudaTextureObject_t texObject, float x); 
# 385 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float * retVal, cudaTextureObject_t texObject, float x); 
# 387
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float1 * retVal, cudaTextureObject_t texObject, float x); 
# 389
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float2 * retVal, cudaTextureObject_t texObject, float x); 
# 391
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float4 * retVal, cudaTextureObject_t texObject, float x); 
# 399
template< class T> 
# 400
__attribute((always_inline)) __attribute__((unused)) static inline T tex1D(cudaTextureObject_t texObject, float x) 
# 401
{int volatile ___ = 1;(void)texObject;(void)x;
# 405
::exit(___);}
#if 0
# 401
{ 
# 402
T ret; 
# 403
tex1D(&ret, texObject, x); 
# 404
return ret; 
# 405
} 
#endif
# 413 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char * retVal, cudaTextureObject_t texObject, float x, float y); 
# 414
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(signed char * retVal, cudaTextureObject_t texObject, float x, float y); 
# 416
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 418
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 420
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 422
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y); 
# 424
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 426
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 428
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 436
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short * retVal, cudaTextureObject_t texObject, float x, float y); 
# 438
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 440
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 442
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 444
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y); 
# 446
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 448
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 450
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 458
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int * retVal, cudaTextureObject_t texObject, float x, float y); 
# 460
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 462
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 464
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 466
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned * retVal, cudaTextureObject_t texObject, float x, float y); 
# 468
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 470
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 472
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 507 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float * retVal, cudaTextureObject_t texObject, float x, float y); 
# 509
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float1 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 511
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float2 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 513
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float4 * retVal, cudaTextureObject_t texObject, float x, float y); 
# 521
template< class T> 
# 522
__attribute((always_inline)) __attribute__((unused)) static inline T tex2D(cudaTextureObject_t texObject, float x, float y) 
# 523
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
T ret; 
# 525
tex2D(&ret, texObject, x, y); 
# 526
return ret; 
# 527
} 
#endif
# 535 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 536
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 538
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 540
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 542
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 544
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 546
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 548
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 550
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 558
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 560
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 562
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 564
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 566
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 568
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 570
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 572
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 580
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 582
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 584
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 586
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 588
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 590
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 592
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 594
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 629 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 631
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 633
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 635
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 643
template< class T> 
# 644
__attribute((always_inline)) __attribute__((unused)) static inline T tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 645
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 649
::exit(___);}
#if 0
# 645
{ 
# 646
T ret; 
# 647
tex3D(&ret, texObject, x, y, z); 
# 648
return ret; 
# 649
} 
#endif
# 657 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 658
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(signed char * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 660
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 662
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 664
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 666
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 668
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 670
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 672
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 680
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 682
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 684
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 686
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 688
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 690
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 692
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 694
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 702
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 704
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 706
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 708
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 710
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 712
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 714
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 716
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 751 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 753
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 755
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 757
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
# 765
template< class T> 
# 766
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 767
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 771
::exit(___);}
#if 0
# 767
{ 
# 768
T ret; 
# 769
tex1DLayered(&ret, texObject, x, layer); 
# 770
return ret; 
# 771
} 
#endif
# 779 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 780
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 782
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 784
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 786
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 788
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 790
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 792
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 794
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 802
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 804
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 806
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 808
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 810
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 812
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 814
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 816
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 824
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 826
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 828
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 830
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 832
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 834
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 836
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 838
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 873 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 875
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 877
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 879
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
# 887
template< class T> 
# 888
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 889
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 893
::exit(___);}
#if 0
# 889
{ 
# 890
T ret; 
# 891
tex2DLayered(&ret, texObject, x, y, layer); 
# 892
return ret; 
# 893
} 
#endif
# 901 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 902
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 904
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 906
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 908
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 910
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 912
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 914
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 916
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 924
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 926
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 928
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 930
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 932
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 934
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 936
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 938
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 946
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 948
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 950
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 952
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 954
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 956
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 958
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 960
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 995 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 997
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 999
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 1001
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
# 1009
template< class T> 
# 1010
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 1011
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 1015
::exit(___);}
#if 0
# 1011
{ 
# 1012
T ret; 
# 1013
texCubemap(&ret, texObject, x, y, z); 
# 1014
return ret; 
# 1015
} 
#endif
# 1023 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1024
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1026
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1028
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1030
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1032
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1034
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1036
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1038
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1046
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1048
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1050
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1052
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1054
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1056
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1058
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1060
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1068
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1070
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1072
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1074
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1076
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1078
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1080
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1082
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1117 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1119
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1121
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1123
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
# 1131
template< class T> 
# 1132
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 1133
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 1137
::exit(___);}
#if 0
# 1133
{ 
# 1134
T ret; 
# 1135
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 1136
return ret; 
# 1137
} 
#endif
# 1145 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1147
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1149
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1151
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1153
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1155
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1157
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1159
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1161
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1169
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1171
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1173
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1175
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1177
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1179
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1181
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1183
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1191
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1193
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1195
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1197
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1199
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1201
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1203
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1205
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1213
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1215
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1217
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1219
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1221
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1223
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1225
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1227
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1235
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1237
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1239
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1241
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
# 1249
template< class T> 
# 1250
__attribute((always_inline)) __attribute__((unused)) static inline T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 1251
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 1255
::exit(___);}
#if 0
# 1251
{ 
# 1252
T ret; 
# 1253
tex2Dgather(&ret, to, x, y, comp); 
# 1254
return ret; 
# 1255
} 
#endif
# 1263 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1264
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1266
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1268
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1270
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1272
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1274
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1276
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1278
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1286
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1288
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1290
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1292
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1294
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1296
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1298
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1300
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1308
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1310
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1312
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1314
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1316
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1318
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1320
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1322
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1357 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1359
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1361
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1363
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float level); 
# 1371
template< class T> 
# 1372
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 1373
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 1377
::exit(___);}
#if 0
# 1373
{ 
# 1374
T ret; 
# 1375
tex1DLod(&ret, texObject, x, level); 
# 1376
return ret; 
# 1377
} 
#endif
# 1385 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1386
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1388
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1390
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1392
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1394
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1396
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1398
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1400
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1408
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1410
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1412
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1414
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1416
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1418
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1420
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1422
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1430
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1432
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1434
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1436
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1438
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1440
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1442
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1444
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1479 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1481
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1483
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1485
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
# 1493
template< class T> 
# 1494
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 1495
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 1499
::exit(___);}
#if 0
# 1495
{ 
# 1496
T ret; 
# 1497
tex2DLod(&ret, texObject, x, y, level); 
# 1498
return ret; 
# 1499
} 
#endif
# 1507 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1508
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1510
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1512
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1514
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1516
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1518
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1520
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1522
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1530
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1532
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1534
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1536
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1538
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1540
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1542
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1544
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1552
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1554
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1556
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1558
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1560
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1562
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1564
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1566
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1601 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1603
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1605
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1607
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1615
template< class T> 
# 1616
__attribute((always_inline)) __attribute__((unused)) static inline T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 1617
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 1621
::exit(___);}
#if 0
# 1617
{ 
# 1618
T ret; 
# 1619
tex3DLod(&ret, texObject, x, y, z, level); 
# 1620
return ret; 
# 1621
} 
#endif
# 1629 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1630
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1632
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1634
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1636
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1638
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1640
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1642
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1644
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1652
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1654
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1656
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1658
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1660
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1662
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1664
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1666
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1674
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1676
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1678
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1680
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1682
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1684
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1686
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1688
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1723 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1725
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1727
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1729
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
# 1737
template< class T> 
# 1738
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 1739
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 1743
::exit(___);}
#if 0
# 1739
{ 
# 1740
T ret; 
# 1741
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 1742
return ret; 
# 1743
} 
#endif
# 1751 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1752
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1754
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1756
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1758
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1760
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1762
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1764
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1766
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1774
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1776
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1778
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1780
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1782
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1784
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1786
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1788
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1796
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1798
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1800
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1802
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1804
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1806
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1808
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1810
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1845 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1847
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1849
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1851
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
# 1859
template< class T> 
# 1860
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 1861
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 1865
::exit(___);}
#if 0
# 1861
{ 
# 1862
T ret; 
# 1863
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 1864
return ret; 
# 1865
} 
#endif
# 1873 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1874
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1876
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1878
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1880
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1882
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1884
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1886
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1888
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1896
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1898
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1900
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1902
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1904
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1906
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1908
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1910
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1918
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1920
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1922
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1924
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1926
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1928
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1930
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1932
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1967 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1969
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1971
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1973
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
# 1981
template< class T> 
# 1982
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 1983
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 1987
::exit(___);}
#if 0
# 1983
{ 
# 1984
T ret; 
# 1985
texCubemapLod(&ret, texObject, x, y, z, level); 
# 1986
return ret; 
# 1987
} 
#endif
# 1995 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 1996
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 1998
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2000
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2002
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2004
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2006
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2008
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2010
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2018
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2020
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2022
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2024
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2026
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2028
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2030
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2032
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2040
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2042
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2044
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2046
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2048
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2050
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2052
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2054
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2089 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2091
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2093
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2095
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
# 2103
template< class T> 
# 2104
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 2105
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 2109
::exit(___);}
#if 0
# 2105
{ 
# 2106
T ret; 
# 2107
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 2108
return ret; 
# 2109
} 
#endif
# 2117 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2118
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2120
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2122
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2124
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2126
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2128
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2130
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2132
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2140
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2142
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2144
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2146
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2148
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2150
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2152
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2154
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2162
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2164
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2166
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2168
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2170
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2172
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2174
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2176
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2211 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2213
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2215
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2217
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
# 2225
template< class T> 
# 2226
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 2227
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 2231
::exit(___);}
#if 0
# 2227
{ 
# 2228
T ret; 
# 2229
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 2230
return ret; 
# 2231
} 
#endif
# 2239 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2240
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2242
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2244
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2246
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2248
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2250
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2252
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2254
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2262
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2264
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2266
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2268
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2270
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2272
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2274
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2276
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2284
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2286
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2288
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2290
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2292
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2294
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2296
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2298
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2333 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2335
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2337
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2339
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
# 2347
template< class T> 
# 2348
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 2349
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 2353
::exit(___);}
#if 0
# 2349
{ 
# 2350
T ret; 
# 2351
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 2352
return ret; 
# 2353
} 
#endif
# 2361 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2362
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2364
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2366
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2368
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2370
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2372
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2374
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2376
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2384
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2386
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2388
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2390
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2392
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2394
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2396
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2398
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2406
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2408
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2410
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2412
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2414
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2416
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2418
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2420
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2455 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2457
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2459
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2461
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
# 2469
template< class T> 
# 2470
__attribute((always_inline)) __attribute__((unused)) static inline T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 2471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 2475
::exit(___);}
#if 0
# 2471
{ 
# 2472
T ret; 
# 2473
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 2474
return ret; 
# 2475
} 
#endif
# 2483 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2484
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(signed char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2486
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2488
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2490
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2492
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2494
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2496
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2498
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2506
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2508
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2510
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2512
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2514
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2516
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2518
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2520
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2528
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2530
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2532
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2534
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2536
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2538
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2540
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2542
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2577 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2579
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2581
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2583
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
# 2591
template< class T> 
# 2592
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 2593
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 2597
::exit(___);}
#if 0
# 2593
{ 
# 2594
T ret; 
# 2595
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 2596
return ret; 
# 2597
} 
#endif
# 2605 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2606
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2608
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2610
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2612
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2614
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2616
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2618
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2620
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2628
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2630
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2632
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2634
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2636
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2638
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2640
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2642
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2650
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2652
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2654
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2656
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2658
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2660
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2662
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2664
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2699 "/usr/local/cuda-7.0//include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2701
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2703
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2705
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
# 2713
template< class T> 
# 2714
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 2715
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 2719
::exit(___);}
#if 0
# 2715
{ 
# 2716
T ret; 
# 2717
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 2718
return ret; 
# 2719
} 
#endif
# 75 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x) 
# 76
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 85
::exit(___);}
#if 0
# 76
{ 
# 81
int4 tmp; 
# 82
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 84
(*retVal) = ((char)(tmp.x)); 
# 85
} 
#endif
# 86 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x) 
# 87
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 91
::exit(___);}
#if 0
# 87
{ 
# 88
int4 tmp; 
# 89
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 90
(*retVal) = ((signed char)(tmp.x)); 
# 91
} 
#endif
# 93 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x) 
# 94
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 98
::exit(___);}
#if 0
# 94
{ 
# 95
int4 tmp; 
# 96
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 97
(*retVal) = make_char1(tmp.x); 
# 98
} 
#endif
# 100 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x) 
# 101
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 105
::exit(___);}
#if 0
# 101
{ 
# 102
int4 tmp; 
# 103
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 104
(*retVal) = make_char2(tmp.x, tmp.y); 
# 105
} 
#endif
# 107 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x) 
# 108
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
int4 tmp; 
# 110
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 111
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 112
} 
#endif
# 114 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x) 
# 115
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 119
::exit(___);}
#if 0
# 115
{ 
# 116
uint4 tmp; 
# 117
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 118
(*retVal) = ((unsigned char)(tmp.x)); 
# 119
} 
#endif
# 121 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x) 
# 122
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 126
::exit(___);}
#if 0
# 122
{ 
# 123
uint4 tmp; 
# 124
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 125
(*retVal) = make_uchar1(tmp.x); 
# 126
} 
#endif
# 128 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x) 
# 129
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 133
::exit(___);}
#if 0
# 129
{ 
# 130
uint4 tmp; 
# 131
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 132
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 133
} 
#endif
# 135 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x) 
# 136
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 140
::exit(___);}
#if 0
# 136
{ 
# 137
uint4 tmp; 
# 138
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 139
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 140
} 
#endif
# 148 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x) 
# 149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 153
::exit(___);}
#if 0
# 149
{ 
# 150
int4 tmp; 
# 151
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 152
(*retVal) = ((short)(tmp.x)); 
# 153
} 
#endif
# 155 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x) 
# 156
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
int4 tmp; 
# 158
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 159
(*retVal) = make_short1(tmp.x); 
# 160
} 
#endif
# 162 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x) 
# 163
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 167
::exit(___);}
#if 0
# 163
{ 
# 164
int4 tmp; 
# 165
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 166
(*retVal) = make_short2(tmp.x, tmp.y); 
# 167
} 
#endif
# 169 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x) 
# 170
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 174
::exit(___);}
#if 0
# 170
{ 
# 171
int4 tmp; 
# 172
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 173
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 174
} 
#endif
# 176 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x) 
# 177
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
uint4 tmp; 
# 179
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 180
(*retVal) = ((unsigned short)(tmp.x)); 
# 181
} 
#endif
# 183 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x) 
# 184
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 188
::exit(___);}
#if 0
# 184
{ 
# 185
uint4 tmp; 
# 186
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 187
(*retVal) = make_ushort1(tmp.x); 
# 188
} 
#endif
# 190 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x) 
# 191
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
uint4 tmp; 
# 193
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 194
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 195
} 
#endif
# 197 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x) 
# 198
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 202
::exit(___);}
#if 0
# 198
{ 
# 199
uint4 tmp; 
# 200
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 201
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 202
} 
#endif
# 210 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x) 
# 211
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 215
::exit(___);}
#if 0
# 211
{ 
# 212
int4 tmp; 
# 213
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 214
(*retVal) = ((int)(tmp.x)); 
# 215
} 
#endif
# 217 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x) 
# 218
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 222
::exit(___);}
#if 0
# 218
{ 
# 219
int4 tmp; 
# 220
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 221
(*retVal) = make_int1(tmp.x); 
# 222
} 
#endif
# 224 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x) 
# 225
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 229
::exit(___);}
#if 0
# 225
{ 
# 226
int4 tmp; 
# 227
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 228
(*retVal) = make_int2(tmp.x, tmp.y); 
# 229
} 
#endif
# 231 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x) 
# 232
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 236
::exit(___);}
#if 0
# 232
{ 
# 233
int4 tmp; 
# 234
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 235
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 236
} 
#endif
# 238 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned *retVal, cudaTextureObject_t texObject, int x) 
# 239
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 243
::exit(___);}
#if 0
# 239
{ 
# 240
uint4 tmp; 
# 241
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 242
(*retVal) = ((unsigned)(tmp.x)); 
# 243
} 
#endif
# 245 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x) 
# 246
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
uint4 tmp; 
# 248
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 249
(*retVal) = make_uint1(tmp.x); 
# 250
} 
#endif
# 252 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x) 
# 253
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 257
::exit(___);}
#if 0
# 253
{ 
# 254
uint4 tmp; 
# 255
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 256
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 257
} 
#endif
# 259 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x) 
# 260
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 264
::exit(___);}
#if 0
# 260
{ 
# 261
uint4 tmp; 
# 262
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 263
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 264
} 
#endif
# 339 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x) 
# 340
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
float4 tmp; 
# 342
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 343
(*retVal) = ((float)(tmp.x)); 
# 344
} 
#endif
# 346 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x) 
# 347
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 351
::exit(___);}
#if 0
# 347
{ 
# 348
float4 tmp; 
# 349
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 350
(*retVal) = make_float1(tmp.x); 
# 351
} 
#endif
# 353 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x) 
# 354
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 358
::exit(___);}
#if 0
# 354
{ 
# 355
float4 tmp; 
# 356
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 357
(*retVal) = make_float2(tmp.x, tmp.y); 
# 358
} 
#endif
# 360 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x) 
# 361
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 365
::exit(___);}
#if 0
# 361
{ 
# 362
float4 tmp; 
# 363
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 364
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 365
} 
#endif
# 373 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char *retVal, cudaTextureObject_t texObject, float x) 
# 374
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 383
::exit(___);}
#if 0
# 374
{ 
# 379
int4 tmp; 
# 380
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 382
(*retVal) = ((char)(tmp.x)); 
# 383
} 
#endif
# 384 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x) 
# 385
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 389
::exit(___);}
#if 0
# 385
{ 
# 386
int4 tmp; 
# 387
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 388
(*retVal) = ((signed char)(tmp.x)); 
# 389
} 
#endif
# 391 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x) 
# 392
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 396
::exit(___);}
#if 0
# 392
{ 
# 393
int4 tmp; 
# 394
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 395
(*retVal) = make_char1(tmp.x); 
# 396
} 
#endif
# 398 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x) 
# 399
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 403
::exit(___);}
#if 0
# 399
{ 
# 400
int4 tmp; 
# 401
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 402
(*retVal) = make_char2(tmp.x, tmp.y); 
# 403
} 
#endif
# 405 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x) 
# 406
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 410
::exit(___);}
#if 0
# 406
{ 
# 407
int4 tmp; 
# 408
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 409
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 410
} 
#endif
# 412 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x) 
# 413
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 417
::exit(___);}
#if 0
# 413
{ 
# 414
uint4 tmp; 
# 415
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 416
(*retVal) = ((unsigned char)(tmp.x)); 
# 417
} 
#endif
# 419 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x) 
# 420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 424
::exit(___);}
#if 0
# 420
{ 
# 421
uint4 tmp; 
# 422
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 423
(*retVal) = make_uchar1(tmp.x); 
# 424
} 
#endif
# 426 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x) 
# 427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 431
::exit(___);}
#if 0
# 427
{ 
# 428
uint4 tmp; 
# 429
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 430
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 431
} 
#endif
# 433 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x) 
# 434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 438
::exit(___);}
#if 0
# 434
{ 
# 435
uint4 tmp; 
# 436
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 437
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 438
} 
#endif
# 446 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short *retVal, cudaTextureObject_t texObject, float x) 
# 447
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 451
::exit(___);}
#if 0
# 447
{ 
# 448
int4 tmp; 
# 449
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 450
(*retVal) = ((short)(tmp.x)); 
# 451
} 
#endif
# 453 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x) 
# 454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 458
::exit(___);}
#if 0
# 454
{ 
# 455
int4 tmp; 
# 456
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 457
(*retVal) = make_short1(tmp.x); 
# 458
} 
#endif
# 460 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x) 
# 461
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 465
::exit(___);}
#if 0
# 461
{ 
# 462
int4 tmp; 
# 463
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 464
(*retVal) = make_short2(tmp.x, tmp.y); 
# 465
} 
#endif
# 467 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x) 
# 468
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 472
::exit(___);}
#if 0
# 468
{ 
# 469
int4 tmp; 
# 470
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 471
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 472
} 
#endif
# 474 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x) 
# 475
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 479
::exit(___);}
#if 0
# 475
{ 
# 476
uint4 tmp; 
# 477
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 478
(*retVal) = ((unsigned short)(tmp.x)); 
# 479
} 
#endif
# 481 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x) 
# 482
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 486
::exit(___);}
#if 0
# 482
{ 
# 483
uint4 tmp; 
# 484
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 485
(*retVal) = make_ushort1(tmp.x); 
# 486
} 
#endif
# 488 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x) 
# 489
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 493
::exit(___);}
#if 0
# 489
{ 
# 490
uint4 tmp; 
# 491
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 492
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 493
} 
#endif
# 495 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x) 
# 496
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 500
::exit(___);}
#if 0
# 496
{ 
# 497
uint4 tmp; 
# 498
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 499
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 500
} 
#endif
# 508 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int *retVal, cudaTextureObject_t texObject, float x) 
# 509
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 513
::exit(___);}
#if 0
# 509
{ 
# 510
int4 tmp; 
# 511
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 512
(*retVal) = ((int)(tmp.x)); 
# 513
} 
#endif
# 515 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x) 
# 516
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 520
::exit(___);}
#if 0
# 516
{ 
# 517
int4 tmp; 
# 518
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 519
(*retVal) = make_int1(tmp.x); 
# 520
} 
#endif
# 522 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x) 
# 523
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
int4 tmp; 
# 525
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 526
(*retVal) = make_int2(tmp.x, tmp.y); 
# 527
} 
#endif
# 529 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x) 
# 530
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 534
::exit(___);}
#if 0
# 530
{ 
# 531
int4 tmp; 
# 532
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 533
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 534
} 
#endif
# 536 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned *retVal, cudaTextureObject_t texObject, float x) 
# 537
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 541
::exit(___);}
#if 0
# 537
{ 
# 538
uint4 tmp; 
# 539
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 540
(*retVal) = ((unsigned)(tmp.x)); 
# 541
} 
#endif
# 543 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x) 
# 544
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 548
::exit(___);}
#if 0
# 544
{ 
# 545
uint4 tmp; 
# 546
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 547
(*retVal) = make_uint1(tmp.x); 
# 548
} 
#endif
# 550 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x) 
# 551
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 555
::exit(___);}
#if 0
# 551
{ 
# 552
uint4 tmp; 
# 553
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 554
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 555
} 
#endif
# 557 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x) 
# 558
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 562
::exit(___);}
#if 0
# 558
{ 
# 559
uint4 tmp; 
# 560
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 561
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 562
} 
#endif
# 637 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float *retVal, cudaTextureObject_t texObject, float x) 
# 638
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 642
::exit(___);}
#if 0
# 638
{ 
# 639
float4 tmp; 
# 640
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 641
(*retVal) = ((float)(tmp.x)); 
# 642
} 
#endif
# 644 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x) 
# 645
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 649
::exit(___);}
#if 0
# 645
{ 
# 646
float4 tmp; 
# 647
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 648
(*retVal) = make_float1(tmp.x); 
# 649
} 
#endif
# 651 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x) 
# 652
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 656
::exit(___);}
#if 0
# 652
{ 
# 653
float4 tmp; 
# 654
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 655
(*retVal) = make_float2(tmp.x, tmp.y); 
# 656
} 
#endif
# 658 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x) 
# 659
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 663
::exit(___);}
#if 0
# 659
{ 
# 660
float4 tmp; 
# 661
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 662
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 663
} 
#endif
# 671 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 672
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 681
::exit(___);}
#if 0
# 672
{ 
# 677
int4 tmp; 
# 678
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 680
(*retVal) = ((char)(tmp.x)); 
# 681
} 
#endif
# 682 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 683
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 687
::exit(___);}
#if 0
# 683
{ 
# 684
int4 tmp; 
# 685
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 686
(*retVal) = ((signed char)(tmp.x)); 
# 687
} 
#endif
# 689 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 690
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 694
::exit(___);}
#if 0
# 690
{ 
# 691
int4 tmp; 
# 692
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 693
(*retVal) = make_char1(tmp.x); 
# 694
} 
#endif
# 696 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 697
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 701
::exit(___);}
#if 0
# 697
{ 
# 698
int4 tmp; 
# 699
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 700
(*retVal) = make_char2(tmp.x, tmp.y); 
# 701
} 
#endif
# 703 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 704
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 708
::exit(___);}
#if 0
# 704
{ 
# 705
int4 tmp; 
# 706
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 707
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 708
} 
#endif
# 710 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 711
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 715
::exit(___);}
#if 0
# 711
{ 
# 712
uint4 tmp; 
# 713
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 714
(*retVal) = ((unsigned char)(tmp.x)); 
# 715
} 
#endif
# 717 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 722
::exit(___);}
#if 0
# 718
{ 
# 719
uint4 tmp; 
# 720
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 721
(*retVal) = make_uchar1(tmp.x); 
# 722
} 
#endif
# 724 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 729
::exit(___);}
#if 0
# 725
{ 
# 726
uint4 tmp; 
# 727
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 728
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 729
} 
#endif
# 731 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 736
::exit(___);}
#if 0
# 732
{ 
# 733
uint4 tmp; 
# 734
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 735
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 736
} 
#endif
# 744 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y) 
# 745
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 749
::exit(___);}
#if 0
# 745
{ 
# 746
int4 tmp; 
# 747
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 748
(*retVal) = ((short)(tmp.x)); 
# 749
} 
#endif
# 751 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 752
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 756
::exit(___);}
#if 0
# 752
{ 
# 753
int4 tmp; 
# 754
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 755
(*retVal) = make_short1(tmp.x); 
# 756
} 
#endif
# 758 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 759
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 763
::exit(___);}
#if 0
# 759
{ 
# 760
int4 tmp; 
# 761
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 762
(*retVal) = make_short2(tmp.x, tmp.y); 
# 763
} 
#endif
# 765 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 766
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 770
::exit(___);}
#if 0
# 766
{ 
# 767
int4 tmp; 
# 768
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 769
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 770
} 
#endif
# 772 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y) 
# 773
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 777
::exit(___);}
#if 0
# 773
{ 
# 774
uint4 tmp; 
# 775
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 776
(*retVal) = ((unsigned short)(tmp.x)); 
# 777
} 
#endif
# 779 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 780
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 784
::exit(___);}
#if 0
# 780
{ 
# 781
uint4 tmp; 
# 782
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 783
(*retVal) = make_ushort1(tmp.x); 
# 784
} 
#endif
# 786 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 787
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 791
::exit(___);}
#if 0
# 787
{ 
# 788
uint4 tmp; 
# 789
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 790
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 791
} 
#endif
# 793 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 794
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 798
::exit(___);}
#if 0
# 794
{ 
# 795
uint4 tmp; 
# 796
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 797
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 798
} 
#endif
# 806 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y) 
# 807
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 811
::exit(___);}
#if 0
# 807
{ 
# 808
int4 tmp; 
# 809
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 810
(*retVal) = ((int)(tmp.x)); 
# 811
} 
#endif
# 813 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 814
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 818
::exit(___);}
#if 0
# 814
{ 
# 815
int4 tmp; 
# 816
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 817
(*retVal) = make_int1(tmp.x); 
# 818
} 
#endif
# 820 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 821
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 825
::exit(___);}
#if 0
# 821
{ 
# 822
int4 tmp; 
# 823
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 824
(*retVal) = make_int2(tmp.x, tmp.y); 
# 825
} 
#endif
# 827 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 828
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 832
::exit(___);}
#if 0
# 828
{ 
# 829
int4 tmp; 
# 830
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 831
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 832
} 
#endif
# 834 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y) 
# 835
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 839
::exit(___);}
#if 0
# 835
{ 
# 836
uint4 tmp; 
# 837
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 838
(*retVal) = ((unsigned)(tmp.x)); 
# 839
} 
#endif
# 841 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 842
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 846
::exit(___);}
#if 0
# 842
{ 
# 843
uint4 tmp; 
# 844
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 845
(*retVal) = make_uint1(tmp.x); 
# 846
} 
#endif
# 848 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 849
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 853
::exit(___);}
#if 0
# 849
{ 
# 850
uint4 tmp; 
# 851
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 852
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 853
} 
#endif
# 855 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 856
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 860
::exit(___);}
#if 0
# 856
{ 
# 857
uint4 tmp; 
# 858
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 859
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 860
} 
#endif
# 935 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y) 
# 936
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 940
::exit(___);}
#if 0
# 936
{ 
# 937
float4 tmp; 
# 938
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 939
(*retVal) = ((float)(tmp.x)); 
# 940
} 
#endif
# 942 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 943
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 947
::exit(___);}
#if 0
# 943
{ 
# 944
float4 tmp; 
# 945
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 946
(*retVal) = make_float1(tmp.x); 
# 947
} 
#endif
# 949 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 950
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 954
::exit(___);}
#if 0
# 950
{ 
# 951
float4 tmp; 
# 952
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 953
(*retVal) = make_float2(tmp.x, tmp.y); 
# 954
} 
#endif
# 956 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 957
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 961
::exit(___);}
#if 0
# 957
{ 
# 958
float4 tmp; 
# 959
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 960
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 961
} 
#endif
# 969 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 970
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 979
::exit(___);}
#if 0
# 970
{ 
# 975
int4 tmp; 
# 976
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 978
(*retVal) = ((char)(tmp.x)); 
# 979
} 
#endif
# 980 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 981
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 985
::exit(___);}
#if 0
# 981
{ 
# 982
int4 tmp; 
# 983
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 984
(*retVal) = ((signed char)(tmp.x)); 
# 985
} 
#endif
# 987 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 988
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 992
::exit(___);}
#if 0
# 988
{ 
# 989
int4 tmp; 
# 990
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 991
(*retVal) = make_char1(tmp.x); 
# 992
} 
#endif
# 994 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 995
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 999
::exit(___);}
#if 0
# 995
{ 
# 996
int4 tmp; 
# 997
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 998
(*retVal) = make_char2(tmp.x, tmp.y); 
# 999
} 
#endif
# 1001 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1002
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1006
::exit(___);}
#if 0
# 1002
{ 
# 1003
int4 tmp; 
# 1004
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1005
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1006
} 
#endif
# 1008 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1009
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1013
::exit(___);}
#if 0
# 1009
{ 
# 1010
uint4 tmp; 
# 1011
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1012
(*retVal) = ((unsigned char)(tmp.x)); 
# 1013
} 
#endif
# 1015 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1020
::exit(___);}
#if 0
# 1016
{ 
# 1017
uint4 tmp; 
# 1018
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1019
(*retVal) = make_uchar1(tmp.x); 
# 1020
} 
#endif
# 1022 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1027
::exit(___);}
#if 0
# 1023
{ 
# 1024
uint4 tmp; 
# 1025
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1026
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1027
} 
#endif
# 1029 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1030
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1034
::exit(___);}
#if 0
# 1030
{ 
# 1031
uint4 tmp; 
# 1032
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1033
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1034
} 
#endif
# 1042 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1043
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1047
::exit(___);}
#if 0
# 1043
{ 
# 1044
int4 tmp; 
# 1045
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1046
(*retVal) = ((short)(tmp.x)); 
# 1047
} 
#endif
# 1049 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1050
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1054
::exit(___);}
#if 0
# 1050
{ 
# 1051
int4 tmp; 
# 1052
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1053
(*retVal) = make_short1(tmp.x); 
# 1054
} 
#endif
# 1056 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1057
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1061
::exit(___);}
#if 0
# 1057
{ 
# 1058
int4 tmp; 
# 1059
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1060
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1061
} 
#endif
# 1063 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1064
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1068
::exit(___);}
#if 0
# 1064
{ 
# 1065
int4 tmp; 
# 1066
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1067
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1068
} 
#endif
# 1070 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1071
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1075
::exit(___);}
#if 0
# 1071
{ 
# 1072
uint4 tmp; 
# 1073
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1074
(*retVal) = ((unsigned short)(tmp.x)); 
# 1075
} 
#endif
# 1077 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1082
::exit(___);}
#if 0
# 1078
{ 
# 1079
uint4 tmp; 
# 1080
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1081
(*retVal) = make_ushort1(tmp.x); 
# 1082
} 
#endif
# 1084 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1085
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1089
::exit(___);}
#if 0
# 1085
{ 
# 1086
uint4 tmp; 
# 1087
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1088
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1089
} 
#endif
# 1091 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1092
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1096
::exit(___);}
#if 0
# 1092
{ 
# 1093
uint4 tmp; 
# 1094
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1095
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1096
} 
#endif
# 1104 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1105
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1109
::exit(___);}
#if 0
# 1105
{ 
# 1106
int4 tmp; 
# 1107
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1108
(*retVal) = ((int)(tmp.x)); 
# 1109
} 
#endif
# 1111 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1112
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1116
::exit(___);}
#if 0
# 1112
{ 
# 1113
int4 tmp; 
# 1114
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1115
(*retVal) = make_int1(tmp.x); 
# 1116
} 
#endif
# 1118 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1119
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1123
::exit(___);}
#if 0
# 1119
{ 
# 1120
int4 tmp; 
# 1121
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1122
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1123
} 
#endif
# 1125 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1126
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1130
::exit(___);}
#if 0
# 1126
{ 
# 1127
int4 tmp; 
# 1128
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1129
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1130
} 
#endif
# 1132 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1133
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1137
::exit(___);}
#if 0
# 1133
{ 
# 1134
uint4 tmp; 
# 1135
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1136
(*retVal) = ((unsigned)(tmp.x)); 
# 1137
} 
#endif
# 1139 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1140
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1144
::exit(___);}
#if 0
# 1140
{ 
# 1141
uint4 tmp; 
# 1142
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1143
(*retVal) = make_uint1(tmp.x); 
# 1144
} 
#endif
# 1146 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1147
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1151
::exit(___);}
#if 0
# 1147
{ 
# 1148
uint4 tmp; 
# 1149
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1150
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1151
} 
#endif
# 1153 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1154
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1158
::exit(___);}
#if 0
# 1154
{ 
# 1155
uint4 tmp; 
# 1156
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1157
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1158
} 
#endif
# 1233 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1238
::exit(___);}
#if 0
# 1234
{ 
# 1235
float4 tmp; 
# 1236
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1237
(*retVal) = ((float)(tmp.x)); 
# 1238
} 
#endif
# 1240 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1241
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1245
::exit(___);}
#if 0
# 1241
{ 
# 1242
float4 tmp; 
# 1243
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1244
(*retVal) = make_float1(tmp.x); 
# 1245
} 
#endif
# 1247 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1248
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1252
::exit(___);}
#if 0
# 1248
{ 
# 1249
float4 tmp; 
# 1250
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1251
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1252
} 
#endif
# 1254 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1255
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1259
::exit(___);}
#if 0
# 1255
{ 
# 1256
float4 tmp; 
# 1257
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1258
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1259
} 
#endif
# 1267 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1268
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1277
::exit(___);}
#if 0
# 1268
{ 
# 1273
int4 tmp; 
# 1274
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1276
(*retVal) = ((char)(tmp.x)); 
# 1277
} 
#endif
# 1278 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1279
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1283
::exit(___);}
#if 0
# 1279
{ 
# 1280
int4 tmp; 
# 1281
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1282
(*retVal) = ((signed char)(tmp.x)); 
# 1283
} 
#endif
# 1285 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1286
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1290
::exit(___);}
#if 0
# 1286
{ 
# 1287
int4 tmp; 
# 1288
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1289
(*retVal) = make_char1(tmp.x); 
# 1290
} 
#endif
# 1292 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1293
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1297
::exit(___);}
#if 0
# 1293
{ 
# 1294
int4 tmp; 
# 1295
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1296
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1297
} 
#endif
# 1299 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1300
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1304
::exit(___);}
#if 0
# 1300
{ 
# 1301
int4 tmp; 
# 1302
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1303
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1304
} 
#endif
# 1306 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1307
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1311
::exit(___);}
#if 0
# 1307
{ 
# 1308
uint4 tmp; 
# 1309
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1310
(*retVal) = ((unsigned char)(tmp.x)); 
# 1311
} 
#endif
# 1313 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1314
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1318
::exit(___);}
#if 0
# 1314
{ 
# 1315
uint4 tmp; 
# 1316
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1317
(*retVal) = make_uchar1(tmp.x); 
# 1318
} 
#endif
# 1320 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1321
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1325
::exit(___);}
#if 0
# 1321
{ 
# 1322
uint4 tmp; 
# 1323
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1324
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1325
} 
#endif
# 1327 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1332
::exit(___);}
#if 0
# 1328
{ 
# 1329
uint4 tmp; 
# 1330
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1331
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1332
} 
#endif
# 1340 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1341
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1345
::exit(___);}
#if 0
# 1341
{ 
# 1342
int4 tmp; 
# 1343
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1344
(*retVal) = ((short)(tmp.x)); 
# 1345
} 
#endif
# 1347 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1348
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1352
::exit(___);}
#if 0
# 1348
{ 
# 1349
int4 tmp; 
# 1350
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1351
(*retVal) = make_short1(tmp.x); 
# 1352
} 
#endif
# 1354 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1355
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1359
::exit(___);}
#if 0
# 1355
{ 
# 1356
int4 tmp; 
# 1357
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1358
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1359
} 
#endif
# 1361 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1362
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1366
::exit(___);}
#if 0
# 1362
{ 
# 1363
int4 tmp; 
# 1364
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1365
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1366
} 
#endif
# 1368 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1369
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1373
::exit(___);}
#if 0
# 1369
{ 
# 1370
uint4 tmp; 
# 1371
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1372
(*retVal) = ((unsigned short)(tmp.x)); 
# 1373
} 
#endif
# 1375 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1376
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1380
::exit(___);}
#if 0
# 1376
{ 
# 1377
uint4 tmp; 
# 1378
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1379
(*retVal) = make_ushort1(tmp.x); 
# 1380
} 
#endif
# 1382 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1383
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1387
::exit(___);}
#if 0
# 1383
{ 
# 1384
uint4 tmp; 
# 1385
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1386
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1387
} 
#endif
# 1389 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1390
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1394
::exit(___);}
#if 0
# 1390
{ 
# 1391
uint4 tmp; 
# 1392
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1393
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1394
} 
#endif
# 1402 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1403
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1407
::exit(___);}
#if 0
# 1403
{ 
# 1404
int4 tmp; 
# 1405
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1406
(*retVal) = ((int)(tmp.x)); 
# 1407
} 
#endif
# 1409 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1410
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1414
::exit(___);}
#if 0
# 1410
{ 
# 1411
int4 tmp; 
# 1412
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1413
(*retVal) = make_int1(tmp.x); 
# 1414
} 
#endif
# 1416 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1417
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1421
::exit(___);}
#if 0
# 1417
{ 
# 1418
int4 tmp; 
# 1419
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1420
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1421
} 
#endif
# 1423 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1424
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1428
::exit(___);}
#if 0
# 1424
{ 
# 1425
int4 tmp; 
# 1426
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1427
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1428
} 
#endif
# 1430 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1431
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1435
::exit(___);}
#if 0
# 1431
{ 
# 1432
uint4 tmp; 
# 1433
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1434
(*retVal) = ((unsigned)(tmp.x)); 
# 1435
} 
#endif
# 1437 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1438
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1442
::exit(___);}
#if 0
# 1438
{ 
# 1439
uint4 tmp; 
# 1440
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1441
(*retVal) = make_uint1(tmp.x); 
# 1442
} 
#endif
# 1444 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1445
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1449
::exit(___);}
#if 0
# 1445
{ 
# 1446
uint4 tmp; 
# 1447
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1448
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1449
} 
#endif
# 1451 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1452
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1456
::exit(___);}
#if 0
# 1452
{ 
# 1453
uint4 tmp; 
# 1454
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1455
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1456
} 
#endif
# 1531 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1536
::exit(___);}
#if 0
# 1532
{ 
# 1533
float4 tmp; 
# 1534
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1535
(*retVal) = ((float)(tmp.x)); 
# 1536
} 
#endif
# 1538 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1539
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1543
::exit(___);}
#if 0
# 1539
{ 
# 1540
float4 tmp; 
# 1541
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1542
(*retVal) = make_float1(tmp.x); 
# 1543
} 
#endif
# 1545 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1546
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1550
::exit(___);}
#if 0
# 1546
{ 
# 1547
float4 tmp; 
# 1548
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1549
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1550
} 
#endif
# 1552 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1553
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1557
::exit(___);}
#if 0
# 1553
{ 
# 1554
float4 tmp; 
# 1555
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1556
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1557
} 
#endif
# 1565 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1566
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1575
::exit(___);}
#if 0
# 1566
{ 
# 1571
int4 tmp; 
# 1572
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1574
(*retVal) = ((char)(tmp.x)); 
# 1575
} 
#endif
# 1576 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1577
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1581
::exit(___);}
#if 0
# 1577
{ 
# 1578
int4 tmp; 
# 1579
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1580
(*retVal) = ((signed char)(tmp.x)); 
# 1581
} 
#endif
# 1583 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1584
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1588
::exit(___);}
#if 0
# 1584
{ 
# 1585
int4 tmp; 
# 1586
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1587
(*retVal) = make_char1(tmp.x); 
# 1588
} 
#endif
# 1590 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1591
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1595
::exit(___);}
#if 0
# 1591
{ 
# 1592
int4 tmp; 
# 1593
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1594
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1595
} 
#endif
# 1597 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1598
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1602
::exit(___);}
#if 0
# 1598
{ 
# 1599
int4 tmp; 
# 1600
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1601
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1602
} 
#endif
# 1604 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1605
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1609
::exit(___);}
#if 0
# 1605
{ 
# 1606
uint4 tmp; 
# 1607
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1608
(*retVal) = ((unsigned char)(tmp.x)); 
# 1609
} 
#endif
# 1611 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1612
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1616
::exit(___);}
#if 0
# 1612
{ 
# 1613
uint4 tmp; 
# 1614
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1615
(*retVal) = make_uchar1(tmp.x); 
# 1616
} 
#endif
# 1618 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1619
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1623
::exit(___);}
#if 0
# 1619
{ 
# 1620
uint4 tmp; 
# 1621
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1622
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1623
} 
#endif
# 1625 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1626
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1630
::exit(___);}
#if 0
# 1626
{ 
# 1627
uint4 tmp; 
# 1628
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1629
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1630
} 
#endif
# 1638 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1639
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1643
::exit(___);}
#if 0
# 1639
{ 
# 1640
int4 tmp; 
# 1641
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1642
(*retVal) = ((short)(tmp.x)); 
# 1643
} 
#endif
# 1645 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1650
::exit(___);}
#if 0
# 1646
{ 
# 1647
int4 tmp; 
# 1648
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1649
(*retVal) = make_short1(tmp.x); 
# 1650
} 
#endif
# 1652 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1653
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1657
::exit(___);}
#if 0
# 1653
{ 
# 1654
int4 tmp; 
# 1655
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1656
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1657
} 
#endif
# 1659 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1660
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1664
::exit(___);}
#if 0
# 1660
{ 
# 1661
int4 tmp; 
# 1662
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1663
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1664
} 
#endif
# 1666 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1667
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1671
::exit(___);}
#if 0
# 1667
{ 
# 1668
uint4 tmp; 
# 1669
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1670
(*retVal) = ((unsigned short)(tmp.x)); 
# 1671
} 
#endif
# 1673 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1674
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1678
::exit(___);}
#if 0
# 1674
{ 
# 1675
uint4 tmp; 
# 1676
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1677
(*retVal) = make_ushort1(tmp.x); 
# 1678
} 
#endif
# 1680 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1681
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1685
::exit(___);}
#if 0
# 1681
{ 
# 1682
uint4 tmp; 
# 1683
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1684
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1685
} 
#endif
# 1687 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1688
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1692
::exit(___);}
#if 0
# 1688
{ 
# 1689
uint4 tmp; 
# 1690
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1691
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1692
} 
#endif
# 1700 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1701
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1705
::exit(___);}
#if 0
# 1701
{ 
# 1702
int4 tmp; 
# 1703
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1704
(*retVal) = ((int)(tmp.x)); 
# 1705
} 
#endif
# 1707 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1708
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1712
::exit(___);}
#if 0
# 1708
{ 
# 1709
int4 tmp; 
# 1710
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1711
(*retVal) = make_int1(tmp.x); 
# 1712
} 
#endif
# 1714 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1715
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1719
::exit(___);}
#if 0
# 1715
{ 
# 1716
int4 tmp; 
# 1717
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1718
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1719
} 
#endif
# 1721 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1722
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1726
::exit(___);}
#if 0
# 1722
{ 
# 1723
int4 tmp; 
# 1724
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1725
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1726
} 
#endif
# 1728 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1729
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1733
::exit(___);}
#if 0
# 1729
{ 
# 1730
uint4 tmp; 
# 1731
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1732
(*retVal) = ((unsigned)(tmp.x)); 
# 1733
} 
#endif
# 1735 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1736
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1740
::exit(___);}
#if 0
# 1736
{ 
# 1737
uint4 tmp; 
# 1738
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1739
(*retVal) = make_uint1(tmp.x); 
# 1740
} 
#endif
# 1742 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1743
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1747
::exit(___);}
#if 0
# 1743
{ 
# 1744
uint4 tmp; 
# 1745
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1746
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1747
} 
#endif
# 1749 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1750
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1754
::exit(___);}
#if 0
# 1750
{ 
# 1751
uint4 tmp; 
# 1752
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1753
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1754
} 
#endif
# 1829 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1830
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1834
::exit(___);}
#if 0
# 1830
{ 
# 1831
float4 tmp; 
# 1832
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1833
(*retVal) = ((float)(tmp.x)); 
# 1834
} 
#endif
# 1836 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1837
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1841
::exit(___);}
#if 0
# 1837
{ 
# 1838
float4 tmp; 
# 1839
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1840
(*retVal) = make_float1(tmp.x); 
# 1841
} 
#endif
# 1843 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1844
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1848
::exit(___);}
#if 0
# 1844
{ 
# 1845
float4 tmp; 
# 1846
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1847
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1848
} 
#endif
# 1850 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1851
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1855
::exit(___);}
#if 0
# 1851
{ 
# 1852
float4 tmp; 
# 1853
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1854
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1855
} 
#endif
# 1863 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1864
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1873
::exit(___);}
#if 0
# 1864
{ 
# 1869
int4 tmp; 
# 1870
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1872
(*retVal) = ((char)(tmp.x)); 
# 1873
} 
#endif
# 1874 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1875
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1879
::exit(___);}
#if 0
# 1875
{ 
# 1876
int4 tmp; 
# 1877
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1878
(*retVal) = ((signed char)(tmp.x)); 
# 1879
} 
#endif
# 1881 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1882
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1886
::exit(___);}
#if 0
# 1882
{ 
# 1883
int4 tmp; 
# 1884
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1885
(*retVal) = make_char1(tmp.x); 
# 1886
} 
#endif
# 1888 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1889
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1893
::exit(___);}
#if 0
# 1889
{ 
# 1890
int4 tmp; 
# 1891
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1892
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1893
} 
#endif
# 1895 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1896
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1900
::exit(___);}
#if 0
# 1896
{ 
# 1897
int4 tmp; 
# 1898
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1899
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1900
} 
#endif
# 1902 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1903
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1907
::exit(___);}
#if 0
# 1903
{ 
# 1904
uint4 tmp; 
# 1905
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1906
(*retVal) = ((unsigned char)(tmp.x)); 
# 1907
} 
#endif
# 1909 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1910
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1914
::exit(___);}
#if 0
# 1910
{ 
# 1911
uint4 tmp; 
# 1912
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1913
(*retVal) = make_uchar1(tmp.x); 
# 1914
} 
#endif
# 1916 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1917
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1921
::exit(___);}
#if 0
# 1917
{ 
# 1918
uint4 tmp; 
# 1919
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1920
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1921
} 
#endif
# 1923 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1924
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1928
::exit(___);}
#if 0
# 1924
{ 
# 1925
uint4 tmp; 
# 1926
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1927
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1928
} 
#endif
# 1936 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1937
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1941
::exit(___);}
#if 0
# 1937
{ 
# 1938
int4 tmp; 
# 1939
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1940
(*retVal) = ((short)(tmp.x)); 
# 1941
} 
#endif
# 1943 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1944
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1948
::exit(___);}
#if 0
# 1944
{ 
# 1945
int4 tmp; 
# 1946
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1947
(*retVal) = make_short1(tmp.x); 
# 1948
} 
#endif
# 1950 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1951
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1955
::exit(___);}
#if 0
# 1951
{ 
# 1952
int4 tmp; 
# 1953
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1954
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1955
} 
#endif
# 1957 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1958
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1962
::exit(___);}
#if 0
# 1958
{ 
# 1959
int4 tmp; 
# 1960
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1961
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1962
} 
#endif
# 1964 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1965
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1969
::exit(___);}
#if 0
# 1965
{ 
# 1966
uint4 tmp; 
# 1967
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1968
(*retVal) = ((unsigned short)(tmp.x)); 
# 1969
} 
#endif
# 1971 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1972
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1976
::exit(___);}
#if 0
# 1972
{ 
# 1973
uint4 tmp; 
# 1974
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1975
(*retVal) = make_ushort1(tmp.x); 
# 1976
} 
#endif
# 1978 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1979
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1983
::exit(___);}
#if 0
# 1979
{ 
# 1980
uint4 tmp; 
# 1981
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1982
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1983
} 
#endif
# 1985 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1986
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1990
::exit(___);}
#if 0
# 1986
{ 
# 1987
uint4 tmp; 
# 1988
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 1989
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1990
} 
#endif
# 1998 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1999
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2003
::exit(___);}
#if 0
# 1999
{ 
# 2000
int4 tmp; 
# 2001
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2002
(*retVal) = ((int)(tmp.x)); 
# 2003
} 
#endif
# 2005 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2006
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2010
::exit(___);}
#if 0
# 2006
{ 
# 2007
int4 tmp; 
# 2008
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2009
(*retVal) = make_int1(tmp.x); 
# 2010
} 
#endif
# 2012 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2013
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2017
::exit(___);}
#if 0
# 2013
{ 
# 2014
int4 tmp; 
# 2015
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2016
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2017
} 
#endif
# 2019 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2020
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2024
::exit(___);}
#if 0
# 2020
{ 
# 2021
int4 tmp; 
# 2022
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2023
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2024
} 
#endif
# 2026 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2027
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2031
::exit(___);}
#if 0
# 2027
{ 
# 2028
uint4 tmp; 
# 2029
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2030
(*retVal) = ((unsigned)(tmp.x)); 
# 2031
} 
#endif
# 2033 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2034
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2038
::exit(___);}
#if 0
# 2034
{ 
# 2035
uint4 tmp; 
# 2036
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2037
(*retVal) = make_uint1(tmp.x); 
# 2038
} 
#endif
# 2040 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2041
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2045
::exit(___);}
#if 0
# 2041
{ 
# 2042
uint4 tmp; 
# 2043
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2044
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2045
} 
#endif
# 2047 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2048
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2052
::exit(___);}
#if 0
# 2048
{ 
# 2049
uint4 tmp; 
# 2050
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2051
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2052
} 
#endif
# 2127 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2128
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2132
::exit(___);}
#if 0
# 2128
{ 
# 2129
float4 tmp; 
# 2130
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2131
(*retVal) = ((float)(tmp.x)); 
# 2132
} 
#endif
# 2134 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2135
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2139
::exit(___);}
#if 0
# 2135
{ 
# 2136
float4 tmp; 
# 2137
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2138
(*retVal) = make_float1(tmp.x); 
# 2139
} 
#endif
# 2141 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2142
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2146
::exit(___);}
#if 0
# 2142
{ 
# 2143
float4 tmp; 
# 2144
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2145
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2146
} 
#endif
# 2148 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2153
::exit(___);}
#if 0
# 2149
{ 
# 2150
float4 tmp; 
# 2151
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2152
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2153
} 
#endif
# 2161 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2162
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2171
::exit(___);}
#if 0
# 2162
{ 
# 2167
int4 tmp; 
# 2168
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2170
(*retVal) = ((char)(tmp.x)); 
# 2171
} 
#endif
# 2172 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2173
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2177
::exit(___);}
#if 0
# 2173
{ 
# 2174
int4 tmp; 
# 2175
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2176
(*retVal) = ((signed char)(tmp.x)); 
# 2177
} 
#endif
# 2179 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2180
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2184
::exit(___);}
#if 0
# 2180
{ 
# 2181
int4 tmp; 
# 2182
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2183
(*retVal) = make_char1(tmp.x); 
# 2184
} 
#endif
# 2186 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2187
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2191
::exit(___);}
#if 0
# 2187
{ 
# 2188
int4 tmp; 
# 2189
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2190
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2191
} 
#endif
# 2193 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2194
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2198
::exit(___);}
#if 0
# 2194
{ 
# 2195
int4 tmp; 
# 2196
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2197
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2198
} 
#endif
# 2200 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2201
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2205
::exit(___);}
#if 0
# 2201
{ 
# 2202
uint4 tmp; 
# 2203
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2204
(*retVal) = ((unsigned char)(tmp.x)); 
# 2205
} 
#endif
# 2207 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2208
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2212
::exit(___);}
#if 0
# 2208
{ 
# 2209
uint4 tmp; 
# 2210
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2211
(*retVal) = make_uchar1(tmp.x); 
# 2212
} 
#endif
# 2214 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2215
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2219
::exit(___);}
#if 0
# 2215
{ 
# 2216
uint4 tmp; 
# 2217
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2218
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2219
} 
#endif
# 2221 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2222
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2226
::exit(___);}
#if 0
# 2222
{ 
# 2223
uint4 tmp; 
# 2224
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2225
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2226
} 
#endif
# 2234 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2235
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2239
::exit(___);}
#if 0
# 2235
{ 
# 2236
int4 tmp; 
# 2237
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2238
(*retVal) = ((short)(tmp.x)); 
# 2239
} 
#endif
# 2241 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2242
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2246
::exit(___);}
#if 0
# 2242
{ 
# 2243
int4 tmp; 
# 2244
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2245
(*retVal) = make_short1(tmp.x); 
# 2246
} 
#endif
# 2248 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2249
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2253
::exit(___);}
#if 0
# 2249
{ 
# 2250
int4 tmp; 
# 2251
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2252
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2253
} 
#endif
# 2255 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2256
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2260
::exit(___);}
#if 0
# 2256
{ 
# 2257
int4 tmp; 
# 2258
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2259
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2260
} 
#endif
# 2262 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2263
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2267
::exit(___);}
#if 0
# 2263
{ 
# 2264
uint4 tmp; 
# 2265
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2266
(*retVal) = ((unsigned short)(tmp.x)); 
# 2267
} 
#endif
# 2269 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2270
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2274
::exit(___);}
#if 0
# 2270
{ 
# 2271
uint4 tmp; 
# 2272
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2273
(*retVal) = make_ushort1(tmp.x); 
# 2274
} 
#endif
# 2276 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2277
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2281
::exit(___);}
#if 0
# 2277
{ 
# 2278
uint4 tmp; 
# 2279
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2280
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2281
} 
#endif
# 2283 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2284
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2288
::exit(___);}
#if 0
# 2284
{ 
# 2285
uint4 tmp; 
# 2286
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2287
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2288
} 
#endif
# 2296 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2297
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2301
::exit(___);}
#if 0
# 2297
{ 
# 2298
int4 tmp; 
# 2299
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2300
(*retVal) = ((int)(tmp.x)); 
# 2301
} 
#endif
# 2303 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2304
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2308
::exit(___);}
#if 0
# 2304
{ 
# 2305
int4 tmp; 
# 2306
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2307
(*retVal) = make_int1(tmp.x); 
# 2308
} 
#endif
# 2310 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2311
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2315
::exit(___);}
#if 0
# 2311
{ 
# 2312
int4 tmp; 
# 2313
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2314
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2315
} 
#endif
# 2317 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2318
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2322
::exit(___);}
#if 0
# 2318
{ 
# 2319
int4 tmp; 
# 2320
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2321
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2322
} 
#endif
# 2324 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2325
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2329
::exit(___);}
#if 0
# 2325
{ 
# 2326
uint4 tmp; 
# 2327
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2328
(*retVal) = ((unsigned)(tmp.x)); 
# 2329
} 
#endif
# 2331 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2332
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2336
::exit(___);}
#if 0
# 2332
{ 
# 2333
uint4 tmp; 
# 2334
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2335
(*retVal) = make_uint1(tmp.x); 
# 2336
} 
#endif
# 2338 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2339
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2343
::exit(___);}
#if 0
# 2339
{ 
# 2340
uint4 tmp; 
# 2341
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2342
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2343
} 
#endif
# 2345 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2346
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2350
::exit(___);}
#if 0
# 2346
{ 
# 2347
uint4 tmp; 
# 2348
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2349
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2350
} 
#endif
# 2425 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2426
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2430
::exit(___);}
#if 0
# 2426
{ 
# 2427
float4 tmp; 
# 2428
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2429
(*retVal) = ((float)(tmp.x)); 
# 2430
} 
#endif
# 2432 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2433
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2437
::exit(___);}
#if 0
# 2433
{ 
# 2434
float4 tmp; 
# 2435
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2436
(*retVal) = make_float1(tmp.x); 
# 2437
} 
#endif
# 2439 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2440
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2444
::exit(___);}
#if 0
# 2440
{ 
# 2441
float4 tmp; 
# 2442
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2443
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2444
} 
#endif
# 2446 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2447
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2451
::exit(___);}
#if 0
# 2447
{ 
# 2448
float4 tmp; 
# 2449
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2450
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2451
} 
#endif
# 2459 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2460
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2475
::exit(___);}
#if 0
# 2460
{ 
# 2461
int4 tmp; 
# 2462
if (comp == 0) { 
# 2463
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2464
} else { 
# 2465
if (comp == 1) { 
# 2466
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2467
} else { 
# 2468
if (comp == 2) { 
# 2469
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2470
} else { 
# 2471
if (comp == 3) { 
# 2472
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2473
}  }  }  }  
# 2474
(*retVal) = ((char)(tmp.x)); 
# 2475
} 
#endif
# 2477 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2478
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2493
::exit(___);}
#if 0
# 2478
{ 
# 2479
int4 tmp; 
# 2480
if (comp == 0) { 
# 2481
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2482
} else { 
# 2483
if (comp == 1) { 
# 2484
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2485
} else { 
# 2486
if (comp == 2) { 
# 2487
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2488
} else { 
# 2489
if (comp == 3) { 
# 2490
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2491
}  }  }  }  
# 2492
(*retVal) = ((signed char)(tmp.x)); 
# 2493
} 
#endif
# 2495 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2496
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2511
::exit(___);}
#if 0
# 2496
{ 
# 2497
int4 tmp; 
# 2498
if (comp == 0) { 
# 2499
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2500
} else { 
# 2501
if (comp == 1) { 
# 2502
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2503
} else { 
# 2504
if (comp == 2) { 
# 2505
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2506
} else { 
# 2507
if (comp == 3) { 
# 2508
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2509
}  }  }  }  
# 2510
(*retVal) = make_char1(tmp.x); 
# 2511
} 
#endif
# 2513 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2529
::exit(___);}
#if 0
# 2514
{ 
# 2515
int4 tmp; 
# 2516
if (comp == 0) { 
# 2517
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2518
} else { 
# 2519
if (comp == 1) { 
# 2520
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2521
} else { 
# 2522
if (comp == 2) { 
# 2523
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2524
} else { 
# 2525
if (comp == 3) { 
# 2526
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2527
}  }  }  }  
# 2528
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2529
} 
#endif
# 2531 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2547
::exit(___);}
#if 0
# 2532
{ 
# 2533
int4 tmp; 
# 2534
if (comp == 0) { 
# 2535
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2536
} else { 
# 2537
if (comp == 1) { 
# 2538
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2539
} else { 
# 2540
if (comp == 2) { 
# 2541
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2542
} else { 
# 2543
if (comp == 3) { 
# 2544
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2545
}  }  }  }  
# 2546
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2547
} 
#endif
# 2549 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2550
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2565
::exit(___);}
#if 0
# 2550
{ 
# 2551
uint4 tmp; 
# 2552
if (comp == 0) { 
# 2553
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2554
} else { 
# 2555
if (comp == 1) { 
# 2556
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2557
} else { 
# 2558
if (comp == 2) { 
# 2559
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2560
} else { 
# 2561
if (comp == 3) { 
# 2562
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2563
}  }  }  }  
# 2564
(*retVal) = ((unsigned char)(tmp.x)); 
# 2565
} 
#endif
# 2567 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2568
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2583
::exit(___);}
#if 0
# 2568
{ 
# 2569
uint4 tmp; 
# 2570
if (comp == 0) { 
# 2571
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2572
} else { 
# 2573
if (comp == 1) { 
# 2574
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2575
} else { 
# 2576
if (comp == 2) { 
# 2577
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2578
} else { 
# 2579
if (comp == 3) { 
# 2580
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2581
}  }  }  }  
# 2582
(*retVal) = make_uchar1(tmp.x); 
# 2583
} 
#endif
# 2585 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2586
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2601
::exit(___);}
#if 0
# 2586
{ 
# 2587
uint4 tmp; 
# 2588
if (comp == 0) { 
# 2589
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2590
} else { 
# 2591
if (comp == 1) { 
# 2592
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2593
} else { 
# 2594
if (comp == 2) { 
# 2595
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2596
} else { 
# 2597
if (comp == 3) { 
# 2598
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2599
}  }  }  }  
# 2600
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2601
} 
#endif
# 2603 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2604
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2619
::exit(___);}
#if 0
# 2604
{ 
# 2605
uint4 tmp; 
# 2606
if (comp == 0) { 
# 2607
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2608
} else { 
# 2609
if (comp == 1) { 
# 2610
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2611
} else { 
# 2612
if (comp == 2) { 
# 2613
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2614
} else { 
# 2615
if (comp == 3) { 
# 2616
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2617
}  }  }  }  
# 2618
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2619
} 
#endif
# 2627 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2628
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2643
::exit(___);}
#if 0
# 2628
{ 
# 2629
int4 tmp; 
# 2630
if (comp == 0) { 
# 2631
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2632
} else { 
# 2633
if (comp == 1) { 
# 2634
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2635
} else { 
# 2636
if (comp == 2) { 
# 2637
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2638
} else { 
# 2639
if (comp == 3) { 
# 2640
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2641
}  }  }  }  
# 2642
(*retVal) = ((short)(tmp.x)); 
# 2643
} 
#endif
# 2645 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2661
::exit(___);}
#if 0
# 2646
{ 
# 2647
int4 tmp; 
# 2648
if (comp == 0) { 
# 2649
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2650
} else { 
# 2651
if (comp == 1) { 
# 2652
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2653
} else { 
# 2654
if (comp == 2) { 
# 2655
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2656
} else { 
# 2657
if (comp == 3) { 
# 2658
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2659
}  }  }  }  
# 2660
(*retVal) = make_short1(tmp.x); 
# 2661
} 
#endif
# 2663 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2664
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2679
::exit(___);}
#if 0
# 2664
{ 
# 2665
int4 tmp; 
# 2666
if (comp == 0) { 
# 2667
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2668
} else { 
# 2669
if (comp == 1) { 
# 2670
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2671
} else { 
# 2672
if (comp == 2) { 
# 2673
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2674
} else { 
# 2675
if (comp == 3) { 
# 2676
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2677
}  }  }  }  
# 2678
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2679
} 
#endif
# 2681 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2697
::exit(___);}
#if 0
# 2682
{ 
# 2683
int4 tmp; 
# 2684
if (comp == 0) { 
# 2685
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2686
} else { 
# 2687
if (comp == 1) { 
# 2688
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2689
} else { 
# 2690
if (comp == 2) { 
# 2691
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2692
} else { 
# 2693
if (comp == 3) { 
# 2694
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2695
}  }  }  }  
# 2696
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2697
} 
#endif
# 2699 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2700
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2715
::exit(___);}
#if 0
# 2700
{ 
# 2701
uint4 tmp; 
# 2702
if (comp == 0) { 
# 2703
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2704
} else { 
# 2705
if (comp == 1) { 
# 2706
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2707
} else { 
# 2708
if (comp == 2) { 
# 2709
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2710
} else { 
# 2711
if (comp == 3) { 
# 2712
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2713
}  }  }  }  
# 2714
(*retVal) = ((unsigned short)(tmp.x)); 
# 2715
} 
#endif
# 2717 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2733
::exit(___);}
#if 0
# 2718
{ 
# 2719
uint4 tmp; 
# 2720
if (comp == 0) { 
# 2721
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2722
} else { 
# 2723
if (comp == 1) { 
# 2724
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2725
} else { 
# 2726
if (comp == 2) { 
# 2727
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2728
} else { 
# 2729
if (comp == 3) { 
# 2730
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2731
}  }  }  }  
# 2732
(*retVal) = make_ushort1(tmp.x); 
# 2733
} 
#endif
# 2735 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2736
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2751
::exit(___);}
#if 0
# 2736
{ 
# 2737
uint4 tmp; 
# 2738
if (comp == 0) { 
# 2739
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2740
} else { 
# 2741
if (comp == 1) { 
# 2742
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2743
} else { 
# 2744
if (comp == 2) { 
# 2745
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2746
} else { 
# 2747
if (comp == 3) { 
# 2748
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2749
}  }  }  }  
# 2750
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2751
} 
#endif
# 2753 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2754
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2769
::exit(___);}
#if 0
# 2754
{ 
# 2755
uint4 tmp; 
# 2756
if (comp == 0) { 
# 2757
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2758
} else { 
# 2759
if (comp == 1) { 
# 2760
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2761
} else { 
# 2762
if (comp == 2) { 
# 2763
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2764
} else { 
# 2765
if (comp == 3) { 
# 2766
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2767
}  }  }  }  
# 2768
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2769
} 
#endif
# 2777 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2778
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2793
::exit(___);}
#if 0
# 2778
{ 
# 2779
int4 tmp; 
# 2780
if (comp == 0) { 
# 2781
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2782
} else { 
# 2783
if (comp == 1) { 
# 2784
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2785
} else { 
# 2786
if (comp == 2) { 
# 2787
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2788
} else { 
# 2789
if (comp == 3) { 
# 2790
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2791
}  }  }  }  
# 2792
(*retVal) = ((int)(tmp.x)); 
# 2793
} 
#endif
# 2795 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2796
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2811
::exit(___);}
#if 0
# 2796
{ 
# 2797
int4 tmp; 
# 2798
if (comp == 0) { 
# 2799
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2800
} else { 
# 2801
if (comp == 1) { 
# 2802
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2803
} else { 
# 2804
if (comp == 2) { 
# 2805
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2806
} else { 
# 2807
if (comp == 3) { 
# 2808
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2809
}  }  }  }  
# 2810
(*retVal) = make_int1(tmp.x); 
# 2811
} 
#endif
# 2813 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2814
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2829
::exit(___);}
#if 0
# 2814
{ 
# 2815
int4 tmp; 
# 2816
if (comp == 0) { 
# 2817
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2818
} else { 
# 2819
if (comp == 1) { 
# 2820
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2821
} else { 
# 2822
if (comp == 2) { 
# 2823
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2824
} else { 
# 2825
if (comp == 3) { 
# 2826
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2827
}  }  }  }  
# 2828
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2829
} 
#endif
# 2831 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2832
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2847
::exit(___);}
#if 0
# 2832
{ 
# 2833
int4 tmp; 
# 2834
if (comp == 0) { 
# 2835
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2836
} else { 
# 2837
if (comp == 1) { 
# 2838
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2839
} else { 
# 2840
if (comp == 2) { 
# 2841
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2842
} else { 
# 2843
if (comp == 3) { 
# 2844
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2845
}  }  }  }  
# 2846
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2847
} 
#endif
# 2849 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2850
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2865
::exit(___);}
#if 0
# 2850
{ 
# 2851
uint4 tmp; 
# 2852
if (comp == 0) { 
# 2853
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2854
} else { 
# 2855
if (comp == 1) { 
# 2856
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2857
} else { 
# 2858
if (comp == 2) { 
# 2859
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2860
} else { 
# 2861
if (comp == 3) { 
# 2862
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2863
}  }  }  }  
# 2864
(*retVal) = ((unsigned)(tmp.x)); 
# 2865
} 
#endif
# 2867 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2868
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2883
::exit(___);}
#if 0
# 2868
{ 
# 2869
uint4 tmp; 
# 2870
if (comp == 0) { 
# 2871
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2872
} else { 
# 2873
if (comp == 1) { 
# 2874
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2875
} else { 
# 2876
if (comp == 2) { 
# 2877
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2878
} else { 
# 2879
if (comp == 3) { 
# 2880
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2881
}  }  }  }  
# 2882
(*retVal) = make_uint1(tmp.x); 
# 2883
} 
#endif
# 2885 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2886
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2901
::exit(___);}
#if 0
# 2886
{ 
# 2887
uint4 tmp; 
# 2888
if (comp == 0) { 
# 2889
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2890
} else { 
# 2891
if (comp == 1) { 
# 2892
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2893
} else { 
# 2894
if (comp == 2) { 
# 2895
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2896
} else { 
# 2897
if (comp == 3) { 
# 2898
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2899
}  }  }  }  
# 2900
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2901
} 
#endif
# 2903 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2904
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2919
::exit(___);}
#if 0
# 2904
{ 
# 2905
uint4 tmp; 
# 2906
if (comp == 0) { 
# 2907
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2908
} else { 
# 2909
if (comp == 1) { 
# 2910
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2911
} else { 
# 2912
if (comp == 2) { 
# 2913
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2914
} else { 
# 2915
if (comp == 3) { 
# 2916
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2917
}  }  }  }  
# 2918
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2919
} 
#endif
# 2927 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2928
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2943
::exit(___);}
#if 0
# 2928
{ 
# 2929
int4 tmp; 
# 2930
if (comp == 0) { 
# 2931
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2932
} else { 
# 2933
if (comp == 1) { 
# 2934
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2935
} else { 
# 2936
if (comp == 2) { 
# 2937
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2938
} else { 
# 2939
if (comp == 3) { 
# 2940
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2941
}  }  }  }  
# 2942
(*retVal) = ((long)(tmp.x)); 
# 2943
} 
#endif
# 2945 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2946
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2961
::exit(___);}
#if 0
# 2946
{ 
# 2947
int4 tmp; 
# 2948
if (comp == 0) { 
# 2949
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2950
} else { 
# 2951
if (comp == 1) { 
# 2952
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2953
} else { 
# 2954
if (comp == 2) { 
# 2955
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2956
} else { 
# 2957
if (comp == 3) { 
# 2958
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2959
}  }  }  }  
# 2960
(*retVal) = make_long1(tmp.x); 
# 2961
} 
#endif
# 2963 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2964
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2979
::exit(___);}
#if 0
# 2964
{ 
# 2965
int4 tmp; 
# 2966
if (comp == 0) { 
# 2967
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2968
} else { 
# 2969
if (comp == 1) { 
# 2970
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2971
} else { 
# 2972
if (comp == 2) { 
# 2973
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2974
} else { 
# 2975
if (comp == 3) { 
# 2976
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2977
}  }  }  }  
# 2978
(*retVal) = make_long2(tmp.x, tmp.y); 
# 2979
} 
#endif
# 2981 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 2982
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2997
::exit(___);}
#if 0
# 2982
{ 
# 2983
int4 tmp; 
# 2984
if (comp == 0) { 
# 2985
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2986
} else { 
# 2987
if (comp == 1) { 
# 2988
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2989
} else { 
# 2990
if (comp == 2) { 
# 2991
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2992
} else { 
# 2993
if (comp == 3) { 
# 2994
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 2995
}  }  }  }  
# 2996
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2997
} 
#endif
# 2999 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3000
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3015
::exit(___);}
#if 0
# 3000
{ 
# 3001
uint4 tmp; 
# 3002
if (comp == 0) { 
# 3003
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3004
} else { 
# 3005
if (comp == 1) { 
# 3006
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3007
} else { 
# 3008
if (comp == 2) { 
# 3009
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3010
} else { 
# 3011
if (comp == 3) { 
# 3012
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3013
}  }  }  }  
# 3014
(*retVal) = ((unsigned long)(tmp.x)); 
# 3015
} 
#endif
# 3017 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3018
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3033
::exit(___);}
#if 0
# 3018
{ 
# 3019
uint4 tmp; 
# 3020
if (comp == 0) { 
# 3021
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3022
} else { 
# 3023
if (comp == 1) { 
# 3024
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3025
} else { 
# 3026
if (comp == 2) { 
# 3027
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3028
} else { 
# 3029
if (comp == 3) { 
# 3030
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3031
}  }  }  }  
# 3032
(*retVal) = make_ulong1(tmp.x); 
# 3033
} 
#endif
# 3035 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3036
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3051
::exit(___);}
#if 0
# 3036
{ 
# 3037
uint4 tmp; 
# 3038
if (comp == 0) { 
# 3039
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3040
} else { 
# 3041
if (comp == 1) { 
# 3042
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3043
} else { 
# 3044
if (comp == 2) { 
# 3045
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3046
} else { 
# 3047
if (comp == 3) { 
# 3048
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3049
}  }  }  }  
# 3050
(*retVal) = make_ulong2(tmp.x, tmp.y); 
# 3051
} 
#endif
# 3053 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3054
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3069
::exit(___);}
#if 0
# 3054
{ 
# 3055
uint4 tmp; 
# 3056
if (comp == 0) { 
# 3057
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3058
} else { 
# 3059
if (comp == 1) { 
# 3060
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3061
} else { 
# 3062
if (comp == 2) { 
# 3063
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3064
} else { 
# 3065
if (comp == 3) { 
# 3066
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3067
}  }  }  }  
# 3068
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3069
} 
#endif
# 3077 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3093
::exit(___);}
#if 0
# 3078
{ 
# 3079
float4 tmp; 
# 3080
if (comp == 0) { 
# 3081
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3082
} else { 
# 3083
if (comp == 1) { 
# 3084
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3085
} else { 
# 3086
if (comp == 2) { 
# 3087
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3088
} else { 
# 3089
if (comp == 3) { 
# 3090
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3091
}  }  }  }  
# 3092
(*retVal) = ((float)(tmp.x)); 
# 3093
} 
#endif
# 3095 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3096
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3111
::exit(___);}
#if 0
# 3096
{ 
# 3097
float4 tmp; 
# 3098
if (comp == 0) { 
# 3099
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3100
} else { 
# 3101
if (comp == 1) { 
# 3102
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3103
} else { 
# 3104
if (comp == 2) { 
# 3105
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3106
} else { 
# 3107
if (comp == 3) { 
# 3108
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3109
}  }  }  }  
# 3110
(*retVal) = make_float1(tmp.x); 
# 3111
} 
#endif
# 3113 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3114
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3129
::exit(___);}
#if 0
# 3114
{ 
# 3115
float4 tmp; 
# 3116
if (comp == 0) { 
# 3117
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3118
} else { 
# 3119
if (comp == 1) { 
# 3120
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3121
} else { 
# 3122
if (comp == 2) { 
# 3123
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3124
} else { 
# 3125
if (comp == 3) { 
# 3126
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3127
}  }  }  }  
# 3128
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3129
} 
#endif
# 3131 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
# 3132
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3147
::exit(___);}
#if 0
# 3132
{ 
# 3133
float4 tmp; 
# 3134
if (comp == 0) { 
# 3135
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3136
} else { 
# 3137
if (comp == 1) { 
# 3138
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3139
} else { 
# 3140
if (comp == 2) { 
# 3141
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3142
} else { 
# 3143
if (comp == 3) { 
# 3144
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3145
}  }  }  }  
# 3146
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3147
} 
#endif
# 3155 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3156
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3165
::exit(___);}
#if 0
# 3156
{ 
# 3161
int4 tmp; 
# 3162
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3164
(*retVal) = ((char)(tmp.x)); 
# 3165
} 
#endif
# 3166 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3167
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3171
::exit(___);}
#if 0
# 3167
{ 
# 3168
int4 tmp; 
# 3169
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3170
(*retVal) = ((signed char)(tmp.x)); 
# 3171
} 
#endif
# 3173 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3174
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3178
::exit(___);}
#if 0
# 3174
{ 
# 3175
int4 tmp; 
# 3176
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3177
(*retVal) = make_char1(tmp.x); 
# 3178
} 
#endif
# 3180 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3181
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3185
::exit(___);}
#if 0
# 3181
{ 
# 3182
int4 tmp; 
# 3183
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3184
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3185
} 
#endif
# 3187 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3188
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3192
::exit(___);}
#if 0
# 3188
{ 
# 3189
int4 tmp; 
# 3190
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3191
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3192
} 
#endif
# 3194 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3195
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3199
::exit(___);}
#if 0
# 3195
{ 
# 3196
uint4 tmp; 
# 3197
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3198
(*retVal) = ((unsigned char)(tmp.x)); 
# 3199
} 
#endif
# 3201 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3202
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3206
::exit(___);}
#if 0
# 3202
{ 
# 3203
uint4 tmp; 
# 3204
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3205
(*retVal) = make_uchar1(tmp.x); 
# 3206
} 
#endif
# 3208 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3209
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3213
::exit(___);}
#if 0
# 3209
{ 
# 3210
uint4 tmp; 
# 3211
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3212
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3213
} 
#endif
# 3215 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3216
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3220
::exit(___);}
#if 0
# 3216
{ 
# 3217
uint4 tmp; 
# 3218
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3219
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3220
} 
#endif
# 3228 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3229
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3233
::exit(___);}
#if 0
# 3229
{ 
# 3230
int4 tmp; 
# 3231
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3232
(*retVal) = ((short)(tmp.x)); 
# 3233
} 
#endif
# 3235 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3236
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3240
::exit(___);}
#if 0
# 3236
{ 
# 3237
int4 tmp; 
# 3238
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3239
(*retVal) = make_short1(tmp.x); 
# 3240
} 
#endif
# 3242 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3243
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3247
::exit(___);}
#if 0
# 3243
{ 
# 3244
int4 tmp; 
# 3245
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3246
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3247
} 
#endif
# 3249 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3250
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3254
::exit(___);}
#if 0
# 3250
{ 
# 3251
int4 tmp; 
# 3252
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3253
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3254
} 
#endif
# 3256 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3257
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3261
::exit(___);}
#if 0
# 3257
{ 
# 3258
uint4 tmp; 
# 3259
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3260
(*retVal) = ((unsigned short)(tmp.x)); 
# 3261
} 
#endif
# 3263 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3264
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3268
::exit(___);}
#if 0
# 3264
{ 
# 3265
uint4 tmp; 
# 3266
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3267
(*retVal) = make_ushort1(tmp.x); 
# 3268
} 
#endif
# 3270 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3275
::exit(___);}
#if 0
# 3271
{ 
# 3272
uint4 tmp; 
# 3273
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3274
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3275
} 
#endif
# 3277 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3278
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3282
::exit(___);}
#if 0
# 3278
{ 
# 3279
uint4 tmp; 
# 3280
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3281
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3282
} 
#endif
# 3290 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3291
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3295
::exit(___);}
#if 0
# 3291
{ 
# 3292
int4 tmp; 
# 3293
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3294
(*retVal) = ((int)(tmp.x)); 
# 3295
} 
#endif
# 3297 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3298
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3302
::exit(___);}
#if 0
# 3298
{ 
# 3299
int4 tmp; 
# 3300
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3301
(*retVal) = make_int1(tmp.x); 
# 3302
} 
#endif
# 3304 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3305
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3309
::exit(___);}
#if 0
# 3305
{ 
# 3306
int4 tmp; 
# 3307
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3308
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3309
} 
#endif
# 3311 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3312
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3316
::exit(___);}
#if 0
# 3312
{ 
# 3313
int4 tmp; 
# 3314
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3315
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3316
} 
#endif
# 3318 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3319
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3323
::exit(___);}
#if 0
# 3319
{ 
# 3320
uint4 tmp; 
# 3321
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3322
(*retVal) = ((unsigned)(tmp.x)); 
# 3323
} 
#endif
# 3325 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3326
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3330
::exit(___);}
#if 0
# 3326
{ 
# 3327
uint4 tmp; 
# 3328
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3329
(*retVal) = make_uint1(tmp.x); 
# 3330
} 
#endif
# 3332 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3333
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3337
::exit(___);}
#if 0
# 3333
{ 
# 3334
uint4 tmp; 
# 3335
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3336
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3337
} 
#endif
# 3339 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3340
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3344
::exit(___);}
#if 0
# 3340
{ 
# 3341
uint4 tmp; 
# 3342
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3343
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3344
} 
#endif
# 3419 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3424
::exit(___);}
#if 0
# 3420
{ 
# 3421
float4 tmp; 
# 3422
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3423
(*retVal) = ((float)(tmp.x)); 
# 3424
} 
#endif
# 3426 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3431
::exit(___);}
#if 0
# 3427
{ 
# 3428
float4 tmp; 
# 3429
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3430
(*retVal) = make_float1(tmp.x); 
# 3431
} 
#endif
# 3433 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3438
::exit(___);}
#if 0
# 3434
{ 
# 3435
float4 tmp; 
# 3436
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3437
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3438
} 
#endif
# 3440 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3441
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3445
::exit(___);}
#if 0
# 3441
{ 
# 3442
float4 tmp; 
# 3443
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3444
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3445
} 
#endif
# 3453 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3463
::exit(___);}
#if 0
# 3454
{ 
# 3459
int4 tmp; 
# 3460
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3462
(*retVal) = ((char)(tmp.x)); 
# 3463
} 
#endif
# 3464 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3465
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3469
::exit(___);}
#if 0
# 3465
{ 
# 3466
int4 tmp; 
# 3467
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3468
(*retVal) = ((signed char)(tmp.x)); 
# 3469
} 
#endif
# 3471 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3472
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3476
::exit(___);}
#if 0
# 3472
{ 
# 3473
int4 tmp; 
# 3474
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3475
(*retVal) = make_char1(tmp.x); 
# 3476
} 
#endif
# 3478 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3479
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3483
::exit(___);}
#if 0
# 3479
{ 
# 3480
int4 tmp; 
# 3481
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3482
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3483
} 
#endif
# 3485 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3486
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3490
::exit(___);}
#if 0
# 3486
{ 
# 3487
int4 tmp; 
# 3488
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3489
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3490
} 
#endif
# 3492 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3493
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3497
::exit(___);}
#if 0
# 3493
{ 
# 3494
uint4 tmp; 
# 3495
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3496
(*retVal) = ((unsigned char)(tmp.x)); 
# 3497
} 
#endif
# 3499 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3500
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3504
::exit(___);}
#if 0
# 3500
{ 
# 3501
uint4 tmp; 
# 3502
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3503
(*retVal) = make_uchar1(tmp.x); 
# 3504
} 
#endif
# 3506 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3507
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3511
::exit(___);}
#if 0
# 3507
{ 
# 3508
uint4 tmp; 
# 3509
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3510
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3511
} 
#endif
# 3513 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3518
::exit(___);}
#if 0
# 3514
{ 
# 3515
uint4 tmp; 
# 3516
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3517
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3518
} 
#endif
# 3526 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3527
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3531
::exit(___);}
#if 0
# 3527
{ 
# 3528
int4 tmp; 
# 3529
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3530
(*retVal) = ((short)(tmp.x)); 
# 3531
} 
#endif
# 3533 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3534
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3538
::exit(___);}
#if 0
# 3534
{ 
# 3535
int4 tmp; 
# 3536
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3537
(*retVal) = make_short1(tmp.x); 
# 3538
} 
#endif
# 3540 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3541
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3545
::exit(___);}
#if 0
# 3541
{ 
# 3542
int4 tmp; 
# 3543
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3544
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3545
} 
#endif
# 3547 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3548
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3552
::exit(___);}
#if 0
# 3548
{ 
# 3549
int4 tmp; 
# 3550
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3551
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3552
} 
#endif
# 3554 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3555
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3559
::exit(___);}
#if 0
# 3555
{ 
# 3556
uint4 tmp; 
# 3557
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3558
(*retVal) = ((unsigned short)(tmp.x)); 
# 3559
} 
#endif
# 3561 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3562
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3566
::exit(___);}
#if 0
# 3562
{ 
# 3563
uint4 tmp; 
# 3564
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3565
(*retVal) = make_ushort1(tmp.x); 
# 3566
} 
#endif
# 3568 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3569
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3573
::exit(___);}
#if 0
# 3569
{ 
# 3570
uint4 tmp; 
# 3571
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3572
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3573
} 
#endif
# 3575 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3576
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3580
::exit(___);}
#if 0
# 3576
{ 
# 3577
uint4 tmp; 
# 3578
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3579
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3580
} 
#endif
# 3588 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3589
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3593
::exit(___);}
#if 0
# 3589
{ 
# 3590
int4 tmp; 
# 3591
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3592
(*retVal) = ((int)(tmp.x)); 
# 3593
} 
#endif
# 3595 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3596
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3600
::exit(___);}
#if 0
# 3596
{ 
# 3597
int4 tmp; 
# 3598
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3599
(*retVal) = make_int1(tmp.x); 
# 3600
} 
#endif
# 3602 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3603
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3607
::exit(___);}
#if 0
# 3603
{ 
# 3604
int4 tmp; 
# 3605
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3606
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3607
} 
#endif
# 3609 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3610
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3614
::exit(___);}
#if 0
# 3610
{ 
# 3611
int4 tmp; 
# 3612
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3613
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3614
} 
#endif
# 3616 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3617
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3621
::exit(___);}
#if 0
# 3617
{ 
# 3618
uint4 tmp; 
# 3619
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3620
(*retVal) = ((unsigned)(tmp.x)); 
# 3621
} 
#endif
# 3623 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3624
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3628
::exit(___);}
#if 0
# 3624
{ 
# 3625
uint4 tmp; 
# 3626
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3627
(*retVal) = make_uint1(tmp.x); 
# 3628
} 
#endif
# 3630 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3631
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3635
::exit(___);}
#if 0
# 3631
{ 
# 3632
uint4 tmp; 
# 3633
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3634
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3635
} 
#endif
# 3637 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3638
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3642
::exit(___);}
#if 0
# 3638
{ 
# 3639
uint4 tmp; 
# 3640
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3641
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3642
} 
#endif
# 3717 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3722
::exit(___);}
#if 0
# 3718
{ 
# 3719
float4 tmp; 
# 3720
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3721
(*retVal) = ((float)(tmp.x)); 
# 3722
} 
#endif
# 3724 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3729
::exit(___);}
#if 0
# 3725
{ 
# 3726
float4 tmp; 
# 3727
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3728
(*retVal) = make_float1(tmp.x); 
# 3729
} 
#endif
# 3731 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3736
::exit(___);}
#if 0
# 3732
{ 
# 3733
float4 tmp; 
# 3734
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3735
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3736
} 
#endif
# 3738 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3739
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3743
::exit(___);}
#if 0
# 3739
{ 
# 3740
float4 tmp; 
# 3741
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3742
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3743
} 
#endif
# 3751 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3752
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3761
::exit(___);}
#if 0
# 3752
{ 
# 3757
int4 tmp; 
# 3758
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3760
(*retVal) = ((char)(tmp.x)); 
# 3761
} 
#endif
# 3762 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3763
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3767
::exit(___);}
#if 0
# 3763
{ 
# 3764
int4 tmp; 
# 3765
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3766
(*retVal) = ((signed char)(tmp.x)); 
# 3767
} 
#endif
# 3769 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3770
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3774
::exit(___);}
#if 0
# 3770
{ 
# 3771
int4 tmp; 
# 3772
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3773
(*retVal) = make_char1(tmp.x); 
# 3774
} 
#endif
# 3776 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3777
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3781
::exit(___);}
#if 0
# 3777
{ 
# 3778
int4 tmp; 
# 3779
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3780
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3781
} 
#endif
# 3783 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3784
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3788
::exit(___);}
#if 0
# 3784
{ 
# 3785
int4 tmp; 
# 3786
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3787
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3788
} 
#endif
# 3790 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3791
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3795
::exit(___);}
#if 0
# 3791
{ 
# 3792
uint4 tmp; 
# 3793
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3794
(*retVal) = ((unsigned char)(tmp.x)); 
# 3795
} 
#endif
# 3797 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3798
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3802
::exit(___);}
#if 0
# 3798
{ 
# 3799
uint4 tmp; 
# 3800
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3801
(*retVal) = make_uchar1(tmp.x); 
# 3802
} 
#endif
# 3804 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3805
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3809
::exit(___);}
#if 0
# 3805
{ 
# 3806
uint4 tmp; 
# 3807
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3808
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3809
} 
#endif
# 3811 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3812
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3816
::exit(___);}
#if 0
# 3812
{ 
# 3813
uint4 tmp; 
# 3814
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3815
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3816
} 
#endif
# 3824 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3825
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3829
::exit(___);}
#if 0
# 3825
{ 
# 3826
int4 tmp; 
# 3827
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3828
(*retVal) = ((short)(tmp.x)); 
# 3829
} 
#endif
# 3831 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3832
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3836
::exit(___);}
#if 0
# 3832
{ 
# 3833
int4 tmp; 
# 3834
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3835
(*retVal) = make_short1(tmp.x); 
# 3836
} 
#endif
# 3838 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3839
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3843
::exit(___);}
#if 0
# 3839
{ 
# 3840
int4 tmp; 
# 3841
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3842
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3843
} 
#endif
# 3845 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3846
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3850
::exit(___);}
#if 0
# 3846
{ 
# 3847
int4 tmp; 
# 3848
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3849
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3850
} 
#endif
# 3852 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3853
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3857
::exit(___);}
#if 0
# 3853
{ 
# 3854
uint4 tmp; 
# 3855
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3856
(*retVal) = ((unsigned short)(tmp.x)); 
# 3857
} 
#endif
# 3859 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3860
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3864
::exit(___);}
#if 0
# 3860
{ 
# 3861
uint4 tmp; 
# 3862
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3863
(*retVal) = make_ushort1(tmp.x); 
# 3864
} 
#endif
# 3866 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3867
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3871
::exit(___);}
#if 0
# 3867
{ 
# 3868
uint4 tmp; 
# 3869
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3870
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3871
} 
#endif
# 3873 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3874
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3878
::exit(___);}
#if 0
# 3874
{ 
# 3875
uint4 tmp; 
# 3876
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3877
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3878
} 
#endif
# 3886 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3887
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3891
::exit(___);}
#if 0
# 3887
{ 
# 3888
int4 tmp; 
# 3889
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3890
(*retVal) = ((int)(tmp.x)); 
# 3891
} 
#endif
# 3893 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3894
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3898
::exit(___);}
#if 0
# 3894
{ 
# 3895
int4 tmp; 
# 3896
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3897
(*retVal) = make_int1(tmp.x); 
# 3898
} 
#endif
# 3900 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3901
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3905
::exit(___);}
#if 0
# 3901
{ 
# 3902
int4 tmp; 
# 3903
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3904
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3905
} 
#endif
# 3907 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3908
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3912
::exit(___);}
#if 0
# 3908
{ 
# 3909
int4 tmp; 
# 3910
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3911
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3912
} 
#endif
# 3914 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3915
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3919
::exit(___);}
#if 0
# 3915
{ 
# 3916
uint4 tmp; 
# 3917
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3918
(*retVal) = ((unsigned)(tmp.x)); 
# 3919
} 
#endif
# 3921 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3922
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3926
::exit(___);}
#if 0
# 3922
{ 
# 3923
uint4 tmp; 
# 3924
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3925
(*retVal) = make_uint1(tmp.x); 
# 3926
} 
#endif
# 3928 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3929
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3933
::exit(___);}
#if 0
# 3929
{ 
# 3930
uint4 tmp; 
# 3931
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3932
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3933
} 
#endif
# 3935 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3936
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3940
::exit(___);}
#if 0
# 3936
{ 
# 3937
uint4 tmp; 
# 3938
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 3939
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3940
} 
#endif
# 4015 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4020
::exit(___);}
#if 0
# 4016
{ 
# 4017
float4 tmp; 
# 4018
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4019
(*retVal) = ((float)(tmp.x)); 
# 4020
} 
#endif
# 4022 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4027
::exit(___);}
#if 0
# 4023
{ 
# 4024
float4 tmp; 
# 4025
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4026
(*retVal) = make_float1(tmp.x); 
# 4027
} 
#endif
# 4029 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4030
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4034
::exit(___);}
#if 0
# 4030
{ 
# 4031
float4 tmp; 
# 4032
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4033
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4034
} 
#endif
# 4036 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4037
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4041
::exit(___);}
#if 0
# 4037
{ 
# 4038
float4 tmp; 
# 4039
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4040
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4041
} 
#endif
# 4049 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4050
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4059
::exit(___);}
#if 0
# 4050
{ 
# 4055
int4 tmp; 
# 4056
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4058
(*retVal) = ((char)(tmp.x)); 
# 4059
} 
#endif
# 4060 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4061
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4065
::exit(___);}
#if 0
# 4061
{ 
# 4062
int4 tmp; 
# 4063
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4064
(*retVal) = ((signed char)(tmp.x)); 
# 4065
} 
#endif
# 4067 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4068
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4072
::exit(___);}
#if 0
# 4068
{ 
# 4069
int4 tmp; 
# 4070
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4071
(*retVal) = make_char1(tmp.x); 
# 4072
} 
#endif
# 4074 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4075
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4079
::exit(___);}
#if 0
# 4075
{ 
# 4076
int4 tmp; 
# 4077
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4078
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4079
} 
#endif
# 4081 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4082
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4086
::exit(___);}
#if 0
# 4082
{ 
# 4083
int4 tmp; 
# 4084
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4085
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4086
} 
#endif
# 4088 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4089
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4093
::exit(___);}
#if 0
# 4089
{ 
# 4090
uint4 tmp; 
# 4091
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4092
(*retVal) = ((unsigned char)(tmp.x)); 
# 4093
} 
#endif
# 4095 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4096
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4100
::exit(___);}
#if 0
# 4096
{ 
# 4097
uint4 tmp; 
# 4098
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4099
(*retVal) = make_uchar1(tmp.x); 
# 4100
} 
#endif
# 4102 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4103
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4107
::exit(___);}
#if 0
# 4103
{ 
# 4104
uint4 tmp; 
# 4105
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4106
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4107
} 
#endif
# 4109 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4110
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4114
::exit(___);}
#if 0
# 4110
{ 
# 4111
uint4 tmp; 
# 4112
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4113
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4114
} 
#endif
# 4122 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4123
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4127
::exit(___);}
#if 0
# 4123
{ 
# 4124
int4 tmp; 
# 4125
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4126
(*retVal) = ((short)(tmp.x)); 
# 4127
} 
#endif
# 4129 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4130
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4134
::exit(___);}
#if 0
# 4130
{ 
# 4131
int4 tmp; 
# 4132
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4133
(*retVal) = make_short1(tmp.x); 
# 4134
} 
#endif
# 4136 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4137
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4141
::exit(___);}
#if 0
# 4137
{ 
# 4138
int4 tmp; 
# 4139
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4140
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4141
} 
#endif
# 4143 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4144
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4148
::exit(___);}
#if 0
# 4144
{ 
# 4145
int4 tmp; 
# 4146
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4147
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4148
} 
#endif
# 4150 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4151
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4155
::exit(___);}
#if 0
# 4151
{ 
# 4152
uint4 tmp; 
# 4153
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4154
(*retVal) = ((unsigned short)(tmp.x)); 
# 4155
} 
#endif
# 4157 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4158
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4162
::exit(___);}
#if 0
# 4158
{ 
# 4159
uint4 tmp; 
# 4160
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4161
(*retVal) = make_ushort1(tmp.x); 
# 4162
} 
#endif
# 4164 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4165
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4169
::exit(___);}
#if 0
# 4165
{ 
# 4166
uint4 tmp; 
# 4167
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4168
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4169
} 
#endif
# 4171 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4172
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4176
::exit(___);}
#if 0
# 4172
{ 
# 4173
uint4 tmp; 
# 4174
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4175
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4176
} 
#endif
# 4184 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4185
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4189
::exit(___);}
#if 0
# 4185
{ 
# 4186
int4 tmp; 
# 4187
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4188
(*retVal) = ((int)(tmp.x)); 
# 4189
} 
#endif
# 4191 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4192
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4196
::exit(___);}
#if 0
# 4192
{ 
# 4193
int4 tmp; 
# 4194
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4195
(*retVal) = make_int1(tmp.x); 
# 4196
} 
#endif
# 4198 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4199
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4203
::exit(___);}
#if 0
# 4199
{ 
# 4200
int4 tmp; 
# 4201
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4202
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4203
} 
#endif
# 4205 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4206
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4210
::exit(___);}
#if 0
# 4206
{ 
# 4207
int4 tmp; 
# 4208
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4209
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4210
} 
#endif
# 4212 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4213
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4217
::exit(___);}
#if 0
# 4213
{ 
# 4214
uint4 tmp; 
# 4215
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4216
(*retVal) = ((unsigned)(tmp.x)); 
# 4217
} 
#endif
# 4219 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4220
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4224
::exit(___);}
#if 0
# 4220
{ 
# 4221
uint4 tmp; 
# 4222
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4223
(*retVal) = make_uint1(tmp.x); 
# 4224
} 
#endif
# 4226 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4227
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4231
::exit(___);}
#if 0
# 4227
{ 
# 4228
uint4 tmp; 
# 4229
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4230
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4231
} 
#endif
# 4233 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4238
::exit(___);}
#if 0
# 4234
{ 
# 4235
uint4 tmp; 
# 4236
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4237
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4238
} 
#endif
# 4313 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4314
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4318
::exit(___);}
#if 0
# 4314
{ 
# 4315
float4 tmp; 
# 4316
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4317
(*retVal) = ((float)(tmp.x)); 
# 4318
} 
#endif
# 4320 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4321
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4325
::exit(___);}
#if 0
# 4321
{ 
# 4322
float4 tmp; 
# 4323
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4324
(*retVal) = make_float1(tmp.x); 
# 4325
} 
#endif
# 4327 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4332
::exit(___);}
#if 0
# 4328
{ 
# 4329
float4 tmp; 
# 4330
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4331
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4332
} 
#endif
# 4334 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4339
::exit(___);}
#if 0
# 4335
{ 
# 4336
float4 tmp; 
# 4337
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4338
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4339
} 
#endif
# 4347 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4348
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4357
::exit(___);}
#if 0
# 4348
{ 
# 4353
int4 tmp; 
# 4354
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4356
(*retVal) = ((char)(tmp.x)); 
# 4357
} 
#endif
# 4358 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4359
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4363
::exit(___);}
#if 0
# 4359
{ 
# 4360
int4 tmp; 
# 4361
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4362
(*retVal) = ((signed char)(tmp.x)); 
# 4363
} 
#endif
# 4365 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4366
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4370
::exit(___);}
#if 0
# 4366
{ 
# 4367
int4 tmp; 
# 4368
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4369
(*retVal) = make_char1(tmp.x); 
# 4370
} 
#endif
# 4372 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4373
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4377
::exit(___);}
#if 0
# 4373
{ 
# 4374
int4 tmp; 
# 4375
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4376
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4377
} 
#endif
# 4379 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4380
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4384
::exit(___);}
#if 0
# 4380
{ 
# 4381
int4 tmp; 
# 4382
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4383
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4384
} 
#endif
# 4386 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4387
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4391
::exit(___);}
#if 0
# 4387
{ 
# 4388
uint4 tmp; 
# 4389
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4390
(*retVal) = ((unsigned char)(tmp.x)); 
# 4391
} 
#endif
# 4393 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4394
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4398
::exit(___);}
#if 0
# 4394
{ 
# 4395
uint4 tmp; 
# 4396
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4397
(*retVal) = make_uchar1(tmp.x); 
# 4398
} 
#endif
# 4400 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4401
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4405
::exit(___);}
#if 0
# 4401
{ 
# 4402
uint4 tmp; 
# 4403
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4404
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4405
} 
#endif
# 4407 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4408
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4412
::exit(___);}
#if 0
# 4408
{ 
# 4409
uint4 tmp; 
# 4410
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4411
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4412
} 
#endif
# 4420 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4421
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4425
::exit(___);}
#if 0
# 4421
{ 
# 4422
int4 tmp; 
# 4423
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4424
(*retVal) = ((short)(tmp.x)); 
# 4425
} 
#endif
# 4427 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4428
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4432
::exit(___);}
#if 0
# 4428
{ 
# 4429
int4 tmp; 
# 4430
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4431
(*retVal) = make_short1(tmp.x); 
# 4432
} 
#endif
# 4434 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4435
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4439
::exit(___);}
#if 0
# 4435
{ 
# 4436
int4 tmp; 
# 4437
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4438
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4439
} 
#endif
# 4441 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4442
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4446
::exit(___);}
#if 0
# 4442
{ 
# 4443
int4 tmp; 
# 4444
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4445
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4446
} 
#endif
# 4448 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4449
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4453
::exit(___);}
#if 0
# 4449
{ 
# 4450
uint4 tmp; 
# 4451
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4452
(*retVal) = ((unsigned short)(tmp.x)); 
# 4453
} 
#endif
# 4455 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4456
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4460
::exit(___);}
#if 0
# 4456
{ 
# 4457
uint4 tmp; 
# 4458
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4459
(*retVal) = make_ushort1(tmp.x); 
# 4460
} 
#endif
# 4462 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4463
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4467
::exit(___);}
#if 0
# 4463
{ 
# 4464
uint4 tmp; 
# 4465
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4466
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4467
} 
#endif
# 4469 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4470
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4474
::exit(___);}
#if 0
# 4470
{ 
# 4471
uint4 tmp; 
# 4472
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4473
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4474
} 
#endif
# 4482 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4483
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4487
::exit(___);}
#if 0
# 4483
{ 
# 4484
int4 tmp; 
# 4485
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4486
(*retVal) = ((int)(tmp.x)); 
# 4487
} 
#endif
# 4489 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4490
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4494
::exit(___);}
#if 0
# 4490
{ 
# 4491
int4 tmp; 
# 4492
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4493
(*retVal) = make_int1(tmp.x); 
# 4494
} 
#endif
# 4496 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4497
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4501
::exit(___);}
#if 0
# 4497
{ 
# 4498
int4 tmp; 
# 4499
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4500
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4501
} 
#endif
# 4503 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4504
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4508
::exit(___);}
#if 0
# 4504
{ 
# 4505
int4 tmp; 
# 4506
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4507
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4508
} 
#endif
# 4510 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4511
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4515
::exit(___);}
#if 0
# 4511
{ 
# 4512
uint4 tmp; 
# 4513
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4514
(*retVal) = ((unsigned)(tmp.x)); 
# 4515
} 
#endif
# 4517 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4518
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4522
::exit(___);}
#if 0
# 4518
{ 
# 4519
uint4 tmp; 
# 4520
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4521
(*retVal) = make_uint1(tmp.x); 
# 4522
} 
#endif
# 4524 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4525
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4529
::exit(___);}
#if 0
# 4525
{ 
# 4526
uint4 tmp; 
# 4527
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4528
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4529
} 
#endif
# 4531 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4536
::exit(___);}
#if 0
# 4532
{ 
# 4533
uint4 tmp; 
# 4534
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4535
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4536
} 
#endif
# 4611 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4612
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4616
::exit(___);}
#if 0
# 4612
{ 
# 4613
float4 tmp; 
# 4614
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4615
(*retVal) = ((float)(tmp.x)); 
# 4616
} 
#endif
# 4618 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4619
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4623
::exit(___);}
#if 0
# 4619
{ 
# 4620
float4 tmp; 
# 4621
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4622
(*retVal) = make_float1(tmp.x); 
# 4623
} 
#endif
# 4625 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4626
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4630
::exit(___);}
#if 0
# 4626
{ 
# 4627
float4 tmp; 
# 4628
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4629
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4630
} 
#endif
# 4632 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4633
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4637
::exit(___);}
#if 0
# 4633
{ 
# 4634
float4 tmp; 
# 4635
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4636
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4637
} 
#endif
# 4645 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4655
::exit(___);}
#if 0
# 4646
{ 
# 4651
int4 tmp; 
# 4652
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4654
(*retVal) = ((char)(tmp.x)); 
# 4655
} 
#endif
# 4656 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4657
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4661
::exit(___);}
#if 0
# 4657
{ 
# 4658
int4 tmp; 
# 4659
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4660
(*retVal) = ((signed char)(tmp.x)); 
# 4661
} 
#endif
# 4663 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4664
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4668
::exit(___);}
#if 0
# 4664
{ 
# 4665
int4 tmp; 
# 4666
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4667
(*retVal) = make_char1(tmp.x); 
# 4668
} 
#endif
# 4670 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4671
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4675
::exit(___);}
#if 0
# 4671
{ 
# 4672
int4 tmp; 
# 4673
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4674
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4675
} 
#endif
# 4677 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4678
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4682
::exit(___);}
#if 0
# 4678
{ 
# 4679
int4 tmp; 
# 4680
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4681
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4682
} 
#endif
# 4684 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4685
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4689
::exit(___);}
#if 0
# 4685
{ 
# 4686
uint4 tmp; 
# 4687
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4688
(*retVal) = ((unsigned char)(tmp.x)); 
# 4689
} 
#endif
# 4691 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4692
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4696
::exit(___);}
#if 0
# 4692
{ 
# 4693
uint4 tmp; 
# 4694
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4695
(*retVal) = make_uchar1(tmp.x); 
# 4696
} 
#endif
# 4698 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4699
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4703
::exit(___);}
#if 0
# 4699
{ 
# 4700
uint4 tmp; 
# 4701
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4702
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4703
} 
#endif
# 4705 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4706
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4710
::exit(___);}
#if 0
# 4706
{ 
# 4707
uint4 tmp; 
# 4708
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4709
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4710
} 
#endif
# 4718 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4719
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4723
::exit(___);}
#if 0
# 4719
{ 
# 4720
int4 tmp; 
# 4721
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4722
(*retVal) = ((short)(tmp.x)); 
# 4723
} 
#endif
# 4725 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4726
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4730
::exit(___);}
#if 0
# 4726
{ 
# 4727
int4 tmp; 
# 4728
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4729
(*retVal) = make_short1(tmp.x); 
# 4730
} 
#endif
# 4732 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4733
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4737
::exit(___);}
#if 0
# 4733
{ 
# 4734
int4 tmp; 
# 4735
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4736
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4737
} 
#endif
# 4739 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4740
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4744
::exit(___);}
#if 0
# 4740
{ 
# 4741
int4 tmp; 
# 4742
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4743
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4744
} 
#endif
# 4746 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4747
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4751
::exit(___);}
#if 0
# 4747
{ 
# 4748
uint4 tmp; 
# 4749
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4750
(*retVal) = ((unsigned short)(tmp.x)); 
# 4751
} 
#endif
# 4753 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4754
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4758
::exit(___);}
#if 0
# 4754
{ 
# 4755
uint4 tmp; 
# 4756
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4757
(*retVal) = make_ushort1(tmp.x); 
# 4758
} 
#endif
# 4760 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4761
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4765
::exit(___);}
#if 0
# 4761
{ 
# 4762
uint4 tmp; 
# 4763
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4764
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4765
} 
#endif
# 4767 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4768
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4772
::exit(___);}
#if 0
# 4768
{ 
# 4769
uint4 tmp; 
# 4770
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4771
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4772
} 
#endif
# 4780 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4781
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4785
::exit(___);}
#if 0
# 4781
{ 
# 4782
int4 tmp; 
# 4783
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4784
(*retVal) = ((int)(tmp.x)); 
# 4785
} 
#endif
# 4787 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4788
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4792
::exit(___);}
#if 0
# 4788
{ 
# 4789
int4 tmp; 
# 4790
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4791
(*retVal) = make_int1(tmp.x); 
# 4792
} 
#endif
# 4794 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4795
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4799
::exit(___);}
#if 0
# 4795
{ 
# 4796
int4 tmp; 
# 4797
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4798
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4799
} 
#endif
# 4801 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4802
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4806
::exit(___);}
#if 0
# 4802
{ 
# 4803
int4 tmp; 
# 4804
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4805
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4806
} 
#endif
# 4808 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4809
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4813
::exit(___);}
#if 0
# 4809
{ 
# 4810
uint4 tmp; 
# 4811
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4812
(*retVal) = ((unsigned)(tmp.x)); 
# 4813
} 
#endif
# 4815 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4816
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4820
::exit(___);}
#if 0
# 4816
{ 
# 4817
uint4 tmp; 
# 4818
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4819
(*retVal) = make_uint1(tmp.x); 
# 4820
} 
#endif
# 4822 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4823
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4827
::exit(___);}
#if 0
# 4823
{ 
# 4824
uint4 tmp; 
# 4825
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4826
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4827
} 
#endif
# 4829 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4830
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4834
::exit(___);}
#if 0
# 4830
{ 
# 4831
uint4 tmp; 
# 4832
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4833
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4834
} 
#endif
# 4909 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4910
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4914
::exit(___);}
#if 0
# 4910
{ 
# 4911
float4 tmp; 
# 4912
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4913
(*retVal) = ((float)(tmp.x)); 
# 4914
} 
#endif
# 4916 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4917
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4921
::exit(___);}
#if 0
# 4917
{ 
# 4918
float4 tmp; 
# 4919
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4920
(*retVal) = make_float1(tmp.x); 
# 4921
} 
#endif
# 4923 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4924
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4928
::exit(___);}
#if 0
# 4924
{ 
# 4925
float4 tmp; 
# 4926
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4927
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4928
} 
#endif
# 4930 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4931
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4935
::exit(___);}
#if 0
# 4931
{ 
# 4932
float4 tmp; 
# 4933
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4934
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4935
} 
#endif
# 4943 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4944
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4953
::exit(___);}
#if 0
# 4944
{ 
# 4949
int4 tmp; 
# 4950
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4952
(*retVal) = ((char)(tmp.x)); 
# 4953
} 
#endif
# 4954 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4955
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4959
::exit(___);}
#if 0
# 4955
{ 
# 4956
int4 tmp; 
# 4957
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4958
(*retVal) = ((signed char)(tmp.x)); 
# 4959
} 
#endif
# 4961 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4962
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4966
::exit(___);}
#if 0
# 4962
{ 
# 4963
int4 tmp; 
# 4964
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4965
(*retVal) = make_char1(tmp.x); 
# 4966
} 
#endif
# 4968 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4969
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4973
::exit(___);}
#if 0
# 4969
{ 
# 4970
int4 tmp; 
# 4971
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4972
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4973
} 
#endif
# 4975 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4976
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4980
::exit(___);}
#if 0
# 4976
{ 
# 4977
int4 tmp; 
# 4978
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4979
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4980
} 
#endif
# 4982 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4983
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4987
::exit(___);}
#if 0
# 4983
{ 
# 4984
uint4 tmp; 
# 4985
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4986
(*retVal) = ((unsigned char)(tmp.x)); 
# 4987
} 
#endif
# 4989 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4990
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 4994
::exit(___);}
#if 0
# 4990
{ 
# 4991
uint4 tmp; 
# 4992
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 4993
(*retVal) = make_uchar1(tmp.x); 
# 4994
} 
#endif
# 4996 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 4997
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5001
::exit(___);}
#if 0
# 4997
{ 
# 4998
uint4 tmp; 
# 4999
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5000
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5001
} 
#endif
# 5003 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5004
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5008
::exit(___);}
#if 0
# 5004
{ 
# 5005
uint4 tmp; 
# 5006
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5007
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5008
} 
#endif
# 5016 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5017
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5021
::exit(___);}
#if 0
# 5017
{ 
# 5018
int4 tmp; 
# 5019
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5020
(*retVal) = ((short)(tmp.x)); 
# 5021
} 
#endif
# 5023 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5024
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5028
::exit(___);}
#if 0
# 5024
{ 
# 5025
int4 tmp; 
# 5026
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5027
(*retVal) = make_short1(tmp.x); 
# 5028
} 
#endif
# 5030 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5031
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5035
::exit(___);}
#if 0
# 5031
{ 
# 5032
int4 tmp; 
# 5033
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5034
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5035
} 
#endif
# 5037 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5038
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5042
::exit(___);}
#if 0
# 5038
{ 
# 5039
int4 tmp; 
# 5040
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5041
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5042
} 
#endif
# 5044 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5045
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5049
::exit(___);}
#if 0
# 5045
{ 
# 5046
uint4 tmp; 
# 5047
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5048
(*retVal) = ((unsigned short)(tmp.x)); 
# 5049
} 
#endif
# 5051 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5052
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5056
::exit(___);}
#if 0
# 5052
{ 
# 5053
uint4 tmp; 
# 5054
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5055
(*retVal) = make_ushort1(tmp.x); 
# 5056
} 
#endif
# 5058 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5059
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5063
::exit(___);}
#if 0
# 5059
{ 
# 5060
uint4 tmp; 
# 5061
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5062
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5063
} 
#endif
# 5065 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5066
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5070
::exit(___);}
#if 0
# 5066
{ 
# 5067
uint4 tmp; 
# 5068
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5069
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5070
} 
#endif
# 5078 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5079
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5083
::exit(___);}
#if 0
# 5079
{ 
# 5080
int4 tmp; 
# 5081
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5082
(*retVal) = ((int)(tmp.x)); 
# 5083
} 
#endif
# 5085 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5086
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5090
::exit(___);}
#if 0
# 5086
{ 
# 5087
int4 tmp; 
# 5088
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5089
(*retVal) = make_int1(tmp.x); 
# 5090
} 
#endif
# 5092 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5093
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5097
::exit(___);}
#if 0
# 5093
{ 
# 5094
int4 tmp; 
# 5095
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5096
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5097
} 
#endif
# 5099 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5100
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5104
::exit(___);}
#if 0
# 5100
{ 
# 5101
int4 tmp; 
# 5102
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5103
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5104
} 
#endif
# 5106 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5107
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5111
::exit(___);}
#if 0
# 5107
{ 
# 5108
uint4 tmp; 
# 5109
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5110
(*retVal) = ((unsigned)(tmp.x)); 
# 5111
} 
#endif
# 5113 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5114
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5118
::exit(___);}
#if 0
# 5114
{ 
# 5115
uint4 tmp; 
# 5116
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5117
(*retVal) = make_uint1(tmp.x); 
# 5118
} 
#endif
# 5120 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5121
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5125
::exit(___);}
#if 0
# 5121
{ 
# 5122
uint4 tmp; 
# 5123
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5124
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5125
} 
#endif
# 5127 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5128
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5132
::exit(___);}
#if 0
# 5128
{ 
# 5129
uint4 tmp; 
# 5130
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5131
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5132
} 
#endif
# 5207 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5208
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5212
::exit(___);}
#if 0
# 5208
{ 
# 5209
float4 tmp; 
# 5210
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5211
(*retVal) = ((float)(tmp.x)); 
# 5212
} 
#endif
# 5214 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5215
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5219
::exit(___);}
#if 0
# 5215
{ 
# 5216
float4 tmp; 
# 5217
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5218
(*retVal) = make_float1(tmp.x); 
# 5219
} 
#endif
# 5221 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5222
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5226
::exit(___);}
#if 0
# 5222
{ 
# 5223
float4 tmp; 
# 5224
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5225
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5226
} 
#endif
# 5228 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5229
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5233
::exit(___);}
#if 0
# 5229
{ 
# 5230
float4 tmp; 
# 5231
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5232
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5233
} 
#endif
# 5241 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5242
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5251
::exit(___);}
#if 0
# 5242
{ 
# 5247
int4 tmp; 
# 5248
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5250
(*retVal) = ((char)(tmp.x)); 
# 5251
} 
#endif
# 5252 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5253
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5257
::exit(___);}
#if 0
# 5253
{ 
# 5254
int4 tmp; 
# 5255
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5256
(*retVal) = ((signed char)(tmp.x)); 
# 5257
} 
#endif
# 5259 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5260
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5264
::exit(___);}
#if 0
# 5260
{ 
# 5261
int4 tmp; 
# 5262
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5263
(*retVal) = make_char1(tmp.x); 
# 5264
} 
#endif
# 5266 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5267
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5271
::exit(___);}
#if 0
# 5267
{ 
# 5268
int4 tmp; 
# 5269
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5270
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5271
} 
#endif
# 5273 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5274
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5278
::exit(___);}
#if 0
# 5274
{ 
# 5275
int4 tmp; 
# 5276
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5277
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5278
} 
#endif
# 5280 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5281
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5285
::exit(___);}
#if 0
# 5281
{ 
# 5282
uint4 tmp; 
# 5283
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5284
(*retVal) = ((unsigned char)(tmp.x)); 
# 5285
} 
#endif
# 5287 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5288
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5292
::exit(___);}
#if 0
# 5288
{ 
# 5289
uint4 tmp; 
# 5290
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5291
(*retVal) = make_uchar1(tmp.x); 
# 5292
} 
#endif
# 5294 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5295
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5299
::exit(___);}
#if 0
# 5295
{ 
# 5296
uint4 tmp; 
# 5297
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5298
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5299
} 
#endif
# 5301 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5302
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5306
::exit(___);}
#if 0
# 5302
{ 
# 5303
uint4 tmp; 
# 5304
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5305
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5306
} 
#endif
# 5314 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5315
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5319
::exit(___);}
#if 0
# 5315
{ 
# 5316
int4 tmp; 
# 5317
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5318
(*retVal) = ((short)(tmp.x)); 
# 5319
} 
#endif
# 5321 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5322
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5326
::exit(___);}
#if 0
# 5322
{ 
# 5323
int4 tmp; 
# 5324
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5325
(*retVal) = make_short1(tmp.x); 
# 5326
} 
#endif
# 5328 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5329
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5333
::exit(___);}
#if 0
# 5329
{ 
# 5330
int4 tmp; 
# 5331
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5332
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5333
} 
#endif
# 5335 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5336
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5340
::exit(___);}
#if 0
# 5336
{ 
# 5337
int4 tmp; 
# 5338
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5339
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5340
} 
#endif
# 5342 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5343
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5347
::exit(___);}
#if 0
# 5343
{ 
# 5344
uint4 tmp; 
# 5345
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5346
(*retVal) = ((unsigned short)(tmp.x)); 
# 5347
} 
#endif
# 5349 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5350
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5354
::exit(___);}
#if 0
# 5350
{ 
# 5351
uint4 tmp; 
# 5352
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5353
(*retVal) = make_ushort1(tmp.x); 
# 5354
} 
#endif
# 5356 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5357
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5361
::exit(___);}
#if 0
# 5357
{ 
# 5358
uint4 tmp; 
# 5359
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5360
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5361
} 
#endif
# 5363 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5364
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5368
::exit(___);}
#if 0
# 5364
{ 
# 5365
uint4 tmp; 
# 5366
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5367
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5368
} 
#endif
# 5376 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5377
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5381
::exit(___);}
#if 0
# 5377
{ 
# 5378
int4 tmp; 
# 5379
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5380
(*retVal) = ((int)(tmp.x)); 
# 5381
} 
#endif
# 5383 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5384
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5388
::exit(___);}
#if 0
# 5384
{ 
# 5385
int4 tmp; 
# 5386
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5387
(*retVal) = make_int1(tmp.x); 
# 5388
} 
#endif
# 5390 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5391
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5395
::exit(___);}
#if 0
# 5391
{ 
# 5392
int4 tmp; 
# 5393
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5394
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5395
} 
#endif
# 5397 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5398
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5402
::exit(___);}
#if 0
# 5398
{ 
# 5399
int4 tmp; 
# 5400
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5401
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5402
} 
#endif
# 5404 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5405
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5409
::exit(___);}
#if 0
# 5405
{ 
# 5406
uint4 tmp; 
# 5407
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5408
(*retVal) = ((unsigned)(tmp.x)); 
# 5409
} 
#endif
# 5411 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5412
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5416
::exit(___);}
#if 0
# 5412
{ 
# 5413
uint4 tmp; 
# 5414
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5415
(*retVal) = make_uint1(tmp.x); 
# 5416
} 
#endif
# 5418 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5419
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5423
::exit(___);}
#if 0
# 5419
{ 
# 5420
uint4 tmp; 
# 5421
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5422
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5423
} 
#endif
# 5425 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5426
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5430
::exit(___);}
#if 0
# 5426
{ 
# 5427
uint4 tmp; 
# 5428
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5429
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5430
} 
#endif
# 5505 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5506
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5510
::exit(___);}
#if 0
# 5506
{ 
# 5507
float4 tmp; 
# 5508
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5509
(*retVal) = ((float)(tmp.x)); 
# 5510
} 
#endif
# 5512 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5513
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5517
::exit(___);}
#if 0
# 5513
{ 
# 5514
float4 tmp; 
# 5515
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5516
(*retVal) = make_float1(tmp.x); 
# 5517
} 
#endif
# 5519 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5520
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5524
::exit(___);}
#if 0
# 5520
{ 
# 5521
float4 tmp; 
# 5522
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5523
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5524
} 
#endif
# 5526 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5527
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5531
::exit(___);}
#if 0
# 5527
{ 
# 5528
float4 tmp; 
# 5529
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5530
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5531
} 
#endif
# 5539 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5540
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5549
::exit(___);}
#if 0
# 5540
{ 
# 5545
int4 tmp; 
# 5546
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5548
(*retVal) = ((char)(tmp.x)); 
# 5549
} 
#endif
# 5550 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5551
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5555
::exit(___);}
#if 0
# 5551
{ 
# 5552
int4 tmp; 
# 5553
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5554
(*retVal) = ((signed char)(tmp.x)); 
# 5555
} 
#endif
# 5557 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5558
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5562
::exit(___);}
#if 0
# 5558
{ 
# 5559
int4 tmp; 
# 5560
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5561
(*retVal) = make_char1(tmp.x); 
# 5562
} 
#endif
# 5564 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5565
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5569
::exit(___);}
#if 0
# 5565
{ 
# 5566
int4 tmp; 
# 5567
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5568
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5569
} 
#endif
# 5571 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5572
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5576
::exit(___);}
#if 0
# 5572
{ 
# 5573
int4 tmp; 
# 5574
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5575
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5576
} 
#endif
# 5578 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5579
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5583
::exit(___);}
#if 0
# 5579
{ 
# 5580
uint4 tmp; 
# 5581
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5582
(*retVal) = ((unsigned char)(tmp.x)); 
# 5583
} 
#endif
# 5585 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5586
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5590
::exit(___);}
#if 0
# 5586
{ 
# 5587
uint4 tmp; 
# 5588
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5589
(*retVal) = make_uchar1(tmp.x); 
# 5590
} 
#endif
# 5592 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5593
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5597
::exit(___);}
#if 0
# 5593
{ 
# 5594
uint4 tmp; 
# 5595
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5596
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5597
} 
#endif
# 5599 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5600
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5604
::exit(___);}
#if 0
# 5600
{ 
# 5601
uint4 tmp; 
# 5602
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5603
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5604
} 
#endif
# 5612 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5613
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5617
::exit(___);}
#if 0
# 5613
{ 
# 5614
int4 tmp; 
# 5615
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5616
(*retVal) = ((short)(tmp.x)); 
# 5617
} 
#endif
# 5619 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5620
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5624
::exit(___);}
#if 0
# 5620
{ 
# 5621
int4 tmp; 
# 5622
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5623
(*retVal) = make_short1(tmp.x); 
# 5624
} 
#endif
# 5626 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5627
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5631
::exit(___);}
#if 0
# 5627
{ 
# 5628
int4 tmp; 
# 5629
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5630
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5631
} 
#endif
# 5633 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5634
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5638
::exit(___);}
#if 0
# 5634
{ 
# 5635
int4 tmp; 
# 5636
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5637
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5638
} 
#endif
# 5640 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5641
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5645
::exit(___);}
#if 0
# 5641
{ 
# 5642
uint4 tmp; 
# 5643
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5644
(*retVal) = ((unsigned short)(tmp.x)); 
# 5645
} 
#endif
# 5647 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5648
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5652
::exit(___);}
#if 0
# 5648
{ 
# 5649
uint4 tmp; 
# 5650
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5651
(*retVal) = make_ushort1(tmp.x); 
# 5652
} 
#endif
# 5654 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5655
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5659
::exit(___);}
#if 0
# 5655
{ 
# 5656
uint4 tmp; 
# 5657
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5658
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5659
} 
#endif
# 5661 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5662
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5666
::exit(___);}
#if 0
# 5662
{ 
# 5663
uint4 tmp; 
# 5664
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5665
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5666
} 
#endif
# 5674 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5675
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5679
::exit(___);}
#if 0
# 5675
{ 
# 5676
int4 tmp; 
# 5677
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5678
(*retVal) = ((int)(tmp.x)); 
# 5679
} 
#endif
# 5681 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5686
::exit(___);}
#if 0
# 5682
{ 
# 5683
int4 tmp; 
# 5684
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5685
(*retVal) = make_int1(tmp.x); 
# 5686
} 
#endif
# 5688 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5689
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5693
::exit(___);}
#if 0
# 5689
{ 
# 5690
int4 tmp; 
# 5691
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5692
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5693
} 
#endif
# 5695 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5696
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5700
::exit(___);}
#if 0
# 5696
{ 
# 5697
int4 tmp; 
# 5698
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5699
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5700
} 
#endif
# 5702 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5703
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5707
::exit(___);}
#if 0
# 5703
{ 
# 5704
uint4 tmp; 
# 5705
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5706
(*retVal) = ((unsigned)(tmp.x)); 
# 5707
} 
#endif
# 5709 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5710
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5714
::exit(___);}
#if 0
# 5710
{ 
# 5711
uint4 tmp; 
# 5712
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5713
(*retVal) = make_uint1(tmp.x); 
# 5714
} 
#endif
# 5716 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5717
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5721
::exit(___);}
#if 0
# 5717
{ 
# 5718
uint4 tmp; 
# 5719
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5720
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5721
} 
#endif
# 5723 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5724
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5728
::exit(___);}
#if 0
# 5724
{ 
# 5725
uint4 tmp; 
# 5726
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5727
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5728
} 
#endif
# 5803 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5804
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5808
::exit(___);}
#if 0
# 5804
{ 
# 5805
float4 tmp; 
# 5806
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5807
(*retVal) = ((float)(tmp.x)); 
# 5808
} 
#endif
# 5810 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5811
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5815
::exit(___);}
#if 0
# 5811
{ 
# 5812
float4 tmp; 
# 5813
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5814
(*retVal) = make_float1(tmp.x); 
# 5815
} 
#endif
# 5817 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5818
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5822
::exit(___);}
#if 0
# 5818
{ 
# 5819
float4 tmp; 
# 5820
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5821
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5822
} 
#endif
# 5824 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5825
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5829
::exit(___);}
#if 0
# 5825
{ 
# 5826
float4 tmp; 
# 5827
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5828
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5829
} 
#endif
# 5837 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5838
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5847
::exit(___);}
#if 0
# 5838
{ 
# 5843
int4 tmp; 
# 5844
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5846
(*retVal) = ((char)(tmp.x)); 
# 5847
} 
#endif
# 5848 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5849
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5853
::exit(___);}
#if 0
# 5849
{ 
# 5850
int4 tmp; 
# 5851
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5852
(*retVal) = ((signed char)(tmp.x)); 
# 5853
} 
#endif
# 5855 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5856
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5860
::exit(___);}
#if 0
# 5856
{ 
# 5857
int4 tmp; 
# 5858
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5859
(*retVal) = make_char1(tmp.x); 
# 5860
} 
#endif
# 5862 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5863
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5867
::exit(___);}
#if 0
# 5863
{ 
# 5864
int4 tmp; 
# 5865
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5866
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5867
} 
#endif
# 5869 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5870
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5874
::exit(___);}
#if 0
# 5870
{ 
# 5871
int4 tmp; 
# 5872
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5873
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5874
} 
#endif
# 5876 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5877
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5881
::exit(___);}
#if 0
# 5877
{ 
# 5878
uint4 tmp; 
# 5879
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5880
(*retVal) = ((unsigned char)(tmp.x)); 
# 5881
} 
#endif
# 5883 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5884
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5888
::exit(___);}
#if 0
# 5884
{ 
# 5885
uint4 tmp; 
# 5886
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5887
(*retVal) = make_uchar1(tmp.x); 
# 5888
} 
#endif
# 5890 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5891
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5895
::exit(___);}
#if 0
# 5891
{ 
# 5892
uint4 tmp; 
# 5893
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5894
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5895
} 
#endif
# 5897 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5898
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5902
::exit(___);}
#if 0
# 5898
{ 
# 5899
uint4 tmp; 
# 5900
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5901
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5902
} 
#endif
# 5910 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5911
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5915
::exit(___);}
#if 0
# 5911
{ 
# 5912
int4 tmp; 
# 5913
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5914
(*retVal) = ((short)(tmp.x)); 
# 5915
} 
#endif
# 5917 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5918
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5922
::exit(___);}
#if 0
# 5918
{ 
# 5919
int4 tmp; 
# 5920
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5921
(*retVal) = make_short1(tmp.x); 
# 5922
} 
#endif
# 5924 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5925
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5929
::exit(___);}
#if 0
# 5925
{ 
# 5926
int4 tmp; 
# 5927
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5928
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5929
} 
#endif
# 5931 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5932
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5936
::exit(___);}
#if 0
# 5932
{ 
# 5933
int4 tmp; 
# 5934
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5935
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5936
} 
#endif
# 5938 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5939
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5943
::exit(___);}
#if 0
# 5939
{ 
# 5940
uint4 tmp; 
# 5941
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5942
(*retVal) = ((unsigned short)(tmp.x)); 
# 5943
} 
#endif
# 5945 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5946
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5950
::exit(___);}
#if 0
# 5946
{ 
# 5947
uint4 tmp; 
# 5948
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5949
(*retVal) = make_ushort1(tmp.x); 
# 5950
} 
#endif
# 5952 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5953
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5957
::exit(___);}
#if 0
# 5953
{ 
# 5954
uint4 tmp; 
# 5955
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5956
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5957
} 
#endif
# 5959 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5960
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5964
::exit(___);}
#if 0
# 5960
{ 
# 5961
uint4 tmp; 
# 5962
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5963
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5964
} 
#endif
# 5972 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5973
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5977
::exit(___);}
#if 0
# 5973
{ 
# 5974
int4 tmp; 
# 5975
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5976
(*retVal) = ((int)(tmp.x)); 
# 5977
} 
#endif
# 5979 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5980
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5984
::exit(___);}
#if 0
# 5980
{ 
# 5981
int4 tmp; 
# 5982
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5983
(*retVal) = make_int1(tmp.x); 
# 5984
} 
#endif
# 5986 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5987
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5991
::exit(___);}
#if 0
# 5987
{ 
# 5988
int4 tmp; 
# 5989
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5990
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5991
} 
#endif
# 5993 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 5994
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 5998
::exit(___);}
#if 0
# 5994
{ 
# 5995
int4 tmp; 
# 5996
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 5997
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5998
} 
#endif
# 6000 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6001
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6005
::exit(___);}
#if 0
# 6001
{ 
# 6002
uint4 tmp; 
# 6003
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6004
(*retVal) = ((unsigned)(tmp.x)); 
# 6005
} 
#endif
# 6007 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6008
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6012
::exit(___);}
#if 0
# 6008
{ 
# 6009
uint4 tmp; 
# 6010
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6011
(*retVal) = make_uint1(tmp.x); 
# 6012
} 
#endif
# 6014 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6015
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6019
::exit(___);}
#if 0
# 6015
{ 
# 6016
uint4 tmp; 
# 6017
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6018
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6019
} 
#endif
# 6021 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6022
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6026
::exit(___);}
#if 0
# 6022
{ 
# 6023
uint4 tmp; 
# 6024
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6025
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6026
} 
#endif
# 6101 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6102
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6106
::exit(___);}
#if 0
# 6102
{ 
# 6103
float4 tmp; 
# 6104
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6105
(*retVal) = ((float)(tmp.x)); 
# 6106
} 
#endif
# 6108 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6109
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6113
::exit(___);}
#if 0
# 6109
{ 
# 6110
float4 tmp; 
# 6111
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6112
(*retVal) = make_float1(tmp.x); 
# 6113
} 
#endif
# 6115 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6116
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6120
::exit(___);}
#if 0
# 6116
{ 
# 6117
float4 tmp; 
# 6118
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6119
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6120
} 
#endif
# 6122 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6123
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6127
::exit(___);}
#if 0
# 6123
{ 
# 6124
float4 tmp; 
# 6125
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6126
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6127
} 
#endif
# 6135 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6136
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6145
::exit(___);}
#if 0
# 6136
{ 
# 6141
int4 tmp; 
# 6142
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6144
(*retVal) = ((char)(tmp.x)); 
# 6145
} 
#endif
# 6146 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6147
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6151
::exit(___);}
#if 0
# 6147
{ 
# 6148
int4 tmp; 
# 6149
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6150
(*retVal) = ((signed char)(tmp.x)); 
# 6151
} 
#endif
# 6153 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6154
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6158
::exit(___);}
#if 0
# 6154
{ 
# 6155
int4 tmp; 
# 6156
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6157
(*retVal) = make_char1(tmp.x); 
# 6158
} 
#endif
# 6160 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6161
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6165
::exit(___);}
#if 0
# 6161
{ 
# 6162
int4 tmp; 
# 6163
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6164
(*retVal) = make_char2(tmp.x, tmp.y); 
# 6165
} 
#endif
# 6167 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6168
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6172
::exit(___);}
#if 0
# 6168
{ 
# 6169
int4 tmp; 
# 6170
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6171
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6172
} 
#endif
# 6174 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6175
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6179
::exit(___);}
#if 0
# 6175
{ 
# 6176
uint4 tmp; 
# 6177
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6178
(*retVal) = ((unsigned char)(tmp.x)); 
# 6179
} 
#endif
# 6181 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6182
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6186
::exit(___);}
#if 0
# 6182
{ 
# 6183
uint4 tmp; 
# 6184
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6185
(*retVal) = make_uchar1(tmp.x); 
# 6186
} 
#endif
# 6188 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6189
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6193
::exit(___);}
#if 0
# 6189
{ 
# 6190
uint4 tmp; 
# 6191
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6192
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 6193
} 
#endif
# 6195 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6196
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6200
::exit(___);}
#if 0
# 6196
{ 
# 6197
uint4 tmp; 
# 6198
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6199
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6200
} 
#endif
# 6208 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6209
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6213
::exit(___);}
#if 0
# 6209
{ 
# 6210
int4 tmp; 
# 6211
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6212
(*retVal) = ((short)(tmp.x)); 
# 6213
} 
#endif
# 6215 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6216
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6220
::exit(___);}
#if 0
# 6216
{ 
# 6217
int4 tmp; 
# 6218
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6219
(*retVal) = make_short1(tmp.x); 
# 6220
} 
#endif
# 6222 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6223
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6227
::exit(___);}
#if 0
# 6223
{ 
# 6224
int4 tmp; 
# 6225
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6226
(*retVal) = make_short2(tmp.x, tmp.y); 
# 6227
} 
#endif
# 6229 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6230
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6234
::exit(___);}
#if 0
# 6230
{ 
# 6231
int4 tmp; 
# 6232
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6233
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6234
} 
#endif
# 6236 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6237
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6241
::exit(___);}
#if 0
# 6237
{ 
# 6238
uint4 tmp; 
# 6239
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6240
(*retVal) = ((unsigned short)(tmp.x)); 
# 6241
} 
#endif
# 6243 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6244
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6248
::exit(___);}
#if 0
# 6244
{ 
# 6245
uint4 tmp; 
# 6246
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6247
(*retVal) = make_ushort1(tmp.x); 
# 6248
} 
#endif
# 6250 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6251
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6255
::exit(___);}
#if 0
# 6251
{ 
# 6252
uint4 tmp; 
# 6253
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6254
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 6255
} 
#endif
# 6257 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6258
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6262
::exit(___);}
#if 0
# 6258
{ 
# 6259
uint4 tmp; 
# 6260
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6261
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6262
} 
#endif
# 6270 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6275
::exit(___);}
#if 0
# 6271
{ 
# 6272
int4 tmp; 
# 6273
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6274
(*retVal) = ((int)(tmp.x)); 
# 6275
} 
#endif
# 6277 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6278
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6282
::exit(___);}
#if 0
# 6278
{ 
# 6279
int4 tmp; 
# 6280
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6281
(*retVal) = make_int1(tmp.x); 
# 6282
} 
#endif
# 6284 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6285
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6289
::exit(___);}
#if 0
# 6285
{ 
# 6286
int4 tmp; 
# 6287
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6288
(*retVal) = make_int2(tmp.x, tmp.y); 
# 6289
} 
#endif
# 6291 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6292
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6296
::exit(___);}
#if 0
# 6292
{ 
# 6293
int4 tmp; 
# 6294
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6295
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6296
} 
#endif
# 6298 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6299
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6303
::exit(___);}
#if 0
# 6299
{ 
# 6300
uint4 tmp; 
# 6301
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6302
(*retVal) = ((unsigned)(tmp.x)); 
# 6303
} 
#endif
# 6305 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6306
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6310
::exit(___);}
#if 0
# 6306
{ 
# 6307
uint4 tmp; 
# 6308
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6309
(*retVal) = make_uint1(tmp.x); 
# 6310
} 
#endif
# 6312 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6313
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6317
::exit(___);}
#if 0
# 6313
{ 
# 6314
uint4 tmp; 
# 6315
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6316
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6317
} 
#endif
# 6319 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6320
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6324
::exit(___);}
#if 0
# 6320
{ 
# 6321
uint4 tmp; 
# 6322
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6323
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6324
} 
#endif
# 6399 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6400
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6404
::exit(___);}
#if 0
# 6400
{ 
# 6401
float4 tmp; 
# 6402
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6403
(*retVal) = ((float)(tmp.x)); 
# 6404
} 
#endif
# 6406 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6407
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6411
::exit(___);}
#if 0
# 6407
{ 
# 6408
float4 tmp; 
# 6409
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6410
(*retVal) = make_float1(tmp.x); 
# 6411
} 
#endif
# 6413 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6414
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6418
::exit(___);}
#if 0
# 6414
{ 
# 6415
float4 tmp; 
# 6416
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6417
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6418
} 
#endif
# 6420 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6421
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6425
::exit(___);}
#if 0
# 6421
{ 
# 6422
float4 tmp; 
# 6423
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6424
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6425
} 
#endif
# 6433 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6443
::exit(___);}
#if 0
# 6434
{ 
# 6439
int4 tmp; 
# 6440
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6442
(*retVal) = ((char)(tmp.x)); 
# 6443
} 
#endif
# 6444 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6445
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6449
::exit(___);}
#if 0
# 6445
{ 
# 6446
int4 tmp; 
# 6447
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6448
(*retVal) = ((signed char)(tmp.x)); 
# 6449
} 
#endif
# 6451 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6452
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6456
::exit(___);}
#if 0
# 6452
{ 
# 6453
int4 tmp; 
# 6454
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6455
(*retVal) = make_char1(tmp.x); 
# 6456
} 
#endif
# 6458 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6459
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6463
::exit(___);}
#if 0
# 6459
{ 
# 6460
int4 tmp; 
# 6461
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6462
(*retVal) = make_char2(tmp.x, tmp.y); 
# 6463
} 
#endif
# 6465 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6466
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6470
::exit(___);}
#if 0
# 6466
{ 
# 6467
int4 tmp; 
# 6468
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6469
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6470
} 
#endif
# 6472 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6473
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6477
::exit(___);}
#if 0
# 6473
{ 
# 6474
uint4 tmp; 
# 6475
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6476
(*retVal) = ((unsigned char)(tmp.x)); 
# 6477
} 
#endif
# 6479 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6480
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6484
::exit(___);}
#if 0
# 6480
{ 
# 6481
uint4 tmp; 
# 6482
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6483
(*retVal) = make_uchar1(tmp.x); 
# 6484
} 
#endif
# 6486 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6487
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6491
::exit(___);}
#if 0
# 6487
{ 
# 6488
uint4 tmp; 
# 6489
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6490
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 6491
} 
#endif
# 6493 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6494
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6498
::exit(___);}
#if 0
# 6494
{ 
# 6495
uint4 tmp; 
# 6496
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6497
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6498
} 
#endif
# 6506 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6507
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6511
::exit(___);}
#if 0
# 6507
{ 
# 6508
int4 tmp; 
# 6509
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6510
(*retVal) = ((short)(tmp.x)); 
# 6511
} 
#endif
# 6513 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6518
::exit(___);}
#if 0
# 6514
{ 
# 6515
int4 tmp; 
# 6516
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6517
(*retVal) = make_short1(tmp.x); 
# 6518
} 
#endif
# 6520 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6521
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6525
::exit(___);}
#if 0
# 6521
{ 
# 6522
int4 tmp; 
# 6523
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6524
(*retVal) = make_short2(tmp.x, tmp.y); 
# 6525
} 
#endif
# 6527 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6528
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6532
::exit(___);}
#if 0
# 6528
{ 
# 6529
int4 tmp; 
# 6530
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6531
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6532
} 
#endif
# 6534 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6535
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6539
::exit(___);}
#if 0
# 6535
{ 
# 6536
uint4 tmp; 
# 6537
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6538
(*retVal) = ((unsigned short)(tmp.x)); 
# 6539
} 
#endif
# 6541 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6542
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6546
::exit(___);}
#if 0
# 6542
{ 
# 6543
uint4 tmp; 
# 6544
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6545
(*retVal) = make_ushort1(tmp.x); 
# 6546
} 
#endif
# 6548 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6549
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6553
::exit(___);}
#if 0
# 6549
{ 
# 6550
uint4 tmp; 
# 6551
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6552
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 6553
} 
#endif
# 6555 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6556
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6560
::exit(___);}
#if 0
# 6556
{ 
# 6557
uint4 tmp; 
# 6558
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6559
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6560
} 
#endif
# 6568 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6569
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6573
::exit(___);}
#if 0
# 6569
{ 
# 6570
int4 tmp; 
# 6571
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6572
(*retVal) = ((int)(tmp.x)); 
# 6573
} 
#endif
# 6575 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6576
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6580
::exit(___);}
#if 0
# 6576
{ 
# 6577
int4 tmp; 
# 6578
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6579
(*retVal) = make_int1(tmp.x); 
# 6580
} 
#endif
# 6582 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6583
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6587
::exit(___);}
#if 0
# 6583
{ 
# 6584
int4 tmp; 
# 6585
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6586
(*retVal) = make_int2(tmp.x, tmp.y); 
# 6587
} 
#endif
# 6589 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6590
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6594
::exit(___);}
#if 0
# 6590
{ 
# 6591
int4 tmp; 
# 6592
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6593
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6594
} 
#endif
# 6596 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6597
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6601
::exit(___);}
#if 0
# 6597
{ 
# 6598
uint4 tmp; 
# 6599
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6600
(*retVal) = ((unsigned)(tmp.x)); 
# 6601
} 
#endif
# 6603 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6604
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6608
::exit(___);}
#if 0
# 6604
{ 
# 6605
uint4 tmp; 
# 6606
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6607
(*retVal) = make_uint1(tmp.x); 
# 6608
} 
#endif
# 6610 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6611
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6615
::exit(___);}
#if 0
# 6611
{ 
# 6612
uint4 tmp; 
# 6613
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6614
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6615
} 
#endif
# 6617 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6618
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6622
::exit(___);}
#if 0
# 6618
{ 
# 6619
uint4 tmp; 
# 6620
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6621
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6622
} 
#endif
# 6697 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6698
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6702
::exit(___);}
#if 0
# 6698
{ 
# 6699
float4 tmp; 
# 6700
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6701
(*retVal) = ((float)(tmp.x)); 
# 6702
} 
#endif
# 6704 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6705
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6709
::exit(___);}
#if 0
# 6705
{ 
# 6706
float4 tmp; 
# 6707
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6708
(*retVal) = make_float1(tmp.x); 
# 6709
} 
#endif
# 6711 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6712
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6716
::exit(___);}
#if 0
# 6712
{ 
# 6713
float4 tmp; 
# 6714
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6715
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6716
} 
#endif
# 6718 "/usr/local/cuda-7.0//include/texture_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6719
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6723
::exit(___);}
#if 0
# 6719
{ 
# 6720
float4 tmp; 
# 6721
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
# 6722
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6723
} 
#endif
# 77 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
extern "C" { __attribute__((unused)) void __suld_1d_i8_clamp(char *, unsigned long long, int); } 
# 78
extern "C" { __attribute__((unused)) void __suld_1d_i16_clamp(short *, unsigned long long, int); } 
# 79
extern "C" { __attribute__((unused)) void __suld_1d_i32_clamp(int *, unsigned long long, int); } 
# 80
extern "C" { __attribute__((unused)) void __suld_1d_i64_clamp(long long *, unsigned long long, int); } 
# 81
extern "C" { __attribute__((unused)) void __suld_1d_v2i8_clamp(char *, char *, unsigned long long, int); } 
# 82
extern "C" { __attribute__((unused)) void __suld_1d_v2i16_clamp(short *, short *, unsigned long long, int); } 
# 83
extern "C" { __attribute__((unused)) void __suld_1d_v2i32_clamp(int *, int *, unsigned long long, int); } 
# 84
extern "C" { __attribute__((unused)) void __suld_1d_v2i64_clamp(long long *, long long *, unsigned long long, int); } 
# 85
extern "C" { __attribute__((unused)) void __suld_1d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int); } 
# 86
extern "C" { __attribute__((unused)) void __suld_1d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int); } 
# 87
extern "C" { __attribute__((unused)) void __suld_1d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int); } 
# 88
extern "C" { __attribute__((unused)) void __suld_1d_array_i8_clamp(char *, unsigned long long, int, int); } 
# 89
extern "C" { __attribute__((unused)) void __suld_1d_array_i16_clamp(short *, unsigned long long, int, int); } 
# 90
extern "C" { __attribute__((unused)) void __suld_1d_array_i32_clamp(int *, unsigned long long, int, int); } 
# 91
extern "C" { __attribute__((unused)) void __suld_1d_array_i64_clamp(long long *, unsigned long long, int, int); } 
# 92
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i8_clamp(char *, char *, unsigned long long, int, int); } 
# 93
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i16_clamp(short *, short *, unsigned long long, int, int); } 
# 94
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i32_clamp(int *, int *, unsigned long long, int, int); } 
# 95
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i64_clamp(long long *, long long *, unsigned long long, int, int); } 
# 96
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int); } 
# 97
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int); } 
# 98
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int); } 
# 99
extern "C" { __attribute__((unused)) void __suld_2d_i8_clamp(char *, unsigned long long, int, int); } 
# 100
extern "C" { __attribute__((unused)) void __suld_2d_i16_clamp(short *, unsigned long long, int, int); } 
# 101
extern "C" { __attribute__((unused)) void __suld_2d_i32_clamp(int *, unsigned long long, int, int); } 
# 102
extern "C" { __attribute__((unused)) void __suld_2d_i64_clamp(long long *, unsigned long long, int, int); } 
# 103
extern "C" { __attribute__((unused)) void __suld_2d_v2i8_clamp(char *, char *, unsigned long long, int, int); } 
# 104
extern "C" { __attribute__((unused)) void __suld_2d_v2i16_clamp(short *, short *, unsigned long long, int, int); } 
# 105
extern "C" { __attribute__((unused)) void __suld_2d_v2i32_clamp(int *, int *, unsigned long long, int, int); } 
# 106
extern "C" { __attribute__((unused)) void __suld_2d_v2i64_clamp(long long *, long long *, unsigned long long, int, int); } 
# 107
extern "C" { __attribute__((unused)) void __suld_2d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int); } 
# 108
extern "C" { __attribute__((unused)) void __suld_2d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int); } 
# 109
extern "C" { __attribute__((unused)) void __suld_2d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int); } 
# 110
extern "C" { __attribute__((unused)) void __suld_2d_array_i8_clamp(char *, unsigned long long, int, int, int); } 
# 111
extern "C" { __attribute__((unused)) void __suld_2d_array_i16_clamp(short *, unsigned long long, int, int, int); } 
# 112
extern "C" { __attribute__((unused)) void __suld_2d_array_i32_clamp(int *, unsigned long long, int, int, int); } 
# 113
extern "C" { __attribute__((unused)) void __suld_2d_array_i64_clamp(long long *, unsigned long long, int, int, int); } 
# 114
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i8_clamp(char *, char *, unsigned long long, int, int, int); } 
# 115
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i16_clamp(short *, short *, unsigned long long, int, int, int); } 
# 116
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i32_clamp(int *, int *, unsigned long long, int, int, int); } 
# 117
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i64_clamp(long long *, long long *, unsigned long long, int, int, int); } 
# 118
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 119
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 120
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 121
extern "C" { __attribute__((unused)) void __suld_3d_i8_clamp(char *, unsigned long long, int, int, int); } 
# 122
extern "C" { __attribute__((unused)) void __suld_3d_i16_clamp(short *, unsigned long long, int, int, int); } 
# 123
extern "C" { __attribute__((unused)) void __suld_3d_i32_clamp(int *, unsigned long long, int, int, int); } 
# 124
extern "C" { __attribute__((unused)) void __suld_3d_i64_clamp(long long *, unsigned long long, int, int, int); } 
# 125
extern "C" { __attribute__((unused)) void __suld_3d_v2i8_clamp(char *, char *, unsigned long long, int, int, int); } 
# 126
extern "C" { __attribute__((unused)) void __suld_3d_v2i16_clamp(short *, short *, unsigned long long, int, int, int); } 
# 127
extern "C" { __attribute__((unused)) void __suld_3d_v2i32_clamp(int *, int *, unsigned long long, int, int, int); } 
# 128
extern "C" { __attribute__((unused)) void __suld_3d_v2i64_clamp(long long *, long long *, unsigned long long, int, int, int); } 
# 129
extern "C" { __attribute__((unused)) void __suld_3d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 130
extern "C" { __attribute__((unused)) void __suld_3d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 131
extern "C" { __attribute__((unused)) void __suld_3d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 132
extern "C" { __attribute__((unused)) void __suld_1d_i8_trap(char *, unsigned long long, int); } 
# 133
extern "C" { __attribute__((unused)) void __suld_1d_i16_trap(short *, unsigned long long, int); } 
# 134
extern "C" { __attribute__((unused)) void __suld_1d_i32_trap(int *, unsigned long long, int); } 
# 135
extern "C" { __attribute__((unused)) void __suld_1d_i64_trap(long long *, unsigned long long, int); } 
# 136
extern "C" { __attribute__((unused)) void __suld_1d_v2i8_trap(char *, char *, unsigned long long, int); } 
# 137
extern "C" { __attribute__((unused)) void __suld_1d_v2i16_trap(short *, short *, unsigned long long, int); } 
# 138
extern "C" { __attribute__((unused)) void __suld_1d_v2i32_trap(int *, int *, unsigned long long, int); } 
# 139
extern "C" { __attribute__((unused)) void __suld_1d_v2i64_trap(long long *, long long *, unsigned long long, int); } 
# 140
extern "C" { __attribute__((unused)) void __suld_1d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int); } 
# 141
extern "C" { __attribute__((unused)) void __suld_1d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int); } 
# 142
extern "C" { __attribute__((unused)) void __suld_1d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int); } 
# 143
extern "C" { __attribute__((unused)) void __suld_1d_array_i8_trap(char *, unsigned long long, int, int); } 
# 144
extern "C" { __attribute__((unused)) void __suld_1d_array_i16_trap(short *, unsigned long long, int, int); } 
# 145
extern "C" { __attribute__((unused)) void __suld_1d_array_i32_trap(int *, unsigned long long, int, int); } 
# 146
extern "C" { __attribute__((unused)) void __suld_1d_array_i64_trap(long long *, unsigned long long, int, int); } 
# 147
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i8_trap(char *, char *, unsigned long long, int, int); } 
# 148
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i16_trap(short *, short *, unsigned long long, int, int); } 
# 149
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i32_trap(int *, int *, unsigned long long, int, int); } 
# 150
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i64_trap(long long *, long long *, unsigned long long, int, int); } 
# 151
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int); } 
# 152
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int); } 
# 153
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int); } 
# 154
extern "C" { __attribute__((unused)) void __suld_2d_i8_trap(char *, unsigned long long, int, int); } 
# 155
extern "C" { __attribute__((unused)) void __suld_2d_i16_trap(short *, unsigned long long, int, int); } 
# 156
extern "C" { __attribute__((unused)) void __suld_2d_i32_trap(int *, unsigned long long, int, int); } 
# 157
extern "C" { __attribute__((unused)) void __suld_2d_i64_trap(long long *, unsigned long long, int, int); } 
# 158
extern "C" { __attribute__((unused)) void __suld_2d_v2i8_trap(char *, char *, unsigned long long, int, int); } 
# 159
extern "C" { __attribute__((unused)) void __suld_2d_v2i16_trap(short *, short *, unsigned long long, int, int); } 
# 160
extern "C" { __attribute__((unused)) void __suld_2d_v2i32_trap(int *, int *, unsigned long long, int, int); } 
# 161
extern "C" { __attribute__((unused)) void __suld_2d_v2i64_trap(long long *, long long *, unsigned long long, int, int); } 
# 162
extern "C" { __attribute__((unused)) void __suld_2d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int); } 
# 163
extern "C" { __attribute__((unused)) void __suld_2d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int); } 
# 164
extern "C" { __attribute__((unused)) void __suld_2d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int); } 
# 165
extern "C" { __attribute__((unused)) void __suld_2d_array_i8_trap(char *, unsigned long long, int, int, int); } 
# 166
extern "C" { __attribute__((unused)) void __suld_2d_array_i16_trap(short *, unsigned long long, int, int, int); } 
# 167
extern "C" { __attribute__((unused)) void __suld_2d_array_i32_trap(int *, unsigned long long, int, int, int); } 
# 168
extern "C" { __attribute__((unused)) void __suld_2d_array_i64_trap(long long *, unsigned long long, int, int, int); } 
# 169
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i8_trap(char *, char *, unsigned long long, int, int, int); } 
# 170
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i16_trap(short *, short *, unsigned long long, int, int, int); } 
# 171
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i32_trap(int *, int *, unsigned long long, int, int, int); } 
# 172
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i64_trap(long long *, long long *, unsigned long long, int, int, int); } 
# 173
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 174
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 175
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 176
extern "C" { __attribute__((unused)) void __suld_3d_i8_trap(char *, unsigned long long, int, int, int); } 
# 177
extern "C" { __attribute__((unused)) void __suld_3d_i16_trap(short *, unsigned long long, int, int, int); } 
# 178
extern "C" { __attribute__((unused)) void __suld_3d_i32_trap(int *, unsigned long long, int, int, int); } 
# 179
extern "C" { __attribute__((unused)) void __suld_3d_i64_trap(long long *, unsigned long long, int, int, int); } 
# 180
extern "C" { __attribute__((unused)) void __suld_3d_v2i8_trap(char *, char *, unsigned long long, int, int, int); } 
# 181
extern "C" { __attribute__((unused)) void __suld_3d_v2i16_trap(short *, short *, unsigned long long, int, int, int); } 
# 182
extern "C" { __attribute__((unused)) void __suld_3d_v2i32_trap(int *, int *, unsigned long long, int, int, int); } 
# 183
extern "C" { __attribute__((unused)) void __suld_3d_v2i64_trap(long long *, long long *, unsigned long long, int, int, int); } 
# 184
extern "C" { __attribute__((unused)) void __suld_3d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 185
extern "C" { __attribute__((unused)) void __suld_3d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 186
extern "C" { __attribute__((unused)) void __suld_3d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 187
extern "C" { __attribute__((unused)) void __suld_1d_i8_zero(char *, unsigned long long, int); } 
# 188
extern "C" { __attribute__((unused)) void __suld_1d_i16_zero(short *, unsigned long long, int); } 
# 189
extern "C" { __attribute__((unused)) void __suld_1d_i32_zero(int *, unsigned long long, int); } 
# 190
extern "C" { __attribute__((unused)) void __suld_1d_i64_zero(long long *, unsigned long long, int); } 
# 191
extern "C" { __attribute__((unused)) void __suld_1d_v2i8_zero(char *, char *, unsigned long long, int); } 
# 192
extern "C" { __attribute__((unused)) void __suld_1d_v2i16_zero(short *, short *, unsigned long long, int); } 
# 193
extern "C" { __attribute__((unused)) void __suld_1d_v2i32_zero(int *, int *, unsigned long long, int); } 
# 194
extern "C" { __attribute__((unused)) void __suld_1d_v2i64_zero(long long *, long long *, unsigned long long, int); } 
# 195
extern "C" { __attribute__((unused)) void __suld_1d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int); } 
# 196
extern "C" { __attribute__((unused)) void __suld_1d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int); } 
# 197
extern "C" { __attribute__((unused)) void __suld_1d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int); } 
# 198
extern "C" { __attribute__((unused)) void __suld_1d_array_i8_zero(char *, unsigned long long, int, int); } 
# 199
extern "C" { __attribute__((unused)) void __suld_1d_array_i16_zero(short *, unsigned long long, int, int); } 
# 200
extern "C" { __attribute__((unused)) void __suld_1d_array_i32_zero(int *, unsigned long long, int, int); } 
# 201
extern "C" { __attribute__((unused)) void __suld_1d_array_i64_zero(long long *, unsigned long long, int, int); } 
# 202
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i8_zero(char *, char *, unsigned long long, int, int); } 
# 203
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i16_zero(short *, short *, unsigned long long, int, int); } 
# 204
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i32_zero(int *, int *, unsigned long long, int, int); } 
# 205
extern "C" { __attribute__((unused)) void __suld_1d_array_v2i64_zero(long long *, long long *, unsigned long long, int, int); } 
# 206
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int); } 
# 207
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int); } 
# 208
extern "C" { __attribute__((unused)) void __suld_1d_array_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int); } 
# 209
extern "C" { __attribute__((unused)) void __suld_2d_i8_zero(char *, unsigned long long, int, int); } 
# 210
extern "C" { __attribute__((unused)) void __suld_2d_i16_zero(short *, unsigned long long, int, int); } 
# 211
extern "C" { __attribute__((unused)) void __suld_2d_i32_zero(int *, unsigned long long, int, int); } 
# 212
extern "C" { __attribute__((unused)) void __suld_2d_i64_zero(long long *, unsigned long long, int, int); } 
# 213
extern "C" { __attribute__((unused)) void __suld_2d_v2i8_zero(char *, char *, unsigned long long, int, int); } 
# 214
extern "C" { __attribute__((unused)) void __suld_2d_v2i16_zero(short *, short *, unsigned long long, int, int); } 
# 215
extern "C" { __attribute__((unused)) void __suld_2d_v2i32_zero(int *, int *, unsigned long long, int, int); } 
# 216
extern "C" { __attribute__((unused)) void __suld_2d_v2i64_zero(long long *, long long *, unsigned long long, int, int); } 
# 217
extern "C" { __attribute__((unused)) void __suld_2d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int); } 
# 218
extern "C" { __attribute__((unused)) void __suld_2d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int); } 
# 219
extern "C" { __attribute__((unused)) void __suld_2d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int); } 
# 220
extern "C" { __attribute__((unused)) void __suld_2d_array_i8_zero(char *, unsigned long long, int, int, int); } 
# 221
extern "C" { __attribute__((unused)) void __suld_2d_array_i16_zero(short *, unsigned long long, int, int, int); } 
# 222
extern "C" { __attribute__((unused)) void __suld_2d_array_i32_zero(int *, unsigned long long, int, int, int); } 
# 223
extern "C" { __attribute__((unused)) void __suld_2d_array_i64_zero(long long *, unsigned long long, int, int, int); } 
# 224
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i8_zero(char *, char *, unsigned long long, int, int, int); } 
# 225
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i16_zero(short *, short *, unsigned long long, int, int, int); } 
# 226
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i32_zero(int *, int *, unsigned long long, int, int, int); } 
# 227
extern "C" { __attribute__((unused)) void __suld_2d_array_v2i64_zero(long long *, long long *, unsigned long long, int, int, int); } 
# 228
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 229
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 230
extern "C" { __attribute__((unused)) void __suld_2d_array_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 231
extern "C" { __attribute__((unused)) void __suld_3d_i8_zero(char *, unsigned long long, int, int, int); } 
# 232
extern "C" { __attribute__((unused)) void __suld_3d_i16_zero(short *, unsigned long long, int, int, int); } 
# 233
extern "C" { __attribute__((unused)) void __suld_3d_i32_zero(int *, unsigned long long, int, int, int); } 
# 234
extern "C" { __attribute__((unused)) void __suld_3d_i64_zero(long long *, unsigned long long, int, int, int); } 
# 235
extern "C" { __attribute__((unused)) void __suld_3d_v2i8_zero(char *, char *, unsigned long long, int, int, int); } 
# 236
extern "C" { __attribute__((unused)) void __suld_3d_v2i16_zero(short *, short *, unsigned long long, int, int, int); } 
# 237
extern "C" { __attribute__((unused)) void __suld_3d_v2i32_zero(int *, int *, unsigned long long, int, int, int); } 
# 238
extern "C" { __attribute__((unused)) void __suld_3d_v2i64_zero(long long *, long long *, unsigned long long, int, int, int); } 
# 239
extern "C" { __attribute__((unused)) void __suld_3d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int, int); } 
# 240
extern "C" { __attribute__((unused)) void __suld_3d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int, int); } 
# 241
extern "C" { __attribute__((unused)) void __suld_3d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int, int); } 
# 243
extern "C" { __attribute__((unused)) void __sust_b_1d_i8_clamp(cudaSurfaceObject_t, int, unsigned char); } 
# 244
extern "C" { __attribute__((unused)) void __sust_b_1d_i16_clamp(cudaSurfaceObject_t, int, unsigned short); } 
# 245
extern "C" { __attribute__((unused)) void __sust_b_1d_i32_clamp(cudaSurfaceObject_t, int, unsigned); } 
# 246
extern "C" { __attribute__((unused)) void __sust_b_1d_i64_clamp(cudaSurfaceObject_t, int, unsigned long long); } 
# 247
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i8_clamp(cudaSurfaceObject_t, int, uchar2); } 
# 248
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i16_clamp(cudaSurfaceObject_t, int, ushort2); } 
# 249
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i32_clamp(cudaSurfaceObject_t, int, uint2); } 
# 250
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i64_clamp(cudaSurfaceObject_t, int, ulonglong2); } 
# 251
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i8_clamp(cudaSurfaceObject_t, int, uchar4); } 
# 252
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i16_clamp(cudaSurfaceObject_t, int, ushort4); } 
# 253
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i32_clamp(cudaSurfaceObject_t, int, uint4); } 
# 254
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char); } 
# 255
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short); } 
# 256
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i32_clamp(cudaSurfaceObject_t, int, int, unsigned); } 
# 257
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i64_clamp(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 258
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2); } 
# 259
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2); } 
# 260
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2); } 
# 261
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 262
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4); } 
# 263
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4); } 
# 264
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4); } 
# 265
extern "C" { __attribute__((unused)) void __sust_b_2d_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char); } 
# 266
extern "C" { __attribute__((unused)) void __sust_b_2d_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short); } 
# 267
extern "C" { __attribute__((unused)) void __sust_b_2d_i32_clamp(cudaSurfaceObject_t, int, int, unsigned); } 
# 268
extern "C" { __attribute__((unused)) void __sust_b_2d_i64_clamp(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 269
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2); } 
# 270
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2); } 
# 271
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2); } 
# 272
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 273
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4); } 
# 274
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4); } 
# 275
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4); } 
# 276
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 277
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 278
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 279
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 280
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 281
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 282
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2); } 
# 283
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 284
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 285
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 286
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4); } 
# 287
extern "C" { __attribute__((unused)) void __sust_b_3d_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 288
extern "C" { __attribute__((unused)) void __sust_b_3d_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 289
extern "C" { __attribute__((unused)) void __sust_b_3d_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 290
extern "C" { __attribute__((unused)) void __sust_b_3d_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 291
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 292
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 293
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2); } 
# 294
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 295
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 296
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 297
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4); } 
# 298
extern "C" { __attribute__((unused)) void __sust_b_1d_i8_trap(cudaSurfaceObject_t, int, unsigned char); } 
# 299
extern "C" { __attribute__((unused)) void __sust_b_1d_i16_trap(cudaSurfaceObject_t, int, unsigned short); } 
# 300
extern "C" { __attribute__((unused)) void __sust_b_1d_i32_trap(cudaSurfaceObject_t, int, unsigned); } 
# 301
extern "C" { __attribute__((unused)) void __sust_b_1d_i64_trap(cudaSurfaceObject_t, int, unsigned long long); } 
# 302
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i8_trap(cudaSurfaceObject_t, int, uchar2); } 
# 303
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i16_trap(cudaSurfaceObject_t, int, ushort2); } 
# 304
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i32_trap(cudaSurfaceObject_t, int, uint2); } 
# 305
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i64_trap(cudaSurfaceObject_t, int, ulonglong2); } 
# 306
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i8_trap(cudaSurfaceObject_t, int, uchar4); } 
# 307
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i16_trap(cudaSurfaceObject_t, int, ushort4); } 
# 308
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i32_trap(cudaSurfaceObject_t, int, uint4); } 
# 309
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i8_trap(cudaSurfaceObject_t, int, int, unsigned char); } 
# 310
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i16_trap(cudaSurfaceObject_t, int, int, unsigned short); } 
# 311
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i32_trap(cudaSurfaceObject_t, int, int, unsigned); } 
# 312
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i64_trap(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 313
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2); } 
# 314
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2); } 
# 315
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i32_trap(cudaSurfaceObject_t, int, int, uint2); } 
# 316
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 317
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4); } 
# 318
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4); } 
# 319
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i32_trap(cudaSurfaceObject_t, int, int, uint4); } 
# 320
extern "C" { __attribute__((unused)) void __sust_b_2d_i8_trap(cudaSurfaceObject_t, int, int, unsigned char); } 
# 321
extern "C" { __attribute__((unused)) void __sust_b_2d_i16_trap(cudaSurfaceObject_t, int, int, unsigned short); } 
# 322
extern "C" { __attribute__((unused)) void __sust_b_2d_i32_trap(cudaSurfaceObject_t, int, int, unsigned); } 
# 323
extern "C" { __attribute__((unused)) void __sust_b_2d_i64_trap(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 324
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2); } 
# 325
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2); } 
# 326
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i32_trap(cudaSurfaceObject_t, int, int, uint2); } 
# 327
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 328
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4); } 
# 329
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4); } 
# 330
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i32_trap(cudaSurfaceObject_t, int, int, uint4); } 
# 331
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 332
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 333
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 334
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 335
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 336
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 337
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2); } 
# 338
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 339
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 340
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 341
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4); } 
# 342
extern "C" { __attribute__((unused)) void __sust_b_3d_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 343
extern "C" { __attribute__((unused)) void __sust_b_3d_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 344
extern "C" { __attribute__((unused)) void __sust_b_3d_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 345
extern "C" { __attribute__((unused)) void __sust_b_3d_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 346
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 347
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 348
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2); } 
# 349
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 350
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 351
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 352
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4); } 
# 353
extern "C" { __attribute__((unused)) void __sust_b_1d_i8_zero(cudaSurfaceObject_t, int, unsigned char); } 
# 354
extern "C" { __attribute__((unused)) void __sust_b_1d_i16_zero(cudaSurfaceObject_t, int, unsigned short); } 
# 355
extern "C" { __attribute__((unused)) void __sust_b_1d_i32_zero(cudaSurfaceObject_t, int, unsigned); } 
# 356
extern "C" { __attribute__((unused)) void __sust_b_1d_i64_zero(cudaSurfaceObject_t, int, unsigned long long); } 
# 357
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i8_zero(cudaSurfaceObject_t, int, uchar2); } 
# 358
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i16_zero(cudaSurfaceObject_t, int, ushort2); } 
# 359
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i32_zero(cudaSurfaceObject_t, int, uint2); } 
# 360
extern "C" { __attribute__((unused)) void __sust_b_1d_v2i64_zero(cudaSurfaceObject_t, int, ulonglong2); } 
# 361
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i8_zero(cudaSurfaceObject_t, int, uchar4); } 
# 362
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i16_zero(cudaSurfaceObject_t, int, ushort4); } 
# 363
extern "C" { __attribute__((unused)) void __sust_b_1d_v4i32_zero(cudaSurfaceObject_t, int, uint4); } 
# 364
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i8_zero(cudaSurfaceObject_t, int, int, unsigned char); } 
# 365
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i16_zero(cudaSurfaceObject_t, int, int, unsigned short); } 
# 366
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i32_zero(cudaSurfaceObject_t, int, int, unsigned); } 
# 367
extern "C" { __attribute__((unused)) void __sust_b_1d_array_i64_zero(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 368
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2); } 
# 369
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2); } 
# 370
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i32_zero(cudaSurfaceObject_t, int, int, uint2); } 
# 371
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 372
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4); } 
# 373
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4); } 
# 374
extern "C" { __attribute__((unused)) void __sust_b_1d_array_v4i32_zero(cudaSurfaceObject_t, int, int, uint4); } 
# 375
extern "C" { __attribute__((unused)) void __sust_b_2d_i8_zero(cudaSurfaceObject_t, int, int, unsigned char); } 
# 376
extern "C" { __attribute__((unused)) void __sust_b_2d_i16_zero(cudaSurfaceObject_t, int, int, unsigned short); } 
# 377
extern "C" { __attribute__((unused)) void __sust_b_2d_i32_zero(cudaSurfaceObject_t, int, int, unsigned); } 
# 378
extern "C" { __attribute__((unused)) void __sust_b_2d_i64_zero(cudaSurfaceObject_t, int, int, unsigned long long); } 
# 379
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2); } 
# 380
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2); } 
# 381
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i32_zero(cudaSurfaceObject_t, int, int, uint2); } 
# 382
extern "C" { __attribute__((unused)) void __sust_b_2d_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2); } 
# 383
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4); } 
# 384
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4); } 
# 385
extern "C" { __attribute__((unused)) void __sust_b_2d_v4i32_zero(cudaSurfaceObject_t, int, int, uint4); } 
# 386
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 387
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 388
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 389
extern "C" { __attribute__((unused)) void __sust_b_2d_array_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 390
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 391
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 392
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2); } 
# 393
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 394
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 395
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 396
extern "C" { __attribute__((unused)) void __sust_b_2d_array_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4); } 
# 397
extern "C" { __attribute__((unused)) void __sust_b_3d_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char); } 
# 398
extern "C" { __attribute__((unused)) void __sust_b_3d_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short); } 
# 399
extern "C" { __attribute__((unused)) void __sust_b_3d_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned); } 
# 400
extern "C" { __attribute__((unused)) void __sust_b_3d_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned long long); } 
# 401
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2); } 
# 402
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2); } 
# 403
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2); } 
# 404
extern "C" { __attribute__((unused)) void __sust_b_3d_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
# 405
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4); } 
# 406
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4); } 
# 407
extern "C" { __attribute__((unused)) void __sust_b_3d_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4); } 
# 410
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 412
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 414
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 416
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 418
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 420
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 422
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 424
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 426
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 428
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 430
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 432
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 434
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 436
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(long long * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 438
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 440
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 442
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 444
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 446
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 454
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 456
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 458
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 460
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 462
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 464
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 466
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 468
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 470
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 478
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 480
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 482
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 484
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 486
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 488
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 490
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 498
template< class T> 
# 499
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 500
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 504
::exit(___);}
#if 0
# 500
{ 
# 501
T ret; 
# 502
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 503
return ret; 
# 504
} 
#endif
# 512 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 514
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 516
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 518
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 520
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 522
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 524
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 526
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 528
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 530
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 532
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 534
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 536
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 538
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 540
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 542
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 544
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 546
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 548
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 556
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 558
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 560
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 562
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 564
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 566
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 568
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 570
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 572
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 580
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 582
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 584
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 586
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 588
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 590
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 592
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 600
template< class T> 
# 601
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 602
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 606
::exit(___);}
#if 0
# 602
{ 
# 603
T ret; 
# 604
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 605
return ret; 
# 606
} 
#endif
# 614 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 616
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 618
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 620
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 622
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 624
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 626
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 628
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 630
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 632
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 634
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 636
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 638
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 640
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 642
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 644
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 646
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 648
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 650
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 658
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 660
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 662
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 664
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 666
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 668
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 670
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 672
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 674
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 682
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 684
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 686
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 688
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 690
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 692
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 694
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 702
template< class T> 
# 703
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 704
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 708
::exit(___);}
#if 0
# 704
{ 
# 705
T ret; 
# 706
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 707
return ret; 
# 708
} 
#endif
# 716 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 718
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 720
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 722
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 724
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 726
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 728
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 730
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 732
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 734
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 736
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 738
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 740
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 742
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 744
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 746
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 748
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 750
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 752
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 760
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 762
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 764
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 766
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 768
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 770
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 772
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 774
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 776
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 784
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 786
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 788
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 790
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 792
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 794
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 796
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 804
template< class T> 
# 805
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 806
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 810
::exit(___);}
#if 0
# 806
{ 
# 807
T ret; 
# 808
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 809
return ret; 
# 810
} 
#endif
# 818 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 820
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 822
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 824
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 826
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 828
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 830
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 832
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 834
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 836
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 838
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 840
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 842
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 844
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 846
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 848
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 850
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 852
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 854
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 862
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 864
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 866
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 868
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 870
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 872
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 874
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 876
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 878
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 886
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 888
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 890
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 892
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 894
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 896
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 898
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 906
template< class T> 
# 907
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 908
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 912
::exit(___);}
#if 0
# 908
{ 
# 909
T ret; 
# 910
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 911
return ret; 
# 912
} 
#endif
# 920 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 922
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 924
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 926
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 928
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 930
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 932
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 934
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 936
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 938
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 940
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 942
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 944
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 946
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 948
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 950
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 952
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 954
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 956
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 964
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 966
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 968
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 970
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 972
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 974
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 976
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 978
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 980
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 988
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 990
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 992
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 994
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 996
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 998
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1000
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1008
template< class T> 
# 1009
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 1010
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 1014
::exit(___);}
#if 0
# 1010
{ 
# 1011
T ret; 
# 1012
surfCubemapread(&ret, surfObject, face, x, y, boundaryMode); 
# 1013
return ret; 
# 1014
} 
#endif
# 1022 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1024
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1026
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1028
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1030
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1032
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1034
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1036
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1038
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1040
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1042
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1044
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1046
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1048
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1050
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1052
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned long long * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1054
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1056
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1058
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1066
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1068
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1070
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1072
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1074
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1076
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1078
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1080
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1082
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1090
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1092
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1094
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1096
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1098
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1100
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1102
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1110
template< class T> 
# 1111
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 1112
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 1116
::exit(___);}
#if 0
# 1112
{ 
# 1113
T ret; 
# 1114
surfCubemapLayeredread(&ret, surfObject, x, y, z, layerface, boundaryMode); 
# 1115
return ret; 
# 1116
} 
#endif
# 1124 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1126
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1128
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1130
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1132
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1134
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1136
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1138
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1140
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1142
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1144
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1146
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1148
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1150
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1152
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1154
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1156
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1158
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1160
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1168
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1170
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1172
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1174
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1176
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1178
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1180
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1182
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1184
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1192
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1194
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1196
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1198
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1200
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1202
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1204
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1212
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1214
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1216
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1218
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1220
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1222
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1224
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1226
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1228
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1230
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1232
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1234
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1236
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1238
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1240
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1242
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1244
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1246
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1248
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1256
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1258
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1260
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1262
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1264
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1266
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1268
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1270
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1272
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1280
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1282
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1284
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1286
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1288
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1290
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1292
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1301 "/usr/local/cuda-7.0//include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1303
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1305
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1307
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1309
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1311
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1313
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1315
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1317
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1319
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1321
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1323
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1325
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1327
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1329
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1331
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1333
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1335
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1337
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1345
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1347
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1349
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1351
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1353
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1355
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1357
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1359
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1361
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1369
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1371
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1373
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1375
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1377
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1379
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1381
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1389
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1391
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1393
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1395
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1397
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1399
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1401
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1403
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1405
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1407
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1409
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1411
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1413
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1415
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1417
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1419
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1421
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1423
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1425
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1433
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1435
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1437
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1439
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1441
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1443
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1445
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1447
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1449
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1457
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1459
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1461
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1463
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1465
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1467
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1469
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1477
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1479
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1481
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1483
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1485
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1487
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1489
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1491
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1493
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1495
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1497
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1499
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1501
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1503
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1505
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1507
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1509
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1511
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1513
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1521
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1523
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1525
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1527
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1529
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1531
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1533
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1535
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1537
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1545
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1547
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1549
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1551
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1553
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1555
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1557
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1565
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1567
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1569
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1571
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1573
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1575
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1577
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1579
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1581
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1583
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1585
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1587
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1589
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1591
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1593
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1595
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1597
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1599
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1601
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1609
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1611
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1613
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1615
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1617
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1619
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1621
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1623
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1625
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1633
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1635
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1637
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1639
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1641
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1643
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1645
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1653
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1655
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1657
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1659
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1661
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1663
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1665
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1667
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1669
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1671
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1673
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1675
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1677
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1679
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1681
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1683
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1685
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1687
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1689
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1697
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1699
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1701
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1703
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1705
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1707
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1709
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1711
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1713
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1721
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1723
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1725
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1727
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1729
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1731
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 1733
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
# 76 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 77
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 89
::exit(___);}
#if 0
# 77
{ 
# 78
char tmp; 
# 79
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 80
__suld_1d_i8_trap(&tmp, surfObject, x); 
# 81
} else { 
# 82
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 83
__suld_1d_i8_clamp(&tmp, surfObject, x); 
# 84
} else { 
# 85
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 86
__suld_1d_i8_zero(&tmp, surfObject, x); 
# 87
}  }  }  
# 88
(*retVal) = tmp; 
# 89
} 
#endif
# 91 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 92
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 104
::exit(___);}
#if 0
# 92
{ 
# 93
signed char tmp; 
# 94
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 95
__suld_1d_i8_trap((char *)(&tmp), surfObject, x); 
# 96
} else { 
# 97
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 98
__suld_1d_i8_clamp((char *)(&tmp), surfObject, x); 
# 99
} else { 
# 100
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 101
__suld_1d_i8_zero((char *)(&tmp), surfObject, x); 
# 102
}  }  }  
# 103
(*retVal) = ((signed char)tmp); 
# 104
} 
#endif
# 106 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 107
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 119
::exit(___);}
#if 0
# 107
{ 
# 108
char1 tmp; 
# 109
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 110
__suld_1d_i8_trap((char *)(&(tmp.x)), surfObject, x); 
# 111
} else { 
# 112
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 113
__suld_1d_i8_clamp((char *)(&(tmp.x)), surfObject, x); 
# 114
} else { 
# 115
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 116
__suld_1d_i8_zero((char *)(&(tmp.x)), surfObject, x); 
# 117
}  }  }  
# 118
(*retVal) = make_char1(tmp.x); 
# 119
} 
#endif
# 121 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 122
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 134
::exit(___);}
#if 0
# 122
{ 
# 123
unsigned char tmp; 
# 124
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 125
__suld_1d_i8_trap((char *)(&tmp), surfObject, x); 
# 126
} else { 
# 127
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 128
__suld_1d_i8_clamp((char *)(&tmp), surfObject, x); 
# 129
} else { 
# 130
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 131
__suld_1d_i8_zero((char *)(&tmp), surfObject, x); 
# 132
}  }  }  
# 133
(*retVal) = ((unsigned char)tmp); 
# 134
} 
#endif
# 136 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 137
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 149
::exit(___);}
#if 0
# 137
{ 
# 138
uchar1 tmp; 
# 139
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 140
__suld_1d_i8_trap((char *)(&(tmp.x)), surfObject, x); 
# 141
} else { 
# 142
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 143
__suld_1d_i8_clamp((char *)(&(tmp.x)), surfObject, x); 
# 144
} else { 
# 145
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 146
__suld_1d_i8_zero((char *)(&(tmp.x)), surfObject, x); 
# 147
}  }  }  
# 148
(*retVal) = make_uchar1(tmp.x); 
# 149
} 
#endif
# 151 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 152
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 164
::exit(___);}
#if 0
# 152
{ 
# 153
short tmp; 
# 154
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 155
__suld_1d_i16_trap(&tmp, surfObject, x); 
# 156
} else { 
# 157
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 158
__suld_1d_i16_clamp(&tmp, surfObject, x); 
# 159
} else { 
# 160
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 161
__suld_1d_i16_zero(&tmp, surfObject, x); 
# 162
}  }  }  
# 163
(*retVal) = tmp; 
# 164
} 
#endif
# 166 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 167
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 179
::exit(___);}
#if 0
# 167
{ 
# 168
short tmp; 
# 169
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 170
__suld_1d_i16_trap(&tmp, surfObject, x); 
# 171
} else { 
# 172
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 173
__suld_1d_i16_clamp(&tmp, surfObject, x); 
# 174
} else { 
# 175
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 176
__suld_1d_i16_zero(&tmp, surfObject, x); 
# 177
}  }  }  
# 178
(*retVal) = make_short1(tmp); 
# 179
} 
#endif
# 181 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 182
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 194
::exit(___);}
#if 0
# 182
{ 
# 183
unsigned short tmp; 
# 184
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 185
__suld_1d_i16_trap((short *)(&tmp), surfObject, x); 
# 186
} else { 
# 187
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 188
__suld_1d_i16_clamp((short *)(&tmp), surfObject, x); 
# 189
} else { 
# 190
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 191
__suld_1d_i16_zero((short *)(&tmp), surfObject, x); 
# 192
}  }  }  
# 193
(*retVal) = tmp; 
# 194
} 
#endif
# 196 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 197
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 209
::exit(___);}
#if 0
# 197
{ 
# 198
unsigned short tmp; 
# 199
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 200
__suld_1d_i16_trap((short *)(&tmp), surfObject, x); 
# 201
} else { 
# 202
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 203
__suld_1d_i16_clamp((short *)(&tmp), surfObject, x); 
# 204
} else { 
# 205
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 206
__suld_1d_i16_zero((short *)(&tmp), surfObject, x); 
# 207
}  }  }  
# 208
(*retVal) = make_ushort1(tmp); 
# 209
} 
#endif
# 211 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 212
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 212
{ 
# 213
int tmp; 
# 214
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 215
__suld_1d_i32_trap(&tmp, surfObject, x); 
# 216
} else { 
# 217
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 218
__suld_1d_i32_clamp(&tmp, surfObject, x); 
# 219
} else { 
# 220
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 221
__suld_1d_i32_zero(&tmp, surfObject, x); 
# 222
}  }  }  
# 223
(*retVal) = tmp; 
# 224
} 
#endif
# 226 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 227
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 239
::exit(___);}
#if 0
# 227
{ 
# 228
int tmp; 
# 229
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 230
__suld_1d_i32_trap(&tmp, surfObject, x); 
# 231
} else { 
# 232
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 233
__suld_1d_i32_clamp(&tmp, surfObject, x); 
# 234
} else { 
# 235
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 236
__suld_1d_i32_zero(&tmp, surfObject, x); 
# 237
}  }  }  
# 238
(*retVal) = make_int1(tmp); 
# 239
} 
#endif
# 241 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 242
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 254
::exit(___);}
#if 0
# 242
{ 
# 243
unsigned tmp; 
# 244
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 245
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
# 246
} else { 
# 247
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 248
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
# 249
} else { 
# 250
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 251
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
# 252
}  }  }  
# 253
(*retVal) = ((unsigned)tmp); 
# 254
} 
#endif
# 256 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 257
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 269
::exit(___);}
#if 0
# 257
{ 
# 258
unsigned tmp; 
# 259
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 260
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
# 261
} else { 
# 262
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 263
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
# 264
} else { 
# 265
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 266
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
# 267
}  }  }  
# 268
(*retVal) = make_uint1(tmp); 
# 269
} 
#endif
# 271 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 272
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 284
::exit(___);}
#if 0
# 272
{ 
# 273
long long tmp; 
# 274
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 275
__suld_1d_i64_trap(&tmp, surfObject, x); 
# 276
} else { 
# 277
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 278
__suld_1d_i64_clamp(&tmp, surfObject, x); 
# 279
} else { 
# 280
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 281
__suld_1d_i64_zero(&tmp, surfObject, x); 
# 282
}  }  }  
# 283
(*retVal) = tmp; 
# 284
} 
#endif
# 286 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 287
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 299
::exit(___);}
#if 0
# 287
{ 
# 288
long long tmp; 
# 289
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 290
__suld_1d_i64_trap(&tmp, surfObject, x); 
# 291
} else { 
# 292
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 293
__suld_1d_i64_clamp(&tmp, surfObject, x); 
# 294
} else { 
# 295
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 296
__suld_1d_i64_zero(&tmp, surfObject, x); 
# 297
}  }  }  
# 298
(*retVal) = make_longlong1(tmp); 
# 299
} 
#endif
# 301 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 302
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 314
::exit(___);}
#if 0
# 302
{ 
# 303
unsigned long long tmp; 
# 304
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 305
__suld_1d_i64_trap((long long *)(&tmp), surfObject, x); 
# 306
} else { 
# 307
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 308
__suld_1d_i64_clamp((long long *)(&tmp), surfObject, x); 
# 309
} else { 
# 310
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 311
__suld_1d_i64_zero((long long *)(&tmp), surfObject, x); 
# 312
}  }  }  
# 313
(*retVal) = tmp; 
# 314
} 
#endif
# 316 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 317
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 329
::exit(___);}
#if 0
# 317
{ 
# 318
unsigned long long tmp; 
# 319
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 320
__suld_1d_i64_trap((long long *)(&tmp), surfObject, x); 
# 321
} else { 
# 322
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 323
__suld_1d_i64_clamp((long long *)(&tmp), surfObject, x); 
# 324
} else { 
# 325
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 326
__suld_1d_i64_zero((long long *)(&tmp), surfObject, x); 
# 327
}  }  }  
# 328
(*retVal) = make_ulonglong1(tmp); 
# 329
} 
#endif
# 331 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 332
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 344
::exit(___);}
#if 0
# 332
{ 
# 333
float tmp; 
# 334
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 335
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
# 336
} else { 
# 337
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 338
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
# 339
} else { 
# 340
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 341
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
# 342
}  }  }  
# 343
(*retVal) = tmp; 
# 344
} 
#endif
# 346 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 347
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 359
::exit(___);}
#if 0
# 347
{ 
# 348
float tmp; 
# 349
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 350
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
# 351
} else { 
# 352
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 353
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
# 354
} else { 
# 355
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 356
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
# 357
}  }  }  
# 358
(*retVal) = make_float1(tmp); 
# 359
} 
#endif
# 367 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 368
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 380
::exit(___);}
#if 0
# 368
{ 
# 369
char2 tmp; 
# 370
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 371
__suld_1d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 372
} else { 
# 373
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 374
__suld_1d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 375
} else { 
# 376
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 377
__suld_1d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 378
}  }  }  
# 379
(*retVal) = tmp; 
# 380
} 
#endif
# 382 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 383
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 395
::exit(___);}
#if 0
# 383
{ 
# 384
uchar2 tmp; 
# 385
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 386
__suld_1d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 387
} else { 
# 388
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 389
__suld_1d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 390
} else { 
# 391
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 392
__suld_1d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
# 393
}  }  }  
# 394
(*retVal) = tmp; 
# 395
} 
#endif
# 397 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 398
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 410
::exit(___);}
#if 0
# 398
{ 
# 399
short2 tmp; 
# 400
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 401
__suld_1d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 402
} else { 
# 403
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 404
__suld_1d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 405
} else { 
# 406
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 407
__suld_1d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 408
}  }  }  
# 409
(*retVal) = tmp; 
# 410
} 
#endif
# 412 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 413
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 425
::exit(___);}
#if 0
# 413
{ 
# 414
ushort2 tmp; 
# 415
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 416
__suld_1d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 417
} else { 
# 418
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 419
__suld_1d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 420
} else { 
# 421
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 422
__suld_1d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
# 423
}  }  }  
# 424
(*retVal) = tmp; 
# 425
} 
#endif
# 427 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 428
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 440
::exit(___);}
#if 0
# 428
{ 
# 429
int2 tmp; 
# 430
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 431
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 432
} else { 
# 433
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 434
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 435
} else { 
# 436
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 437
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 438
}  }  }  
# 439
(*retVal) = tmp; 
# 440
} 
#endif
# 442 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 443
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 455
::exit(___);}
#if 0
# 443
{ 
# 444
uint2 tmp; 
# 445
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 446
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 447
} else { 
# 448
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 449
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 450
} else { 
# 451
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 452
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 453
}  }  }  
# 454
(*retVal) = tmp; 
# 455
} 
#endif
# 457 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 458
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 470
::exit(___);}
#if 0
# 458
{ 
# 459
longlong2 tmp; 
# 460
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 461
__suld_1d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 462
} else { 
# 463
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 464
__suld_1d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 465
} else { 
# 466
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 467
__suld_1d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 468
}  }  }  
# 469
(*retVal) = tmp; 
# 470
} 
#endif
# 472 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 473
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 485
::exit(___);}
#if 0
# 473
{ 
# 474
ulonglong2 tmp; 
# 475
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 476
__suld_1d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 477
} else { 
# 478
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 479
__suld_1d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 480
} else { 
# 481
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 482
__suld_1d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x); 
# 483
}  }  }  
# 484
(*retVal) = tmp; 
# 485
} 
#endif
# 487 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 488
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 500
::exit(___);}
#if 0
# 488
{ 
# 489
float2 tmp; 
# 490
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 491
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 492
} else { 
# 493
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 494
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 495
} else { 
# 496
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 497
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
# 498
}  }  }  
# 499
(*retVal) = tmp; 
# 500
} 
#endif
# 508 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 509
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 521
::exit(___);}
#if 0
# 509
{ 
# 510
char4 tmp; 
# 511
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 512
__suld_1d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 513
} else { 
# 514
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 515
__suld_1d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 516
} else { 
# 517
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 518
__suld_1d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 519
}  }  }  
# 520
(*retVal) = tmp; 
# 521
} 
#endif
# 523 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 524
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 536
::exit(___);}
#if 0
# 524
{ 
# 525
uchar4 tmp; 
# 526
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 527
__suld_1d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 528
} else { 
# 529
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 530
__suld_1d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 531
} else { 
# 532
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 533
__suld_1d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
# 534
}  }  }  
# 535
(*retVal) = tmp; 
# 536
} 
#endif
# 538 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 539
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 551
::exit(___);}
#if 0
# 539
{ 
# 540
short4 tmp; 
# 541
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 542
__suld_1d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 543
} else { 
# 544
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 545
__suld_1d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 546
} else { 
# 547
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 548
__suld_1d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 549
}  }  }  
# 550
(*retVal) = tmp; 
# 551
} 
#endif
# 553 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 554
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 566
::exit(___);}
#if 0
# 554
{ 
# 555
ushort4 tmp; 
# 556
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 557
__suld_1d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 558
} else { 
# 559
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 560
__suld_1d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 561
} else { 
# 562
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 563
__suld_1d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
# 564
}  }  }  
# 565
(*retVal) = tmp; 
# 566
} 
#endif
# 568 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 569
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 581
::exit(___);}
#if 0
# 569
{ 
# 570
int4 tmp; 
# 571
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 572
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 573
} else { 
# 574
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 575
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 576
} else { 
# 577
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 578
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 579
}  }  }  
# 580
(*retVal) = tmp; 
# 581
} 
#endif
# 583 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 584
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 596
::exit(___);}
#if 0
# 584
{ 
# 585
uint4 tmp; 
# 586
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 587
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 588
} else { 
# 589
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 590
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 591
} else { 
# 592
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 593
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 594
}  }  }  
# 595
(*retVal) = tmp; 
# 596
} 
#endif
# 598 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 599
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 611
::exit(___);}
#if 0
# 599
{ 
# 600
float4 tmp; 
# 601
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 602
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 603
} else { 
# 604
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 605
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 606
} else { 
# 607
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 608
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
# 609
}  }  }  
# 610
(*retVal) = tmp; 
# 611
} 
#endif
# 619 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 620
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 632
::exit(___);}
#if 0
# 620
{ 
# 621
char tmp; 
# 622
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 623
__suld_2d_i8_trap(&tmp, surfObject, x, y); 
# 624
} else { 
# 625
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 626
__suld_2d_i8_clamp(&tmp, surfObject, x, y); 
# 627
} else { 
# 628
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 629
__suld_2d_i8_zero(&tmp, surfObject, x, y); 
# 630
}  }  }  
# 631
(*retVal) = ((char)tmp); 
# 632
} 
#endif
# 634 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 635
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 647
::exit(___);}
#if 0
# 635
{ 
# 636
signed char tmp; 
# 637
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 638
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
# 639
} else { 
# 640
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 641
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
# 642
} else { 
# 643
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 644
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
# 645
}  }  }  
# 646
(*retVal) = tmp; 
# 647
} 
#endif
# 649 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 650
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 662
::exit(___);}
#if 0
# 650
{ 
# 651
char tmp; 
# 652
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 653
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
# 654
} else { 
# 655
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 656
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
# 657
} else { 
# 658
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 659
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
# 660
}  }  }  
# 661
(*retVal) = make_char1(tmp); 
# 662
} 
#endif
# 664 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 665
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 677
::exit(___);}
#if 0
# 665
{ 
# 666
unsigned char tmp; 
# 667
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 668
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
# 669
} else { 
# 670
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 671
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
# 672
} else { 
# 673
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 674
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
# 675
}  }  }  
# 676
(*retVal) = tmp; 
# 677
} 
#endif
# 679 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 680
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 692
::exit(___);}
#if 0
# 680
{ 
# 681
unsigned char tmp; 
# 682
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 683
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
# 684
} else { 
# 685
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 686
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
# 687
} else { 
# 688
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 689
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
# 690
}  }  }  
# 691
(*retVal) = make_uchar1(tmp); 
# 692
} 
#endif
# 694 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 695
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 707
::exit(___);}
#if 0
# 695
{ 
# 696
short tmp; 
# 697
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 698
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
# 699
} else { 
# 700
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 701
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
# 702
} else { 
# 703
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 704
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
# 705
}  }  }  
# 706
(*retVal) = tmp; 
# 707
} 
#endif
# 709 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 710
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 722
::exit(___);}
#if 0
# 710
{ 
# 711
short tmp; 
# 712
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 713
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
# 714
} else { 
# 715
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 716
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
# 717
} else { 
# 718
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 719
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
# 720
}  }  }  
# 721
(*retVal) = make_short1(tmp); 
# 722
} 
#endif
# 724 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 725
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 737
::exit(___);}
#if 0
# 725
{ 
# 726
unsigned short tmp; 
# 727
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 728
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
# 729
} else { 
# 730
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 731
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
# 732
} else { 
# 733
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 734
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
# 735
}  }  }  
# 736
(*retVal) = tmp; 
# 737
} 
#endif
# 739 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 740
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 752
::exit(___);}
#if 0
# 740
{ 
# 741
unsigned short tmp; 
# 742
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 743
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
# 744
} else { 
# 745
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 746
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
# 747
} else { 
# 748
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 749
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
# 750
}  }  }  
# 751
(*retVal) = make_ushort1(tmp); 
# 752
} 
#endif
# 754 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 755
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 767
::exit(___);}
#if 0
# 755
{ 
# 756
int tmp; 
# 757
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 758
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 759
} else { 
# 760
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 761
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 762
} else { 
# 763
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 764
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 765
}  }  }  
# 766
(*retVal) = tmp; 
# 767
} 
#endif
# 769 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 770
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 782
::exit(___);}
#if 0
# 770
{ 
# 771
int tmp; 
# 772
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 773
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 774
} else { 
# 775
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 776
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 777
} else { 
# 778
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 779
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 780
}  }  }  
# 781
(*retVal) = make_int1(tmp); 
# 782
} 
#endif
# 784 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 785
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 797
::exit(___);}
#if 0
# 785
{ 
# 786
unsigned tmp; 
# 787
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 788
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 789
} else { 
# 790
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 791
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 792
} else { 
# 793
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 794
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 795
}  }  }  
# 796
(*retVal) = tmp; 
# 797
} 
#endif
# 799 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 800
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 812
::exit(___);}
#if 0
# 800
{ 
# 801
unsigned tmp; 
# 802
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 803
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 804
} else { 
# 805
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 806
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 807
} else { 
# 808
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 809
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 810
}  }  }  
# 811
(*retVal) = make_uint1(tmp); 
# 812
} 
#endif
# 814 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 815
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 827
::exit(___);}
#if 0
# 815
{ 
# 816
long long tmp; 
# 817
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 818
__suld_2d_i64_trap((long long *)(&tmp), surfObject, x, y); 
# 819
} else { 
# 820
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 821
__suld_2d_i64_clamp((long long *)(&tmp), surfObject, x, y); 
# 822
} else { 
# 823
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 824
__suld_2d_i64_zero((long long *)(&tmp), surfObject, x, y); 
# 825
}  }  }  
# 826
(*retVal) = tmp; 
# 827
} 
#endif
# 829 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 830
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 842
::exit(___);}
#if 0
# 830
{ 
# 831
long long tmp; 
# 832
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 833
__suld_2d_i64_trap((long long *)(&tmp), surfObject, x, y); 
# 834
} else { 
# 835
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 836
__suld_2d_i64_clamp((long long *)(&tmp), surfObject, x, y); 
# 837
} else { 
# 838
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 839
__suld_2d_i64_zero((long long *)(&tmp), surfObject, x, y); 
# 840
}  }  }  
# 841
(*retVal) = make_longlong1(tmp); 
# 842
} 
#endif
# 844 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 845
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 857
::exit(___);}
#if 0
# 845
{ 
# 846
unsigned long long tmp; 
# 847
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 848
__suld_2d_i64_trap((long long *)(&tmp), surfObject, x, y); 
# 849
} else { 
# 850
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 851
__suld_2d_i64_clamp((long long *)(&tmp), surfObject, x, y); 
# 852
} else { 
# 853
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 854
__suld_2d_i64_zero((long long *)(&tmp), surfObject, x, y); 
# 855
}  }  }  
# 856
(*retVal) = tmp; 
# 857
} 
#endif
# 859 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 860
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 872
::exit(___);}
#if 0
# 860
{ 
# 861
unsigned long long tmp; 
# 862
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 863
__suld_2d_i64_trap((long long *)(&tmp), surfObject, x, y); 
# 864
} else { 
# 865
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 866
__suld_2d_i64_clamp((long long *)(&tmp), surfObject, x, y); 
# 867
} else { 
# 868
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 869
__suld_2d_i64_zero((long long *)(&tmp), surfObject, x, y); 
# 870
}  }  }  
# 871
(*retVal) = make_ulonglong1(tmp); 
# 872
} 
#endif
# 874 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 875
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 887
::exit(___);}
#if 0
# 875
{ 
# 876
float tmp; 
# 877
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 878
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 879
} else { 
# 880
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 881
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 882
} else { 
# 883
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 884
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 885
}  }  }  
# 886
(*retVal) = tmp; 
# 887
} 
#endif
# 889 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 890
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 902
::exit(___);}
#if 0
# 890
{ 
# 891
float tmp; 
# 892
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 893
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
# 894
} else { 
# 895
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 896
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
# 897
} else { 
# 898
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 899
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
# 900
}  }  }  
# 901
(*retVal) = make_float1(tmp); 
# 902
} 
#endif
# 910 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 911
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 923
::exit(___);}
#if 0
# 911
{ 
# 912
char2 tmp; 
# 913
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 914
__suld_2d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 915
} else { 
# 916
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 917
__suld_2d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 918
} else { 
# 919
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 920
__suld_2d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 921
}  }  }  
# 922
(*retVal) = tmp; 
# 923
} 
#endif
# 925 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 926
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 938
::exit(___);}
#if 0
# 926
{ 
# 927
uchar2 tmp; 
# 928
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 929
__suld_2d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 930
} else { 
# 931
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 932
__suld_2d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 933
} else { 
# 934
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 935
__suld_2d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
# 936
}  }  }  
# 937
(*retVal) = tmp; 
# 938
} 
#endif
# 940 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 941
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 953
::exit(___);}
#if 0
# 941
{ 
# 942
short2 tmp; 
# 943
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 944
__suld_2d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 945
} else { 
# 946
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 947
__suld_2d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 948
} else { 
# 949
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 950
__suld_2d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 951
}  }  }  
# 952
(*retVal) = tmp; 
# 953
} 
#endif
# 955 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 956
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 968
::exit(___);}
#if 0
# 956
{ 
# 957
ushort2 tmp; 
# 958
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 959
__suld_2d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 960
} else { 
# 961
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 962
__suld_2d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 963
} else { 
# 964
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 965
__suld_2d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
# 966
}  }  }  
# 967
(*retVal) = tmp; 
# 968
} 
#endif
# 970 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 971
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 983
::exit(___);}
#if 0
# 971
{ 
# 972
int2 tmp; 
# 973
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 974
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 975
} else { 
# 976
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 977
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 978
} else { 
# 979
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 980
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 981
}  }  }  
# 982
(*retVal) = tmp; 
# 983
} 
#endif
# 985 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 986
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 998
::exit(___);}
#if 0
# 986
{ 
# 987
uint2 tmp; 
# 988
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 989
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 990
} else { 
# 991
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 992
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 993
} else { 
# 994
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 995
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 996
}  }  }  
# 997
(*retVal) = tmp; 
# 998
} 
#endif
# 1000 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1001
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1013
::exit(___);}
#if 0
# 1001
{ 
# 1002
longlong2 tmp; 
# 1003
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1004
__suld_2d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1005
} else { 
# 1006
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1007
__suld_2d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1008
} else { 
# 1009
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1010
__suld_2d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1011
}  }  }  
# 1012
(*retVal) = tmp; 
# 1013
} 
#endif
# 1015 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1016
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1028
::exit(___);}
#if 0
# 1016
{ 
# 1017
ulonglong2 tmp; 
# 1018
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1019
__suld_2d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1020
} else { 
# 1021
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1022
__suld_2d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1023
} else { 
# 1024
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1025
__suld_2d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y); 
# 1026
}  }  }  
# 1027
(*retVal) = tmp; 
# 1028
} 
#endif
# 1030 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1031
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1043
::exit(___);}
#if 0
# 1031
{ 
# 1032
float2 tmp; 
# 1033
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1034
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 1035
} else { 
# 1036
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1037
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 1038
} else { 
# 1039
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1040
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
# 1041
}  }  }  
# 1042
(*retVal) = tmp; 
# 1043
} 
#endif
# 1051 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1052
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1064
::exit(___);}
#if 0
# 1052
{ 
# 1053
char4 tmp; 
# 1054
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1055
__suld_2d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1056
} else { 
# 1057
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1058
__suld_2d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1059
} else { 
# 1060
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1061
__suld_2d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1062
}  }  }  
# 1063
(*retVal) = tmp; 
# 1064
} 
#endif
# 1066 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1067
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1079
::exit(___);}
#if 0
# 1067
{ 
# 1068
uchar4 tmp; 
# 1069
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1070
__suld_2d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1071
} else { 
# 1072
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1073
__suld_2d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1074
} else { 
# 1075
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1076
__suld_2d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
# 1077
}  }  }  
# 1078
(*retVal) = tmp; 
# 1079
} 
#endif
# 1081 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1082
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1094
::exit(___);}
#if 0
# 1082
{ 
# 1083
short4 tmp; 
# 1084
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1085
__suld_2d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1086
} else { 
# 1087
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1088
__suld_2d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1089
} else { 
# 1090
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1091
__suld_2d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1092
}  }  }  
# 1093
(*retVal) = tmp; 
# 1094
} 
#endif
# 1096 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1097
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1109
::exit(___);}
#if 0
# 1097
{ 
# 1098
ushort4 tmp; 
# 1099
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1100
__suld_2d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1101
} else { 
# 1102
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1103
__suld_2d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1104
} else { 
# 1105
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1106
__suld_2d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
# 1107
}  }  }  
# 1108
(*retVal) = tmp; 
# 1109
} 
#endif
# 1111 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1112
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1124
::exit(___);}
#if 0
# 1112
{ 
# 1113
int4 tmp; 
# 1114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1115
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1116
} else { 
# 1117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1118
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1119
} else { 
# 1120
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1121
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1122
}  }  }  
# 1123
(*retVal) = tmp; 
# 1124
} 
#endif
# 1126 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1127
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1139
::exit(___);}
#if 0
# 1127
{ 
# 1128
uint4 tmp; 
# 1129
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1130
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1131
} else { 
# 1132
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1133
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1134
} else { 
# 1135
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1136
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1137
}  }  }  
# 1138
(*retVal) = tmp; 
# 1139
} 
#endif
# 1141 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 1142
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1154
::exit(___);}
#if 0
# 1142
{ 
# 1143
float4 tmp; 
# 1144
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1145
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1146
} else { 
# 1147
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1148
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1149
} else { 
# 1150
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1151
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
# 1152
}  }  }  
# 1153
(*retVal) = tmp; 
# 1154
} 
#endif
# 1162 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1163
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1175
::exit(___);}
#if 0
# 1163
{ 
# 1164
char tmp; 
# 1165
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1166
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
# 1167
} else { 
# 1168
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1169
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
# 1170
} else { 
# 1171
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1172
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
# 1173
}  }  }  
# 1174
(*retVal) = tmp; 
# 1175
} 
#endif
# 1177 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1178
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1190
::exit(___);}
#if 0
# 1178
{ 
# 1179
signed char tmp; 
# 1180
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1181
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
# 1182
} else { 
# 1183
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1184
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
# 1185
} else { 
# 1186
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1187
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
# 1188
}  }  }  
# 1189
(*retVal) = tmp; 
# 1190
} 
#endif
# 1192 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1193
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1205
::exit(___);}
#if 0
# 1193
{ 
# 1194
char tmp; 
# 1195
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1196
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
# 1197
} else { 
# 1198
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1199
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
# 1200
} else { 
# 1201
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1202
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
# 1203
}  }  }  
# 1204
(*retVal) = make_char1(tmp); 
# 1205
} 
#endif
# 1207 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1208
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1220
::exit(___);}
#if 0
# 1208
{ 
# 1209
unsigned char tmp; 
# 1210
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1211
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
# 1212
} else { 
# 1213
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1214
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
# 1215
} else { 
# 1216
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1217
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
# 1218
}  }  }  
# 1219
(*retVal) = tmp; 
# 1220
} 
#endif
# 1222 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1223
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1235
::exit(___);}
#if 0
# 1223
{ 
# 1224
unsigned char tmp; 
# 1225
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1226
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
# 1227
} else { 
# 1228
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1229
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
# 1230
} else { 
# 1231
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1232
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
# 1233
}  }  }  
# 1234
(*retVal) = make_uchar1(tmp); 
# 1235
} 
#endif
# 1237 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1238
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1250
::exit(___);}
#if 0
# 1238
{ 
# 1239
short tmp; 
# 1240
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1241
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
# 1242
} else { 
# 1243
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1244
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
# 1245
} else { 
# 1246
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1247
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
# 1248
}  }  }  
# 1249
(*retVal) = tmp; 
# 1250
} 
#endif
# 1252 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1253
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1265
::exit(___);}
#if 0
# 1253
{ 
# 1254
short tmp; 
# 1255
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1256
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
# 1257
} else { 
# 1258
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1259
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
# 1260
} else { 
# 1261
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1262
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
# 1263
}  }  }  
# 1264
(*retVal) = make_short1(tmp); 
# 1265
} 
#endif
# 1267 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1268
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1280
::exit(___);}
#if 0
# 1268
{ 
# 1269
unsigned short tmp; 
# 1270
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1271
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
# 1272
} else { 
# 1273
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1274
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
# 1275
} else { 
# 1276
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1277
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
# 1278
}  }  }  
# 1279
(*retVal) = tmp; 
# 1280
} 
#endif
# 1282 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1283
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1295
::exit(___);}
#if 0
# 1283
{ 
# 1284
unsigned short tmp; 
# 1285
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1286
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
# 1287
} else { 
# 1288
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1289
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
# 1290
} else { 
# 1291
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1292
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
# 1293
}  }  }  
# 1294
(*retVal) = make_ushort1(tmp); 
# 1295
} 
#endif
# 1297 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1298
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1310
::exit(___);}
#if 0
# 1298
{ 
# 1299
int tmp; 
# 1300
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1301
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1302
} else { 
# 1303
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1304
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1305
} else { 
# 1306
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1307
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1308
}  }  }  
# 1309
(*retVal) = tmp; 
# 1310
} 
#endif
# 1312 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1313
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1325
::exit(___);}
#if 0
# 1313
{ 
# 1314
int tmp; 
# 1315
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1316
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1317
} else { 
# 1318
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1319
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1320
} else { 
# 1321
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1322
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1323
}  }  }  
# 1324
(*retVal) = make_int1(tmp); 
# 1325
} 
#endif
# 1327 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1328
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1340
::exit(___);}
#if 0
# 1328
{ 
# 1329
unsigned tmp; 
# 1330
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1331
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1332
} else { 
# 1333
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1334
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1335
} else { 
# 1336
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1337
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1338
}  }  }  
# 1339
(*retVal) = tmp; 
# 1340
} 
#endif
# 1342 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1343
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1355
::exit(___);}
#if 0
# 1343
{ 
# 1344
unsigned tmp; 
# 1345
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1346
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1347
} else { 
# 1348
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1349
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1350
} else { 
# 1351
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1352
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1353
}  }  }  
# 1354
(*retVal) = make_uint1(tmp); 
# 1355
} 
#endif
# 1357 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1358
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1370
::exit(___);}
#if 0
# 1358
{ 
# 1359
long long tmp; 
# 1360
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1361
__suld_3d_i64_trap((long long *)(&tmp), surfObject, x, y, z); 
# 1362
} else { 
# 1363
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1364
__suld_3d_i64_clamp((long long *)(&tmp), surfObject, x, y, z); 
# 1365
} else { 
# 1366
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1367
__suld_3d_i64_zero((long long *)(&tmp), surfObject, x, y, z); 
# 1368
}  }  }  
# 1369
(*retVal) = tmp; 
# 1370
} 
#endif
# 1372 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1373
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1385
::exit(___);}
#if 0
# 1373
{ 
# 1374
long long tmp; 
# 1375
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1376
__suld_3d_i64_trap((long long *)(&tmp), surfObject, x, y, z); 
# 1377
} else { 
# 1378
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1379
__suld_3d_i64_clamp((long long *)(&tmp), surfObject, x, y, z); 
# 1380
} else { 
# 1381
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1382
__suld_3d_i64_zero((long long *)(&tmp), surfObject, x, y, z); 
# 1383
}  }  }  
# 1384
(*retVal) = make_longlong1(tmp); 
# 1385
} 
#endif
# 1387 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1388
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1400
::exit(___);}
#if 0
# 1388
{ 
# 1389
unsigned long long tmp; 
# 1390
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1391
__suld_3d_i64_trap((long long *)(&tmp), surfObject, x, y, z); 
# 1392
} else { 
# 1393
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1394
__suld_3d_i64_clamp((long long *)(&tmp), surfObject, x, y, z); 
# 1395
} else { 
# 1396
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1397
__suld_3d_i64_zero((long long *)(&tmp), surfObject, x, y, z); 
# 1398
}  }  }  
# 1399
(*retVal) = tmp; 
# 1400
} 
#endif
# 1402 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1403
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1415
::exit(___);}
#if 0
# 1403
{ 
# 1404
unsigned long long tmp; 
# 1405
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1406
__suld_3d_i64_trap((long long *)(&tmp), surfObject, x, y, z); 
# 1407
} else { 
# 1408
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1409
__suld_3d_i64_clamp((long long *)(&tmp), surfObject, x, y, z); 
# 1410
} else { 
# 1411
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1412
__suld_3d_i64_zero((long long *)(&tmp), surfObject, x, y, z); 
# 1413
}  }  }  
# 1414
(*retVal) = make_ulonglong1(tmp); 
# 1415
} 
#endif
# 1417 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1418
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1430
::exit(___);}
#if 0
# 1418
{ 
# 1419
float tmp; 
# 1420
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1421
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1422
} else { 
# 1423
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1424
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1425
} else { 
# 1426
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1427
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1428
}  }  }  
# 1429
(*retVal) = tmp; 
# 1430
} 
#endif
# 1432 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1433
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1445
::exit(___);}
#if 0
# 1433
{ 
# 1434
float tmp; 
# 1435
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1436
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
# 1437
} else { 
# 1438
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1439
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
# 1440
} else { 
# 1441
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1442
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
# 1443
}  }  }  
# 1444
(*retVal) = make_float1(tmp); 
# 1445
} 
#endif
# 1453 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1454
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1466
::exit(___);}
#if 0
# 1454
{ 
# 1455
char2 tmp; 
# 1456
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1457
__suld_3d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1458
} else { 
# 1459
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1460
__suld_3d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1461
} else { 
# 1462
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1463
__suld_3d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1464
}  }  }  
# 1465
(*retVal) = tmp; 
# 1466
} 
#endif
# 1468 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1469
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1481
::exit(___);}
#if 0
# 1469
{ 
# 1470
uchar2 tmp; 
# 1471
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1472
__suld_3d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1473
} else { 
# 1474
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1475
__suld_3d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1476
} else { 
# 1477
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1478
__suld_3d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
# 1479
}  }  }  
# 1480
(*retVal) = tmp; 
# 1481
} 
#endif
# 1483 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1484
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1496
::exit(___);}
#if 0
# 1484
{ 
# 1485
short2 tmp; 
# 1486
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1487
__suld_3d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1488
} else { 
# 1489
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1490
__suld_3d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1491
} else { 
# 1492
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1493
__suld_3d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1494
}  }  }  
# 1495
(*retVal) = tmp; 
# 1496
} 
#endif
# 1498 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1499
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1511
::exit(___);}
#if 0
# 1499
{ 
# 1500
ushort2 tmp; 
# 1501
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1502
__suld_3d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1503
} else { 
# 1504
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1505
__suld_3d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1506
} else { 
# 1507
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1508
__suld_3d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
# 1509
}  }  }  
# 1510
(*retVal) = tmp; 
# 1511
} 
#endif
# 1513 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1514
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1526
::exit(___);}
#if 0
# 1514
{ 
# 1515
int2 tmp; 
# 1516
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1517
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1518
} else { 
# 1519
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1520
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1521
} else { 
# 1522
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1523
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1524
}  }  }  
# 1525
(*retVal) = tmp; 
# 1526
} 
#endif
# 1528 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1529
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1541
::exit(___);}
#if 0
# 1529
{ 
# 1530
uint2 tmp; 
# 1531
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1532
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1533
} else { 
# 1534
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1535
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1536
} else { 
# 1537
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1538
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1539
}  }  }  
# 1540
(*retVal) = tmp; 
# 1541
} 
#endif
# 1543 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1544
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1556
::exit(___);}
#if 0
# 1544
{ 
# 1545
longlong2 tmp; 
# 1546
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1547
__suld_3d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1548
} else { 
# 1549
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1550
__suld_3d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1551
} else { 
# 1552
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1553
__suld_3d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1554
}  }  }  
# 1555
(*retVal) = tmp; 
# 1556
} 
#endif
# 1558 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1559
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1571
::exit(___);}
#if 0
# 1559
{ 
# 1560
ulonglong2 tmp; 
# 1561
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1562
__suld_3d_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1563
} else { 
# 1564
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1565
__suld_3d_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1566
} else { 
# 1567
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1568
__suld_3d_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, x, y, z); 
# 1569
}  }  }  
# 1570
(*retVal) = tmp; 
# 1571
} 
#endif
# 1573 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1574
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1586
::exit(___);}
#if 0
# 1574
{ 
# 1575
float2 tmp; 
# 1576
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1577
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1578
} else { 
# 1579
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1580
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1581
} else { 
# 1582
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1583
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
# 1584
}  }  }  
# 1585
(*retVal) = tmp; 
# 1586
} 
#endif
# 1594 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1595
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1607
::exit(___);}
#if 0
# 1595
{ 
# 1596
char4 tmp; 
# 1597
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1598
__suld_3d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1599
} else { 
# 1600
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1601
__suld_3d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1602
} else { 
# 1603
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1604
__suld_3d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1605
}  }  }  
# 1606
(*retVal) = tmp; 
# 1607
} 
#endif
# 1609 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1610
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1622
::exit(___);}
#if 0
# 1610
{ 
# 1611
uchar4 tmp; 
# 1612
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1613
__suld_3d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1614
} else { 
# 1615
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1616
__suld_3d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1617
} else { 
# 1618
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1619
__suld_3d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
# 1620
}  }  }  
# 1621
(*retVal) = tmp; 
# 1622
} 
#endif
# 1624 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1625
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1637
::exit(___);}
#if 0
# 1625
{ 
# 1626
short4 tmp; 
# 1627
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1628
__suld_3d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1629
} else { 
# 1630
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1631
__suld_3d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1632
} else { 
# 1633
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1634
__suld_3d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1635
}  }  }  
# 1636
(*retVal) = tmp; 
# 1637
} 
#endif
# 1639 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1640
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1652
::exit(___);}
#if 0
# 1640
{ 
# 1641
ushort4 tmp; 
# 1642
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1643
__suld_3d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1644
} else { 
# 1645
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1646
__suld_3d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1647
} else { 
# 1648
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1649
__suld_3d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
# 1650
}  }  }  
# 1651
(*retVal) = tmp; 
# 1652
} 
#endif
# 1654 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1655
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1667
::exit(___);}
#if 0
# 1655
{ 
# 1656
int4 tmp; 
# 1657
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1658
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1659
} else { 
# 1660
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1661
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1662
} else { 
# 1663
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1664
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1665
}  }  }  
# 1666
(*retVal) = tmp; 
# 1667
} 
#endif
# 1669 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1670
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1682
::exit(___);}
#if 0
# 1670
{ 
# 1671
uint4 tmp; 
# 1672
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1673
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1674
} else { 
# 1675
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1676
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1677
} else { 
# 1678
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1679
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1680
}  }  }  
# 1681
(*retVal) = tmp; 
# 1682
} 
#endif
# 1684 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 1685
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1697
::exit(___);}
#if 0
# 1685
{ 
# 1686
float4 tmp; 
# 1687
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1688
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1689
} else { 
# 1690
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1691
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1692
} else { 
# 1693
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1694
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
# 1695
}  }  }  
# 1696
(*retVal) = tmp; 
# 1697
} 
#endif
# 1705 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1706
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1718
::exit(___);}
#if 0
# 1706
{ 
# 1707
char tmp; 
# 1708
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1709
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
# 1710
} else { 
# 1711
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1712
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
# 1713
} else { 
# 1714
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1715
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
# 1716
}  }  }  
# 1717
(*retVal) = tmp; 
# 1718
} 
#endif
# 1720 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1721
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1733
::exit(___);}
#if 0
# 1721
{ 
# 1722
signed char tmp; 
# 1723
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1724
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
# 1725
} else { 
# 1726
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1727
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
# 1728
} else { 
# 1729
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1730
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
# 1731
}  }  }  
# 1732
(*retVal) = tmp; 
# 1733
} 
#endif
# 1735 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1736
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1748
::exit(___);}
#if 0
# 1736
{ 
# 1737
char tmp; 
# 1738
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1739
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
# 1740
} else { 
# 1741
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1742
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
# 1743
} else { 
# 1744
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1745
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
# 1746
}  }  }  
# 1747
(*retVal) = make_char1(tmp); 
# 1748
} 
#endif
# 1750 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1751
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1763
::exit(___);}
#if 0
# 1751
{ 
# 1752
unsigned char tmp; 
# 1753
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1754
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
# 1755
} else { 
# 1756
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1757
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
# 1758
} else { 
# 1759
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1760
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
# 1761
}  }  }  
# 1762
(*retVal) = tmp; 
# 1763
} 
#endif
# 1765 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1766
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1778
::exit(___);}
#if 0
# 1766
{ 
# 1767
unsigned char tmp; 
# 1768
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1769
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
# 1770
} else { 
# 1771
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1772
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
# 1773
} else { 
# 1774
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1775
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
# 1776
}  }  }  
# 1777
(*retVal) = make_uchar1(tmp); 
# 1778
} 
#endif
# 1780 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1781
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1793
::exit(___);}
#if 0
# 1781
{ 
# 1782
short tmp; 
# 1783
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1784
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
# 1785
} else { 
# 1786
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1787
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
# 1788
} else { 
# 1789
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1790
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
# 1791
}  }  }  
# 1792
(*retVal) = tmp; 
# 1793
} 
#endif
# 1795 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1796
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1808
::exit(___);}
#if 0
# 1796
{ 
# 1797
short tmp; 
# 1798
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1799
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
# 1800
} else { 
# 1801
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1802
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
# 1803
} else { 
# 1804
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1805
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
# 1806
}  }  }  
# 1807
(*retVal) = make_short1(tmp); 
# 1808
} 
#endif
# 1810 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1811
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1823
::exit(___);}
#if 0
# 1811
{ 
# 1812
unsigned short tmp; 
# 1813
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1814
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
# 1815
} else { 
# 1816
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1817
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
# 1818
} else { 
# 1819
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1820
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
# 1821
}  }  }  
# 1822
(*retVal) = tmp; 
# 1823
} 
#endif
# 1825 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1826
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1838
::exit(___);}
#if 0
# 1826
{ 
# 1827
unsigned short tmp; 
# 1828
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1829
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
# 1830
} else { 
# 1831
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1832
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
# 1833
} else { 
# 1834
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1835
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
# 1836
}  }  }  
# 1837
(*retVal) = make_ushort1(tmp); 
# 1838
} 
#endif
# 1840 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1841
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1853
::exit(___);}
#if 0
# 1841
{ 
# 1842
int tmp; 
# 1843
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1844
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1845
} else { 
# 1846
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1847
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1848
} else { 
# 1849
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1850
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1851
}  }  }  
# 1852
(*retVal) = tmp; 
# 1853
} 
#endif
# 1855 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1856
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1868
::exit(___);}
#if 0
# 1856
{ 
# 1857
int tmp; 
# 1858
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1859
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1860
} else { 
# 1861
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1862
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1863
} else { 
# 1864
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1865
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1866
}  }  }  
# 1867
(*retVal) = make_int1(tmp); 
# 1868
} 
#endif
# 1870 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1871
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1883
::exit(___);}
#if 0
# 1871
{ 
# 1872
unsigned tmp; 
# 1873
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1874
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1875
} else { 
# 1876
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1877
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1878
} else { 
# 1879
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1880
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1881
}  }  }  
# 1882
(*retVal) = tmp; 
# 1883
} 
#endif
# 1885 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1886
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1898
::exit(___);}
#if 0
# 1886
{ 
# 1887
unsigned tmp; 
# 1888
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1889
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1890
} else { 
# 1891
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1892
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1893
} else { 
# 1894
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1895
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1896
}  }  }  
# 1897
(*retVal) = make_uint1(tmp); 
# 1898
} 
#endif
# 1900 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1901
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1913
::exit(___);}
#if 0
# 1901
{ 
# 1902
long long tmp; 
# 1903
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1904
__suld_1d_array_i64_trap((long long *)(&tmp), surfObject, layer, x); 
# 1905
} else { 
# 1906
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1907
__suld_1d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x); 
# 1908
} else { 
# 1909
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1910
__suld_1d_array_i64_zero((long long *)(&tmp), surfObject, layer, x); 
# 1911
}  }  }  
# 1912
(*retVal) = tmp; 
# 1913
} 
#endif
# 1915 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1916
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1928
::exit(___);}
#if 0
# 1916
{ 
# 1917
long long tmp; 
# 1918
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1919
__suld_1d_array_i64_trap((long long *)(&tmp), surfObject, layer, x); 
# 1920
} else { 
# 1921
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1922
__suld_1d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x); 
# 1923
} else { 
# 1924
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1925
__suld_1d_array_i64_zero((long long *)(&tmp), surfObject, layer, x); 
# 1926
}  }  }  
# 1927
(*retVal) = make_longlong1(tmp); 
# 1928
} 
#endif
# 1930 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1931
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1943
::exit(___);}
#if 0
# 1931
{ 
# 1932
unsigned long long tmp; 
# 1933
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1934
__suld_1d_array_i64_trap((long long *)(&tmp), surfObject, layer, x); 
# 1935
} else { 
# 1936
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1937
__suld_1d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x); 
# 1938
} else { 
# 1939
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1940
__suld_1d_array_i64_zero((long long *)(&tmp), surfObject, layer, x); 
# 1941
}  }  }  
# 1942
(*retVal) = tmp; 
# 1943
} 
#endif
# 1945 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1946
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1958
::exit(___);}
#if 0
# 1946
{ 
# 1947
unsigned long long tmp; 
# 1948
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1949
__suld_1d_array_i64_trap((long long *)(&tmp), surfObject, layer, x); 
# 1950
} else { 
# 1951
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1952
__suld_1d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x); 
# 1953
} else { 
# 1954
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1955
__suld_1d_array_i64_zero((long long *)(&tmp), surfObject, layer, x); 
# 1956
}  }  }  
# 1957
(*retVal) = make_ulonglong1(tmp); 
# 1958
} 
#endif
# 1960 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1961
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1973
::exit(___);}
#if 0
# 1961
{ 
# 1962
float tmp; 
# 1963
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1964
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1965
} else { 
# 1966
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1967
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1968
} else { 
# 1969
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1970
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1971
}  }  }  
# 1972
(*retVal) = tmp; 
# 1973
} 
#endif
# 1975 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1976
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1988
::exit(___);}
#if 0
# 1976
{ 
# 1977
float tmp; 
# 1978
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1979
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
# 1980
} else { 
# 1981
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1982
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
# 1983
} else { 
# 1984
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1985
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
# 1986
}  }  }  
# 1987
(*retVal) = make_float1(tmp); 
# 1988
} 
#endif
# 1996 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 1997
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2009
::exit(___);}
#if 0
# 1997
{ 
# 1998
char2 tmp; 
# 1999
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2000
__suld_1d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2001
} else { 
# 2002
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2003
__suld_1d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2004
} else { 
# 2005
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2006
__suld_1d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2007
}  }  }  
# 2008
(*retVal) = tmp; 
# 2009
} 
#endif
# 2011 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2012
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2024
::exit(___);}
#if 0
# 2012
{ 
# 2013
uchar2 tmp; 
# 2014
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2015
__suld_1d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2016
} else { 
# 2017
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2018
__suld_1d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2019
} else { 
# 2020
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2021
__suld_1d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
# 2022
}  }  }  
# 2023
(*retVal) = tmp; 
# 2024
} 
#endif
# 2026 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2027
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2039
::exit(___);}
#if 0
# 2027
{ 
# 2028
short2 tmp; 
# 2029
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2030
__suld_1d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2031
} else { 
# 2032
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2033
__suld_1d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2034
} else { 
# 2035
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2036
__suld_1d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2037
}  }  }  
# 2038
(*retVal) = tmp; 
# 2039
} 
#endif
# 2041 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2042
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2054
::exit(___);}
#if 0
# 2042
{ 
# 2043
ushort2 tmp; 
# 2044
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2045
__suld_1d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2046
} else { 
# 2047
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2048
__suld_1d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2049
} else { 
# 2050
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2051
__suld_1d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
# 2052
}  }  }  
# 2053
(*retVal) = tmp; 
# 2054
} 
#endif
# 2056 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2057
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2069
::exit(___);}
#if 0
# 2057
{ 
# 2058
int2 tmp; 
# 2059
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2060
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2061
} else { 
# 2062
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2063
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2064
} else { 
# 2065
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2066
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2067
}  }  }  
# 2068
(*retVal) = tmp; 
# 2069
} 
#endif
# 2071 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2072
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2084
::exit(___);}
#if 0
# 2072
{ 
# 2073
uint2 tmp; 
# 2074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2075
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2076
} else { 
# 2077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2078
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2079
} else { 
# 2080
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2081
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2082
}  }  }  
# 2083
(*retVal) = tmp; 
# 2084
} 
#endif
# 2086 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2087
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2099
::exit(___);}
#if 0
# 2087
{ 
# 2088
longlong2 tmp; 
# 2089
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2090
__suld_1d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2091
} else { 
# 2092
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2093
__suld_1d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2094
} else { 
# 2095
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2096
__suld_1d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2097
}  }  }  
# 2098
(*retVal) = tmp; 
# 2099
} 
#endif
# 2101 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2102
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2114
::exit(___);}
#if 0
# 2102
{ 
# 2103
ulonglong2 tmp; 
# 2104
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2105
__suld_1d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2106
} else { 
# 2107
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2108
__suld_1d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2109
} else { 
# 2110
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2111
__suld_1d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x); 
# 2112
}  }  }  
# 2113
(*retVal) = tmp; 
# 2114
} 
#endif
# 2116 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2117
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2129
::exit(___);}
#if 0
# 2117
{ 
# 2118
float2 tmp; 
# 2119
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2120
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2121
} else { 
# 2122
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2123
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2124
} else { 
# 2125
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2126
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
# 2127
}  }  }  
# 2128
(*retVal) = tmp; 
# 2129
} 
#endif
# 2137 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2138
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2150
::exit(___);}
#if 0
# 2138
{ 
# 2139
char4 tmp; 
# 2140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2141
__suld_1d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2142
} else { 
# 2143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2144
__suld_1d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2145
} else { 
# 2146
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2147
__suld_1d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2148
}  }  }  
# 2149
(*retVal) = tmp; 
# 2150
} 
#endif
# 2152 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2153
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2165
::exit(___);}
#if 0
# 2153
{ 
# 2154
uchar4 tmp; 
# 2155
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2156
__suld_1d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2157
} else { 
# 2158
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2159
__suld_1d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2160
} else { 
# 2161
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2162
__suld_1d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
# 2163
}  }  }  
# 2164
(*retVal) = tmp; 
# 2165
} 
#endif
# 2167 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2168
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2180
::exit(___);}
#if 0
# 2168
{ 
# 2169
short4 tmp; 
# 2170
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2171
__suld_1d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2172
} else { 
# 2173
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2174
__suld_1d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2175
} else { 
# 2176
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2177
__suld_1d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2178
}  }  }  
# 2179
(*retVal) = tmp; 
# 2180
} 
#endif
# 2182 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2183
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2195
::exit(___);}
#if 0
# 2183
{ 
# 2184
ushort4 tmp; 
# 2185
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2186
__suld_1d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2187
} else { 
# 2188
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2189
__suld_1d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2190
} else { 
# 2191
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2192
__suld_1d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
# 2193
}  }  }  
# 2194
(*retVal) = tmp; 
# 2195
} 
#endif
# 2197 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2198
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2210
::exit(___);}
#if 0
# 2198
{ 
# 2199
int4 tmp; 
# 2200
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2201
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2202
} else { 
# 2203
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2204
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2205
} else { 
# 2206
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2207
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2208
}  }  }  
# 2209
(*retVal) = tmp; 
# 2210
} 
#endif
# 2212 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2213
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2225
::exit(___);}
#if 0
# 2213
{ 
# 2214
uint4 tmp; 
# 2215
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2216
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2217
} else { 
# 2218
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2219
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2220
} else { 
# 2221
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2222
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2223
}  }  }  
# 2224
(*retVal) = tmp; 
# 2225
} 
#endif
# 2227 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2228
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2240
::exit(___);}
#if 0
# 2228
{ 
# 2229
float4 tmp; 
# 2230
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2231
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2232
} else { 
# 2233
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2234
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2235
} else { 
# 2236
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2237
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
# 2238
}  }  }  
# 2239
(*retVal) = tmp; 
# 2240
} 
#endif
# 2248 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2249
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2261
::exit(___);}
#if 0
# 2249
{ 
# 2250
char tmp; 
# 2251
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2252
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
# 2253
} else { 
# 2254
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2255
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
# 2256
} else { 
# 2257
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2258
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
# 2259
}  }  }  
# 2260
(*retVal) = tmp; 
# 2261
} 
#endif
# 2263 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2264
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2276
::exit(___);}
#if 0
# 2264
{ 
# 2265
signed char tmp; 
# 2266
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2267
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
# 2268
} else { 
# 2269
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2270
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
# 2271
} else { 
# 2272
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2273
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
# 2274
}  }  }  
# 2275
(*retVal) = tmp; 
# 2276
} 
#endif
# 2278 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2279
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2291
::exit(___);}
#if 0
# 2279
{ 
# 2280
char tmp; 
# 2281
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2282
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
# 2283
} else { 
# 2284
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2285
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
# 2286
} else { 
# 2287
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2288
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
# 2289
}  }  }  
# 2290
(*retVal) = make_char1(tmp); 
# 2291
} 
#endif
# 2293 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2294
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2306
::exit(___);}
#if 0
# 2294
{ 
# 2295
unsigned char tmp; 
# 2296
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2297
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
# 2298
} else { 
# 2299
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2300
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
# 2301
} else { 
# 2302
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2303
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
# 2304
}  }  }  
# 2305
(*retVal) = tmp; 
# 2306
} 
#endif
# 2308 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2309
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2321
::exit(___);}
#if 0
# 2309
{ 
# 2310
unsigned char tmp; 
# 2311
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2312
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
# 2313
} else { 
# 2314
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2315
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
# 2316
} else { 
# 2317
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2318
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
# 2319
}  }  }  
# 2320
(*retVal) = make_uchar1(tmp); 
# 2321
} 
#endif
# 2323 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2324
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2336
::exit(___);}
#if 0
# 2324
{ 
# 2325
short tmp; 
# 2326
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2327
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
# 2328
} else { 
# 2329
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2330
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
# 2331
} else { 
# 2332
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2333
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
# 2334
}  }  }  
# 2335
(*retVal) = tmp; 
# 2336
} 
#endif
# 2338 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2339
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2351
::exit(___);}
#if 0
# 2339
{ 
# 2340
short tmp; 
# 2341
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2342
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
# 2343
} else { 
# 2344
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2345
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
# 2346
} else { 
# 2347
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2348
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
# 2349
}  }  }  
# 2350
(*retVal) = make_short1(tmp); 
# 2351
} 
#endif
# 2353 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2354
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2366
::exit(___);}
#if 0
# 2354
{ 
# 2355
unsigned short tmp; 
# 2356
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2357
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
# 2358
} else { 
# 2359
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2360
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
# 2361
} else { 
# 2362
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2363
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
# 2364
}  }  }  
# 2365
(*retVal) = tmp; 
# 2366
} 
#endif
# 2368 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2369
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2381
::exit(___);}
#if 0
# 2369
{ 
# 2370
unsigned short tmp; 
# 2371
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2372
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
# 2373
} else { 
# 2374
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2375
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
# 2376
} else { 
# 2377
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2378
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
# 2379
}  }  }  
# 2380
(*retVal) = make_ushort1(tmp); 
# 2381
} 
#endif
# 2383 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2384
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2396
::exit(___);}
#if 0
# 2384
{ 
# 2385
int tmp; 
# 2386
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2387
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2388
} else { 
# 2389
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2390
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2391
} else { 
# 2392
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2393
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2394
}  }  }  
# 2395
(*retVal) = tmp; 
# 2396
} 
#endif
# 2398 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2399
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2411
::exit(___);}
#if 0
# 2399
{ 
# 2400
int tmp; 
# 2401
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2402
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2403
} else { 
# 2404
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2405
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2406
} else { 
# 2407
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2408
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2409
}  }  }  
# 2410
(*retVal) = make_int1(tmp); 
# 2411
} 
#endif
# 2413 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2414
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2426
::exit(___);}
#if 0
# 2414
{ 
# 2415
unsigned tmp; 
# 2416
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2417
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2418
} else { 
# 2419
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2420
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2421
} else { 
# 2422
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2423
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2424
}  }  }  
# 2425
(*retVal) = tmp; 
# 2426
} 
#endif
# 2428 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2429
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2441
::exit(___);}
#if 0
# 2429
{ 
# 2430
unsigned tmp; 
# 2431
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2432
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2433
} else { 
# 2434
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2435
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2436
} else { 
# 2437
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2438
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2439
}  }  }  
# 2440
(*retVal) = make_uint1(tmp); 
# 2441
} 
#endif
# 2443 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2444
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2456
::exit(___);}
#if 0
# 2444
{ 
# 2445
long long tmp; 
# 2446
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2447
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layer, x, y); 
# 2448
} else { 
# 2449
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2450
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x, y); 
# 2451
} else { 
# 2452
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2453
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layer, x, y); 
# 2454
}  }  }  
# 2455
(*retVal) = tmp; 
# 2456
} 
#endif
# 2458 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2459
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2471
::exit(___);}
#if 0
# 2459
{ 
# 2460
long long tmp; 
# 2461
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2462
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layer, x, y); 
# 2463
} else { 
# 2464
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2465
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x, y); 
# 2466
} else { 
# 2467
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2468
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layer, x, y); 
# 2469
}  }  }  
# 2470
(*retVal) = make_longlong1(tmp); 
# 2471
} 
#endif
# 2473 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2474
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2486
::exit(___);}
#if 0
# 2474
{ 
# 2475
unsigned long long tmp; 
# 2476
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2477
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layer, x, y); 
# 2478
} else { 
# 2479
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2480
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x, y); 
# 2481
} else { 
# 2482
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2483
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layer, x, y); 
# 2484
}  }  }  
# 2485
(*retVal) = tmp; 
# 2486
} 
#endif
# 2488 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2489
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2501
::exit(___);}
#if 0
# 2489
{ 
# 2490
unsigned long long tmp; 
# 2491
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2492
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layer, x, y); 
# 2493
} else { 
# 2494
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2495
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layer, x, y); 
# 2496
} else { 
# 2497
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2498
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layer, x, y); 
# 2499
}  }  }  
# 2500
(*retVal) = make_ulonglong1(tmp); 
# 2501
} 
#endif
# 2503 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2504
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2516
::exit(___);}
#if 0
# 2504
{ 
# 2505
float tmp; 
# 2506
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2507
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2508
} else { 
# 2509
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2510
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2511
} else { 
# 2512
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2513
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2514
}  }  }  
# 2515
(*retVal) = tmp; 
# 2516
} 
#endif
# 2518 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2519
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2531
::exit(___);}
#if 0
# 2519
{ 
# 2520
float tmp; 
# 2521
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2522
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
# 2523
} else { 
# 2524
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2525
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
# 2526
} else { 
# 2527
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2528
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
# 2529
}  }  }  
# 2530
(*retVal) = make_float1(tmp); 
# 2531
} 
#endif
# 2539 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2540
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2552
::exit(___);}
#if 0
# 2540
{ 
# 2541
char2 tmp; 
# 2542
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2543
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2544
} else { 
# 2545
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2546
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2547
} else { 
# 2548
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2549
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2550
}  }  }  
# 2551
(*retVal) = tmp; 
# 2552
} 
#endif
# 2554 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2555
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2567
::exit(___);}
#if 0
# 2555
{ 
# 2556
uchar2 tmp; 
# 2557
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2558
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2559
} else { 
# 2560
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2561
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2562
} else { 
# 2563
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2564
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
# 2565
}  }  }  
# 2566
(*retVal) = tmp; 
# 2567
} 
#endif
# 2569 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2570
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2582
::exit(___);}
#if 0
# 2570
{ 
# 2571
short2 tmp; 
# 2572
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2573
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2574
} else { 
# 2575
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2576
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2577
} else { 
# 2578
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2579
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2580
}  }  }  
# 2581
(*retVal) = tmp; 
# 2582
} 
#endif
# 2584 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2585
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2597
::exit(___);}
#if 0
# 2585
{ 
# 2586
ushort2 tmp; 
# 2587
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2588
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2589
} else { 
# 2590
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2591
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2592
} else { 
# 2593
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2594
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
# 2595
}  }  }  
# 2596
(*retVal) = tmp; 
# 2597
} 
#endif
# 2599 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2600
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2612
::exit(___);}
#if 0
# 2600
{ 
# 2601
int2 tmp; 
# 2602
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2603
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2604
} else { 
# 2605
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2606
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2607
} else { 
# 2608
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2609
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2610
}  }  }  
# 2611
(*retVal) = tmp; 
# 2612
} 
#endif
# 2614 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2615
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2627
::exit(___);}
#if 0
# 2615
{ 
# 2616
uint2 tmp; 
# 2617
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2618
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2619
} else { 
# 2620
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2621
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2622
} else { 
# 2623
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2624
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2625
}  }  }  
# 2626
(*retVal) = tmp; 
# 2627
} 
#endif
# 2629 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2630
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2642
::exit(___);}
#if 0
# 2630
{ 
# 2631
longlong2 tmp; 
# 2632
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2633
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2634
} else { 
# 2635
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2636
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2637
} else { 
# 2638
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2639
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2640
}  }  }  
# 2641
(*retVal) = tmp; 
# 2642
} 
#endif
# 2644 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2645
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2657
::exit(___);}
#if 0
# 2645
{ 
# 2646
ulonglong2 tmp; 
# 2647
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2648
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2649
} else { 
# 2650
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2651
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2652
} else { 
# 2653
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2654
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layer, x, y); 
# 2655
}  }  }  
# 2656
(*retVal) = tmp; 
# 2657
} 
#endif
# 2659 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2660
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2672
::exit(___);}
#if 0
# 2660
{ 
# 2661
float2 tmp; 
# 2662
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2663
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2664
} else { 
# 2665
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2666
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2667
} else { 
# 2668
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2669
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
# 2670
}  }  }  
# 2671
(*retVal) = tmp; 
# 2672
} 
#endif
# 2680 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2681
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2693
::exit(___);}
#if 0
# 2681
{ 
# 2682
char4 tmp; 
# 2683
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2684
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2685
} else { 
# 2686
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2687
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2688
} else { 
# 2689
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2690
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2691
}  }  }  
# 2692
(*retVal) = tmp; 
# 2693
} 
#endif
# 2695 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2696
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2708
::exit(___);}
#if 0
# 2696
{ 
# 2697
uchar4 tmp; 
# 2698
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2699
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2700
} else { 
# 2701
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2702
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2703
} else { 
# 2704
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2705
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
# 2706
}  }  }  
# 2707
(*retVal) = tmp; 
# 2708
} 
#endif
# 2710 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2711
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2723
::exit(___);}
#if 0
# 2711
{ 
# 2712
short4 tmp; 
# 2713
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2714
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2715
} else { 
# 2716
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2717
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2718
} else { 
# 2719
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2720
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2721
}  }  }  
# 2722
(*retVal) = tmp; 
# 2723
} 
#endif
# 2725 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2726
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2738
::exit(___);}
#if 0
# 2726
{ 
# 2727
ushort4 tmp; 
# 2728
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2729
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2730
} else { 
# 2731
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2732
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2733
} else { 
# 2734
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2735
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
# 2736
}  }  }  
# 2737
(*retVal) = tmp; 
# 2738
} 
#endif
# 2740 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2741
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2753
::exit(___);}
#if 0
# 2741
{ 
# 2742
int4 tmp; 
# 2743
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2744
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2745
} else { 
# 2746
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2747
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2748
} else { 
# 2749
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2750
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2751
}  }  }  
# 2752
(*retVal) = tmp; 
# 2753
} 
#endif
# 2755 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2756
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2768
::exit(___);}
#if 0
# 2756
{ 
# 2757
uint4 tmp; 
# 2758
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2759
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2760
} else { 
# 2761
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2762
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2763
} else { 
# 2764
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2765
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2766
}  }  }  
# 2767
(*retVal) = tmp; 
# 2768
} 
#endif
# 2770 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 2771
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2783
::exit(___);}
#if 0
# 2771
{ 
# 2772
float4 tmp; 
# 2773
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2774
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2775
} else { 
# 2776
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2777
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2778
} else { 
# 2779
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2780
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
# 2781
}  }  }  
# 2782
(*retVal) = tmp; 
# 2783
} 
#endif
# 2791 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2792
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2804
::exit(___);}
#if 0
# 2792
{ 
# 2793
char tmp; 
# 2794
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2795
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
# 2796
} else { 
# 2797
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2798
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
# 2799
} else { 
# 2800
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2801
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
# 2802
}  }  }  
# 2803
(*retVal) = tmp; 
# 2804
} 
#endif
# 2806 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2807
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2819
::exit(___);}
#if 0
# 2807
{ 
# 2808
signed char tmp; 
# 2809
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2810
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
# 2811
} else { 
# 2812
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2813
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
# 2814
} else { 
# 2815
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2816
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
# 2817
}  }  }  
# 2818
(*retVal) = tmp; 
# 2819
} 
#endif
# 2821 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2822
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2834
::exit(___);}
#if 0
# 2822
{ 
# 2823
char tmp; 
# 2824
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2825
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
# 2826
} else { 
# 2827
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2828
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
# 2829
} else { 
# 2830
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2831
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
# 2832
}  }  }  
# 2833
(*retVal) = make_char1(tmp); 
# 2834
} 
#endif
# 2836 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2837
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2849
::exit(___);}
#if 0
# 2837
{ 
# 2838
unsigned char tmp; 
# 2839
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2840
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
# 2841
} else { 
# 2842
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2843
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
# 2844
} else { 
# 2845
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2846
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
# 2847
}  }  }  
# 2848
(*retVal) = tmp; 
# 2849
} 
#endif
# 2851 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2852
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2864
::exit(___);}
#if 0
# 2852
{ 
# 2853
unsigned char tmp; 
# 2854
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2855
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
# 2856
} else { 
# 2857
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2858
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
# 2859
} else { 
# 2860
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2861
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
# 2862
}  }  }  
# 2863
(*retVal) = make_uchar1(tmp); 
# 2864
} 
#endif
# 2866 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2867
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2879
::exit(___);}
#if 0
# 2867
{ 
# 2868
short tmp; 
# 2869
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2870
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
# 2871
} else { 
# 2872
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2873
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
# 2874
} else { 
# 2875
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2876
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
# 2877
}  }  }  
# 2878
(*retVal) = tmp; 
# 2879
} 
#endif
# 2881 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2882
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2894
::exit(___);}
#if 0
# 2882
{ 
# 2883
short tmp; 
# 2884
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2885
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
# 2886
} else { 
# 2887
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2888
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
# 2889
} else { 
# 2890
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2891
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
# 2892
}  }  }  
# 2893
(*retVal) = make_short1(tmp); 
# 2894
} 
#endif
# 2896 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2897
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2909
::exit(___);}
#if 0
# 2897
{ 
# 2898
unsigned short tmp; 
# 2899
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2900
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
# 2901
} else { 
# 2902
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2903
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
# 2904
} else { 
# 2905
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2906
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
# 2907
}  }  }  
# 2908
(*retVal) = tmp; 
# 2909
} 
#endif
# 2911 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2912
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2924
::exit(___);}
#if 0
# 2912
{ 
# 2913
unsigned short tmp; 
# 2914
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2915
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
# 2916
} else { 
# 2917
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2918
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
# 2919
} else { 
# 2920
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2921
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
# 2922
}  }  }  
# 2923
(*retVal) = make_ushort1(tmp); 
# 2924
} 
#endif
# 2926 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2927
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2939
::exit(___);}
#if 0
# 2927
{ 
# 2928
int tmp; 
# 2929
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2930
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 2931
} else { 
# 2932
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2933
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 2934
} else { 
# 2935
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2936
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 2937
}  }  }  
# 2938
(*retVal) = tmp; 
# 2939
} 
#endif
# 2941 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2942
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2954
::exit(___);}
#if 0
# 2942
{ 
# 2943
int tmp; 
# 2944
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2945
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 2946
} else { 
# 2947
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2948
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 2949
} else { 
# 2950
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2951
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 2952
}  }  }  
# 2953
(*retVal) = make_int1(tmp); 
# 2954
} 
#endif
# 2956 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2957
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2969
::exit(___);}
#if 0
# 2957
{ 
# 2958
unsigned tmp; 
# 2959
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2960
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 2961
} else { 
# 2962
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2963
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 2964
} else { 
# 2965
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2966
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 2967
}  }  }  
# 2968
(*retVal) = tmp; 
# 2969
} 
#endif
# 2971 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2972
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2984
::exit(___);}
#if 0
# 2972
{ 
# 2973
unsigned tmp; 
# 2974
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2975
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 2976
} else { 
# 2977
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2978
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 2979
} else { 
# 2980
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2981
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 2982
}  }  }  
# 2983
(*retVal) = make_uint1(tmp); 
# 2984
} 
#endif
# 2986 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 2987
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2999
::exit(___);}
#if 0
# 2987
{ 
# 2988
long long tmp; 
# 2989
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2990
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, face, x, y); 
# 2991
} else { 
# 2992
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2993
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, face, x, y); 
# 2994
} else { 
# 2995
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2996
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, face, x, y); 
# 2997
}  }  }  
# 2998
(*retVal) = tmp; 
# 2999
} 
#endif
# 3001 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3002
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3014
::exit(___);}
#if 0
# 3002
{ 
# 3003
long long tmp; 
# 3004
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3005
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, face, x, y); 
# 3006
} else { 
# 3007
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3008
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, face, x, y); 
# 3009
} else { 
# 3010
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3011
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, face, x, y); 
# 3012
}  }  }  
# 3013
(*retVal) = make_longlong1(tmp); 
# 3014
} 
#endif
# 3016 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3017
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3029
::exit(___);}
#if 0
# 3017
{ 
# 3018
unsigned long long tmp; 
# 3019
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3020
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, face, x, y); 
# 3021
} else { 
# 3022
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3023
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, face, x, y); 
# 3024
} else { 
# 3025
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3026
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, face, x, y); 
# 3027
}  }  }  
# 3028
(*retVal) = tmp; 
# 3029
} 
#endif
# 3031 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3032
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3044
::exit(___);}
#if 0
# 3032
{ 
# 3033
unsigned long long tmp; 
# 3034
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3035
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, face, x, y); 
# 3036
} else { 
# 3037
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3038
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, face, x, y); 
# 3039
} else { 
# 3040
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3041
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, face, x, y); 
# 3042
}  }  }  
# 3043
(*retVal) = make_ulonglong1(tmp); 
# 3044
} 
#endif
# 3046 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3047
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3059
::exit(___);}
#if 0
# 3047
{ 
# 3048
float tmp; 
# 3049
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3050
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 3051
} else { 
# 3052
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3053
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 3054
} else { 
# 3055
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3056
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 3057
}  }  }  
# 3058
(*retVal) = tmp; 
# 3059
} 
#endif
# 3061 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3062
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3074
::exit(___);}
#if 0
# 3062
{ 
# 3063
float tmp; 
# 3064
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3065
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
# 3066
} else { 
# 3067
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3068
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
# 3069
} else { 
# 3070
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3071
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
# 3072
}  }  }  
# 3073
(*retVal) = make_float1(tmp); 
# 3074
} 
#endif
# 3082 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3083
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3095
::exit(___);}
#if 0
# 3083
{ 
# 3084
char2 tmp; 
# 3085
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3086
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3087
} else { 
# 3088
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3089
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3090
} else { 
# 3091
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3092
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3093
}  }  }  
# 3094
(*retVal) = tmp; 
# 3095
} 
#endif
# 3097 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3098
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3110
::exit(___);}
#if 0
# 3098
{ 
# 3099
uchar2 tmp; 
# 3100
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3101
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3102
} else { 
# 3103
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3104
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3105
} else { 
# 3106
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3107
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
# 3108
}  }  }  
# 3109
(*retVal) = tmp; 
# 3110
} 
#endif
# 3112 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3113
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3125
::exit(___);}
#if 0
# 3113
{ 
# 3114
short2 tmp; 
# 3115
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3116
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3117
} else { 
# 3118
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3119
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3120
} else { 
# 3121
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3122
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3123
}  }  }  
# 3124
(*retVal) = tmp; 
# 3125
} 
#endif
# 3127 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3128
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3140
::exit(___);}
#if 0
# 3128
{ 
# 3129
ushort2 tmp; 
# 3130
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3131
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3132
} else { 
# 3133
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3134
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3135
} else { 
# 3136
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3137
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
# 3138
}  }  }  
# 3139
(*retVal) = tmp; 
# 3140
} 
#endif
# 3142 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3143
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3155
::exit(___);}
#if 0
# 3143
{ 
# 3144
int2 tmp; 
# 3145
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3146
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3147
} else { 
# 3148
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3149
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3150
} else { 
# 3151
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3152
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3153
}  }  }  
# 3154
(*retVal) = tmp; 
# 3155
} 
#endif
# 3157 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3158
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3170
::exit(___);}
#if 0
# 3158
{ 
# 3159
uint2 tmp; 
# 3160
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3161
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3162
} else { 
# 3163
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3164
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3165
} else { 
# 3166
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3167
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3168
}  }  }  
# 3169
(*retVal) = tmp; 
# 3170
} 
#endif
# 3172 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3173
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3185
::exit(___);}
#if 0
# 3173
{ 
# 3174
longlong2 tmp; 
# 3175
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3176
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3177
} else { 
# 3178
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3179
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3180
} else { 
# 3181
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3182
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3183
}  }  }  
# 3184
(*retVal) = tmp; 
# 3185
} 
#endif
# 3187 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3188
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3200
::exit(___);}
#if 0
# 3188
{ 
# 3189
ulonglong2 tmp; 
# 3190
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3191
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3192
} else { 
# 3193
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3194
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3195
} else { 
# 3196
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3197
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, face, x, y); 
# 3198
}  }  }  
# 3199
(*retVal) = tmp; 
# 3200
} 
#endif
# 3202 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3203
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3215
::exit(___);}
#if 0
# 3203
{ 
# 3204
float2 tmp; 
# 3205
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3206
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3207
} else { 
# 3208
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3209
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3210
} else { 
# 3211
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3212
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
# 3213
}  }  }  
# 3214
(*retVal) = tmp; 
# 3215
} 
#endif
# 3223 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3224
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3236
::exit(___);}
#if 0
# 3224
{ 
# 3225
char4 tmp; 
# 3226
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3227
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3228
} else { 
# 3229
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3230
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3231
} else { 
# 3232
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3233
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3234
}  }  }  
# 3235
(*retVal) = tmp; 
# 3236
} 
#endif
# 3238 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3239
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3251
::exit(___);}
#if 0
# 3239
{ 
# 3240
uchar4 tmp; 
# 3241
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3242
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3243
} else { 
# 3244
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3245
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3246
} else { 
# 3247
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3248
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
# 3249
}  }  }  
# 3250
(*retVal) = tmp; 
# 3251
} 
#endif
# 3253 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3254
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3266
::exit(___);}
#if 0
# 3254
{ 
# 3255
short4 tmp; 
# 3256
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3257
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3258
} else { 
# 3259
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3260
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3261
} else { 
# 3262
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3263
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3264
}  }  }  
# 3265
(*retVal) = tmp; 
# 3266
} 
#endif
# 3268 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3269
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3281
::exit(___);}
#if 0
# 3269
{ 
# 3270
ushort4 tmp; 
# 3271
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3272
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3273
} else { 
# 3274
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3275
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3276
} else { 
# 3277
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3278
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
# 3279
}  }  }  
# 3280
(*retVal) = tmp; 
# 3281
} 
#endif
# 3283 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3284
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3296
::exit(___);}
#if 0
# 3284
{ 
# 3285
int4 tmp; 
# 3286
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3287
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3288
} else { 
# 3289
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3290
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3291
} else { 
# 3292
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3293
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3294
}  }  }  
# 3295
(*retVal) = tmp; 
# 3296
} 
#endif
# 3298 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3299
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3311
::exit(___);}
#if 0
# 3299
{ 
# 3300
uint4 tmp; 
# 3301
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3302
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3303
} else { 
# 3304
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3305
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3306
} else { 
# 3307
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3308
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3309
}  }  }  
# 3310
(*retVal) = tmp; 
# 3311
} 
#endif
# 3313 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 3314
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3326
::exit(___);}
#if 0
# 3314
{ 
# 3315
float4 tmp; 
# 3316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3317
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3318
} else { 
# 3319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3320
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3321
} else { 
# 3322
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3323
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
# 3324
}  }  }  
# 3325
(*retVal) = tmp; 
# 3326
} 
#endif
# 3334 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3335
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3347
::exit(___);}
#if 0
# 3335
{ 
# 3336
char tmp; 
# 3337
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3338
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
# 3339
} else { 
# 3340
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3341
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
# 3342
} else { 
# 3343
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3344
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
# 3345
}  }  }  
# 3346
(*retVal) = tmp; 
# 3347
} 
#endif
# 3349 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3350
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3362
::exit(___);}
#if 0
# 3350
{ 
# 3351
signed char tmp; 
# 3352
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3353
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
# 3354
} else { 
# 3355
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3356
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
# 3357
} else { 
# 3358
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3359
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
# 3360
}  }  }  
# 3361
(*retVal) = tmp; 
# 3362
} 
#endif
# 3364 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3365
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3377
::exit(___);}
#if 0
# 3365
{ 
# 3366
char tmp; 
# 3367
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3368
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
# 3369
} else { 
# 3370
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3371
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
# 3372
} else { 
# 3373
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3374
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
# 3375
}  }  }  
# 3376
(*retVal) = make_char1(tmp); 
# 3377
} 
#endif
# 3379 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3380
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3392
::exit(___);}
#if 0
# 3380
{ 
# 3381
unsigned char tmp; 
# 3382
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3383
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
# 3384
} else { 
# 3385
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3386
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
# 3387
} else { 
# 3388
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3389
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
# 3390
}  }  }  
# 3391
(*retVal) = tmp; 
# 3392
} 
#endif
# 3394 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3395
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3407
::exit(___);}
#if 0
# 3395
{ 
# 3396
unsigned char tmp; 
# 3397
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3398
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
# 3399
} else { 
# 3400
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3401
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
# 3402
} else { 
# 3403
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3404
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
# 3405
}  }  }  
# 3406
(*retVal) = make_uchar1(tmp); 
# 3407
} 
#endif
# 3409 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3410
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3422
::exit(___);}
#if 0
# 3410
{ 
# 3411
short tmp; 
# 3412
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3413
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
# 3414
} else { 
# 3415
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3416
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
# 3417
} else { 
# 3418
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3419
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
# 3420
}  }  }  
# 3421
(*retVal) = tmp; 
# 3422
} 
#endif
# 3424 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3425
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3437
::exit(___);}
#if 0
# 3425
{ 
# 3426
short tmp; 
# 3427
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3428
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
# 3429
} else { 
# 3430
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3431
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
# 3432
} else { 
# 3433
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3434
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
# 3435
}  }  }  
# 3436
(*retVal) = make_short1(tmp); 
# 3437
} 
#endif
# 3439 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3440
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3452
::exit(___);}
#if 0
# 3440
{ 
# 3441
unsigned short tmp; 
# 3442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3443
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
# 3444
} else { 
# 3445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3446
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
# 3447
} else { 
# 3448
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3449
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
# 3450
}  }  }  
# 3451
(*retVal) = tmp; 
# 3452
} 
#endif
# 3454 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3455
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3467
::exit(___);}
#if 0
# 3455
{ 
# 3456
unsigned short tmp; 
# 3457
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3458
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
# 3459
} else { 
# 3460
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3461
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
# 3462
} else { 
# 3463
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3464
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
# 3465
}  }  }  
# 3466
(*retVal) = make_ushort1(tmp); 
# 3467
} 
#endif
# 3469 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3470
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3482
::exit(___);}
#if 0
# 3470
{ 
# 3471
int tmp; 
# 3472
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3473
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3474
} else { 
# 3475
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3476
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3477
} else { 
# 3478
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3479
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3480
}  }  }  
# 3481
(*retVal) = tmp; 
# 3482
} 
#endif
# 3484 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3485
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3497
::exit(___);}
#if 0
# 3485
{ 
# 3486
int tmp; 
# 3487
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3488
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3489
} else { 
# 3490
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3491
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3492
} else { 
# 3493
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3494
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3495
}  }  }  
# 3496
(*retVal) = make_int1(tmp); 
# 3497
} 
#endif
# 3499 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3500
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3512
::exit(___);}
#if 0
# 3500
{ 
# 3501
unsigned tmp; 
# 3502
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3503
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3504
} else { 
# 3505
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3506
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3507
} else { 
# 3508
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3509
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3510
}  }  }  
# 3511
(*retVal) = tmp; 
# 3512
} 
#endif
# 3514 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3515
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3527
::exit(___);}
#if 0
# 3515
{ 
# 3516
unsigned tmp; 
# 3517
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3518
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3519
} else { 
# 3520
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3521
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3522
} else { 
# 3523
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3524
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3525
}  }  }  
# 3526
(*retVal) = make_uint1(tmp); 
# 3527
} 
#endif
# 3529 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3530
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3542
::exit(___);}
#if 0
# 3530
{ 
# 3531
long long tmp; 
# 3532
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3533
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layerface, x, y); 
# 3534
} else { 
# 3535
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3536
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layerface, x, y); 
# 3537
} else { 
# 3538
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3539
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layerface, x, y); 
# 3540
}  }  }  
# 3541
(*retVal) = tmp; 
# 3542
} 
#endif
# 3544 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3545
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3557
::exit(___);}
#if 0
# 3545
{ 
# 3546
long long tmp; 
# 3547
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3548
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layerface, x, y); 
# 3549
} else { 
# 3550
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3551
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layerface, x, y); 
# 3552
} else { 
# 3553
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3554
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layerface, x, y); 
# 3555
}  }  }  
# 3556
(*retVal) = make_longlong1(tmp); 
# 3557
} 
#endif
# 3559 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3560
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3572
::exit(___);}
#if 0
# 3560
{ 
# 3561
unsigned long long tmp; 
# 3562
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3563
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layerface, x, y); 
# 3564
} else { 
# 3565
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3566
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layerface, x, y); 
# 3567
} else { 
# 3568
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3569
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layerface, x, y); 
# 3570
}  }  }  
# 3571
(*retVal) = tmp; 
# 3572
} 
#endif
# 3574 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3575
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3587
::exit(___);}
#if 0
# 3575
{ 
# 3576
unsigned long long tmp; 
# 3577
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3578
__suld_2d_array_i64_trap((long long *)(&tmp), surfObject, layerface, x, y); 
# 3579
} else { 
# 3580
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3581
__suld_2d_array_i64_clamp((long long *)(&tmp), surfObject, layerface, x, y); 
# 3582
} else { 
# 3583
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3584
__suld_2d_array_i64_zero((long long *)(&tmp), surfObject, layerface, x, y); 
# 3585
}  }  }  
# 3586
(*retVal) = make_ulonglong1(tmp); 
# 3587
} 
#endif
# 3589 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3590
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3602
::exit(___);}
#if 0
# 3590
{ 
# 3591
float tmp; 
# 3592
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3593
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3594
} else { 
# 3595
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3596
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3597
} else { 
# 3598
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3599
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3600
}  }  }  
# 3601
(*retVal) = tmp; 
# 3602
} 
#endif
# 3604 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3605
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3617
::exit(___);}
#if 0
# 3605
{ 
# 3606
float tmp; 
# 3607
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3608
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
# 3609
} else { 
# 3610
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3611
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
# 3612
} else { 
# 3613
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3614
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
# 3615
}  }  }  
# 3616
(*retVal) = make_float1(tmp); 
# 3617
} 
#endif
# 3625 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3626
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3638
::exit(___);}
#if 0
# 3626
{ 
# 3627
char2 tmp; 
# 3628
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3629
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3630
} else { 
# 3631
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3632
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3633
} else { 
# 3634
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3635
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3636
}  }  }  
# 3637
(*retVal) = tmp; 
# 3638
} 
#endif
# 3640 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3641
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3653
::exit(___);}
#if 0
# 3641
{ 
# 3642
uchar2 tmp; 
# 3643
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3644
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3645
} else { 
# 3646
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3647
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3648
} else { 
# 3649
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3650
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3651
}  }  }  
# 3652
(*retVal) = tmp; 
# 3653
} 
#endif
# 3655 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3656
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3668
::exit(___);}
#if 0
# 3656
{ 
# 3657
short2 tmp; 
# 3658
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3659
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3660
} else { 
# 3661
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3662
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3663
} else { 
# 3664
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3665
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3666
}  }  }  
# 3667
(*retVal) = tmp; 
# 3668
} 
#endif
# 3670 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3671
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3683
::exit(___);}
#if 0
# 3671
{ 
# 3672
ushort2 tmp; 
# 3673
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3674
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3675
} else { 
# 3676
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3677
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3678
} else { 
# 3679
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3680
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3681
}  }  }  
# 3682
(*retVal) = tmp; 
# 3683
} 
#endif
# 3685 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3686
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3698
::exit(___);}
#if 0
# 3686
{ 
# 3687
int2 tmp; 
# 3688
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3689
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3690
} else { 
# 3691
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3692
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3693
} else { 
# 3694
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3695
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3696
}  }  }  
# 3697
(*retVal) = tmp; 
# 3698
} 
#endif
# 3700 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3701
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3713
::exit(___);}
#if 0
# 3701
{ 
# 3702
uint2 tmp; 
# 3703
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3704
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3705
} else { 
# 3706
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3707
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3708
} else { 
# 3709
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3710
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3711
}  }  }  
# 3712
(*retVal) = tmp; 
# 3713
} 
#endif
# 3715 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3716
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3728
::exit(___);}
#if 0
# 3716
{ 
# 3717
longlong2 tmp; 
# 3718
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3719
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3720
} else { 
# 3721
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3722
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3723
} else { 
# 3724
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3725
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3726
}  }  }  
# 3727
(*retVal) = tmp; 
# 3728
} 
#endif
# 3730 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3731
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3743
::exit(___);}
#if 0
# 3731
{ 
# 3732
ulonglong2 tmp; 
# 3733
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3734
__suld_2d_array_v2i64_trap((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3735
} else { 
# 3736
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3737
__suld_2d_array_v2i64_clamp((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3738
} else { 
# 3739
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3740
__suld_2d_array_v2i64_zero((long long *)(&(tmp.x)), (long long *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3741
}  }  }  
# 3742
(*retVal) = tmp; 
# 3743
} 
#endif
# 3745 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3746
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3758
::exit(___);}
#if 0
# 3746
{ 
# 3747
float2 tmp; 
# 3748
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3749
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3750
} else { 
# 3751
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3752
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3753
} else { 
# 3754
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3755
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
# 3756
}  }  }  
# 3757
(*retVal) = tmp; 
# 3758
} 
#endif
# 3766 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3767
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3779
::exit(___);}
#if 0
# 3767
{ 
# 3768
char4 tmp; 
# 3769
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3770
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3771
} else { 
# 3772
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3773
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3774
} else { 
# 3775
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3776
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3777
}  }  }  
# 3778
(*retVal) = tmp; 
# 3779
} 
#endif
# 3781 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3782
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3794
::exit(___);}
#if 0
# 3782
{ 
# 3783
uchar4 tmp; 
# 3784
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3785
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3786
} else { 
# 3787
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3788
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3789
} else { 
# 3790
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3791
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3792
}  }  }  
# 3793
(*retVal) = tmp; 
# 3794
} 
#endif
# 3796 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3797
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3809
::exit(___);}
#if 0
# 3797
{ 
# 3798
short4 tmp; 
# 3799
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3800
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3801
} else { 
# 3802
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3803
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3804
} else { 
# 3805
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3806
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3807
}  }  }  
# 3808
(*retVal) = tmp; 
# 3809
} 
#endif
# 3811 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3812
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3824
::exit(___);}
#if 0
# 3812
{ 
# 3813
ushort4 tmp; 
# 3814
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3815
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3816
} else { 
# 3817
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3818
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3819
} else { 
# 3820
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3821
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3822
}  }  }  
# 3823
(*retVal) = tmp; 
# 3824
} 
#endif
# 3826 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3827
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3839
::exit(___);}
#if 0
# 3827
{ 
# 3828
int4 tmp; 
# 3829
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3830
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3831
} else { 
# 3832
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3833
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3834
} else { 
# 3835
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3836
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3837
}  }  }  
# 3838
(*retVal) = tmp; 
# 3839
} 
#endif
# 3841 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3842
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3854
::exit(___);}
#if 0
# 3842
{ 
# 3843
uint4 tmp; 
# 3844
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3845
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3846
} else { 
# 3847
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3848
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3849
} else { 
# 3850
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3851
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3852
}  }  }  
# 3853
(*retVal) = tmp; 
# 3854
} 
#endif
# 3856 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 3857
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3869
::exit(___);}
#if 0
# 3857
{ 
# 3858
float4 tmp; 
# 3859
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3860
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3861
} else { 
# 3862
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3863
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3864
} else { 
# 3865
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3866
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
# 3867
}  }  }  
# 3868
(*retVal) = tmp; 
# 3869
} 
#endif
# 3877 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3878
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3888
::exit(___);}
#if 0
# 3878
{ 
# 3879
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3880
__sust_b_1d_i8_trap(surfObject, x, data); 
# 3881
} else { 
# 3882
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3883
__sust_b_1d_i8_clamp(surfObject, x, data); 
# 3884
} else { 
# 3885
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3886
__sust_b_1d_i8_zero(surfObject, x, data); 
# 3887
}  }  }  
# 3888
} 
#endif
# 3890 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3891
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3901
::exit(___);}
#if 0
# 3891
{ 
# 3892
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3893
__sust_b_1d_i8_trap(surfObject, x, data); 
# 3894
} else { 
# 3895
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3896
__sust_b_1d_i8_clamp(surfObject, x, data); 
# 3897
} else { 
# 3898
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3899
__sust_b_1d_i8_zero(surfObject, x, data); 
# 3900
}  }  }  
# 3901
} 
#endif
# 3903 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3904
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3914
::exit(___);}
#if 0
# 3904
{ 
# 3905
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3906
__sust_b_1d_i8_trap(surfObject, x, data.x); 
# 3907
} else { 
# 3908
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3909
__sust_b_1d_i8_clamp(surfObject, x, data.x); 
# 3910
} else { 
# 3911
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3912
__sust_b_1d_i8_zero(surfObject, x, data.x); 
# 3913
}  }  }  
# 3914
} 
#endif
# 3916 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3917
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3927
::exit(___);}
#if 0
# 3917
{ 
# 3918
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3919
__sust_b_1d_i8_trap(surfObject, x, data); 
# 3920
} else { 
# 3921
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3922
__sust_b_1d_i8_clamp(surfObject, x, data); 
# 3923
} else { 
# 3924
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3925
__sust_b_1d_i8_zero(surfObject, x, data); 
# 3926
}  }  }  
# 3927
} 
#endif
# 3929 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3930
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3940
::exit(___);}
#if 0
# 3930
{ 
# 3931
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3932
__sust_b_1d_i8_trap(surfObject, x, data.x); 
# 3933
} else { 
# 3934
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3935
__sust_b_1d_i8_clamp(surfObject, x, data.x); 
# 3936
} else { 
# 3937
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3938
__sust_b_1d_i8_zero(surfObject, x, data.x); 
# 3939
}  }  }  
# 3940
} 
#endif
# 3942 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3943
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3953
::exit(___);}
#if 0
# 3943
{ 
# 3944
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3945
__sust_b_1d_i16_trap(surfObject, x, data); 
# 3946
} else { 
# 3947
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3948
__sust_b_1d_i16_clamp(surfObject, x, data); 
# 3949
} else { 
# 3950
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3951
__sust_b_1d_i16_zero(surfObject, x, data); 
# 3952
}  }  }  
# 3953
} 
#endif
# 3955 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3956
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3966
::exit(___);}
#if 0
# 3956
{ 
# 3957
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3958
__sust_b_1d_i16_trap(surfObject, x, data.x); 
# 3959
} else { 
# 3960
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3961
__sust_b_1d_i16_clamp(surfObject, x, data.x); 
# 3962
} else { 
# 3963
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3964
__sust_b_1d_i16_zero(surfObject, x, data.x); 
# 3965
}  }  }  
# 3966
} 
#endif
# 3968 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3969
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3979
::exit(___);}
#if 0
# 3969
{ 
# 3970
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3971
__sust_b_1d_i16_trap(surfObject, x, data); 
# 3972
} else { 
# 3973
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3974
__sust_b_1d_i16_clamp(surfObject, x, data); 
# 3975
} else { 
# 3976
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3977
__sust_b_1d_i16_zero(surfObject, x, data); 
# 3978
}  }  }  
# 3979
} 
#endif
# 3981 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3982
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3992
::exit(___);}
#if 0
# 3982
{ 
# 3983
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3984
__sust_b_1d_i16_trap(surfObject, x, data.x); 
# 3985
} else { 
# 3986
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3987
__sust_b_1d_i16_clamp(surfObject, x, data.x); 
# 3988
} else { 
# 3989
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3990
__sust_b_1d_i16_zero(surfObject, x, data.x); 
# 3991
}  }  }  
# 3992
} 
#endif
# 3994 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 3995
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4005
::exit(___);}
#if 0
# 3995
{ 
# 3996
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3997
__sust_b_1d_i32_trap(surfObject, x, data); 
# 3998
} else { 
# 3999
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4000
__sust_b_1d_i32_clamp(surfObject, x, data); 
# 4001
} else { 
# 4002
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4003
__sust_b_1d_i32_zero(surfObject, x, data); 
# 4004
}  }  }  
# 4005
} 
#endif
# 4007 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4008
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4018
::exit(___);}
#if 0
# 4008
{ 
# 4009
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4010
__sust_b_1d_i32_trap(surfObject, x, data.x); 
# 4011
} else { 
# 4012
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4013
__sust_b_1d_i32_clamp(surfObject, x, data.x); 
# 4014
} else { 
# 4015
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4016
__sust_b_1d_i32_zero(surfObject, x, data.x); 
# 4017
}  }  }  
# 4018
} 
#endif
# 4020 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4021
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4031
::exit(___);}
#if 0
# 4021
{ 
# 4022
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4023
__sust_b_1d_i32_trap(surfObject, x, data); 
# 4024
} else { 
# 4025
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4026
__sust_b_1d_i32_clamp(surfObject, x, data); 
# 4027
} else { 
# 4028
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4029
__sust_b_1d_i32_zero(surfObject, x, data); 
# 4030
}  }  }  
# 4031
} 
#endif
# 4033 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4034
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4044
::exit(___);}
#if 0
# 4034
{ 
# 4035
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4036
__sust_b_1d_i32_trap(surfObject, x, data.x); 
# 4037
} else { 
# 4038
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4039
__sust_b_1d_i32_clamp(surfObject, x, data.x); 
# 4040
} else { 
# 4041
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4042
__sust_b_1d_i32_zero(surfObject, x, data.x); 
# 4043
}  }  }  
# 4044
} 
#endif
# 4046 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4047
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4057
::exit(___);}
#if 0
# 4047
{ 
# 4048
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4049
__sust_b_1d_i64_trap(surfObject, x, data); 
# 4050
} else { 
# 4051
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4052
__sust_b_1d_i64_clamp(surfObject, x, data); 
# 4053
} else { 
# 4054
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4055
__sust_b_1d_i64_zero(surfObject, x, data); 
# 4056
}  }  }  
# 4057
} 
#endif
# 4059 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4060
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4070
::exit(___);}
#if 0
# 4060
{ 
# 4061
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4062
__sust_b_1d_i64_trap(surfObject, x, data.x); 
# 4063
} else { 
# 4064
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4065
__sust_b_1d_i64_clamp(surfObject, x, data.x); 
# 4066
} else { 
# 4067
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4068
__sust_b_1d_i64_zero(surfObject, x, data.x); 
# 4069
}  }  }  
# 4070
} 
#endif
# 4072 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4073
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4083
::exit(___);}
#if 0
# 4073
{ 
# 4074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4075
__sust_b_1d_i64_trap(surfObject, x, data); 
# 4076
} else { 
# 4077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4078
__sust_b_1d_i64_clamp(surfObject, x, data); 
# 4079
} else { 
# 4080
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4081
__sust_b_1d_i64_zero(surfObject, x, data); 
# 4082
}  }  }  
# 4083
} 
#endif
# 4085 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4086
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4096
::exit(___);}
#if 0
# 4086
{ 
# 4087
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4088
__sust_b_1d_i64_trap(surfObject, x, data.x); 
# 4089
} else { 
# 4090
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4091
__sust_b_1d_i64_clamp(surfObject, x, data.x); 
# 4092
} else { 
# 4093
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4094
__sust_b_1d_i64_zero(surfObject, x, data.x); 
# 4095
}  }  }  
# 4096
} 
#endif
# 4098 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4099
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4112
::exit(___);}
#if 0
# 4099
{ 
# 4100
union { float f; unsigned i; } cvt; 
# 4101
(cvt.f) = data; 
# 4103
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4104
__sust_b_1d_i32_trap(surfObject, x, cvt.i); 
# 4105
} else { 
# 4106
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4107
__sust_b_1d_i32_clamp(surfObject, x, cvt.i); 
# 4108
} else { 
# 4109
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4110
__sust_b_1d_i32_zero(surfObject, x, cvt.i); 
# 4111
}  }  }  
# 4112
} 
#endif
# 4114 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4115
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4128
::exit(___);}
#if 0
# 4115
{ 
# 4116
union { float f; unsigned i; } cvt; 
# 4117
(cvt.f) = (data.x); 
# 4119
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4120
__sust_b_1d_i32_trap(surfObject, x, cvt.i); 
# 4121
} else { 
# 4122
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4123
__sust_b_1d_i32_clamp(surfObject, x, cvt.i); 
# 4124
} else { 
# 4125
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4126
__sust_b_1d_i32_zero(surfObject, x, cvt.i); 
# 4127
}  }  }  
# 4128
} 
#endif
# 4136 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4137
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4147
::exit(___);}
#if 0
# 4137
{ 
# 4138
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4139
__sust_b_1d_v2i8_trap(surfObject, x, make_uchar2(data.x, data.y)); 
# 4140
} else { 
# 4141
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4142
__sust_b_1d_v2i8_clamp(surfObject, x, make_uchar2(data.x, data.y)); 
# 4143
} else { 
# 4144
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4145
__sust_b_1d_v2i8_zero(surfObject, x, make_uchar2(data.x, data.y)); 
# 4146
}  }  }  
# 4147
} 
#endif
# 4149 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4150
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4160
::exit(___);}
#if 0
# 4150
{ 
# 4151
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4152
__sust_b_1d_v2i8_trap(surfObject, x, data); 
# 4153
} else { 
# 4154
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4155
__sust_b_1d_v2i8_clamp(surfObject, x, data); 
# 4156
} else { 
# 4157
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4158
__sust_b_1d_v2i8_zero(surfObject, x, data); 
# 4159
}  }  }  
# 4160
} 
#endif
# 4162 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4163
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4173
::exit(___);}
#if 0
# 4163
{ 
# 4164
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4165
__sust_b_1d_v2i16_trap(surfObject, x, make_ushort2(data.x, data.y)); 
# 4166
} else { 
# 4167
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4168
__sust_b_1d_v2i16_clamp(surfObject, x, make_ushort2(data.x, data.y)); 
# 4169
} else { 
# 4170
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4171
__sust_b_1d_v2i16_zero(surfObject, x, make_ushort2(data.x, data.y)); 
# 4172
}  }  }  
# 4173
} 
#endif
# 4175 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4176
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4186
::exit(___);}
#if 0
# 4176
{ 
# 4177
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4178
__sust_b_1d_v2i16_trap(surfObject, x, data); 
# 4179
} else { 
# 4180
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4181
__sust_b_1d_v2i16_clamp(surfObject, x, data); 
# 4182
} else { 
# 4183
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4184
__sust_b_1d_v2i16_zero(surfObject, x, data); 
# 4185
}  }  }  
# 4186
} 
#endif
# 4188 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4189
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4199
::exit(___);}
#if 0
# 4189
{ 
# 4190
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4191
__sust_b_1d_v2i32_trap(surfObject, x, make_uint2(data.x, data.y)); 
# 4192
} else { 
# 4193
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4194
__sust_b_1d_v2i32_clamp(surfObject, x, make_uint2(data.x, data.y)); 
# 4195
} else { 
# 4196
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4197
__sust_b_1d_v2i32_zero(surfObject, x, make_uint2(data.x, data.y)); 
# 4198
}  }  }  
# 4199
} 
#endif
# 4201 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4202
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4212
::exit(___);}
#if 0
# 4202
{ 
# 4203
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4204
__sust_b_1d_v2i32_trap(surfObject, x, data); 
# 4205
} else { 
# 4206
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4207
__sust_b_1d_v2i32_clamp(surfObject, x, data); 
# 4208
} else { 
# 4209
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4210
__sust_b_1d_v2i32_zero(surfObject, x, data); 
# 4211
}  }  }  
# 4212
} 
#endif
# 4214 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4215
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4225
::exit(___);}
#if 0
# 4215
{ 
# 4216
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4217
__sust_b_1d_v2i64_trap(surfObject, x, make_ulonglong2(data.x, data.y)); 
# 4218
} else { 
# 4219
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4220
__sust_b_1d_v2i64_clamp(surfObject, x, make_ulonglong2(data.x, data.y)); 
# 4221
} else { 
# 4222
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4223
__sust_b_1d_v2i64_zero(surfObject, x, make_ulonglong2(data.x, data.y)); 
# 4224
}  }  }  
# 4225
} 
#endif
# 4227 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4228
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4238
::exit(___);}
#if 0
# 4228
{ 
# 4229
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4230
__sust_b_1d_v2i64_trap(surfObject, x, data); 
# 4231
} else { 
# 4232
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4233
__sust_b_1d_v2i64_clamp(surfObject, x, data); 
# 4234
} else { 
# 4235
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4236
__sust_b_1d_v2i64_zero(surfObject, x, data); 
# 4237
}  }  }  
# 4238
} 
#endif
# 4240 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4241
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4254
::exit(___);}
#if 0
# 4241
{ 
# 4242
union { float2 f; uint2 i; } cvt; 
# 4243
(cvt.f) = data; 
# 4245
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4246
__sust_b_1d_v2i32_trap(surfObject, x, cvt.i); 
# 4247
} else { 
# 4248
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4249
__sust_b_1d_v2i32_clamp(surfObject, x, cvt.i); 
# 4250
} else { 
# 4251
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4252
__sust_b_1d_v2i32_zero(surfObject, x, cvt.i); 
# 4253
}  }  }  
# 4254
} 
#endif
# 4262 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4263
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4273
::exit(___);}
#if 0
# 4263
{ 
# 4264
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4265
__sust_b_1d_v4i8_trap(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4266
} else { 
# 4267
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4268
__sust_b_1d_v4i8_clamp(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4269
} else { 
# 4270
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4271
__sust_b_1d_v4i8_zero(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4272
}  }  }  
# 4273
} 
#endif
# 4275 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4276
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4286
::exit(___);}
#if 0
# 4276
{ 
# 4277
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4278
__sust_b_1d_v4i8_trap(surfObject, x, data); 
# 4279
} else { 
# 4280
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4281
__sust_b_1d_v4i8_clamp(surfObject, x, data); 
# 4282
} else { 
# 4283
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4284
__sust_b_1d_v4i8_zero(surfObject, x, data); 
# 4285
}  }  }  
# 4286
} 
#endif
# 4288 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4289
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4299
::exit(___);}
#if 0
# 4289
{ 
# 4290
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4291
__sust_b_1d_v4i16_trap(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4292
} else { 
# 4293
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4294
__sust_b_1d_v4i16_clamp(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4295
} else { 
# 4296
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4297
__sust_b_1d_v4i16_zero(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4298
}  }  }  
# 4299
} 
#endif
# 4301 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4302
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4312
::exit(___);}
#if 0
# 4302
{ 
# 4303
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4304
__sust_b_1d_v4i16_trap(surfObject, x, data); 
# 4305
} else { 
# 4306
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4307
__sust_b_1d_v4i16_clamp(surfObject, x, data); 
# 4308
} else { 
# 4309
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4310
__sust_b_1d_v4i16_zero(surfObject, x, data); 
# 4311
}  }  }  
# 4312
} 
#endif
# 4314 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4315
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4325
::exit(___);}
#if 0
# 4315
{ 
# 4316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4317
__sust_b_1d_v4i32_trap(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 4318
} else { 
# 4319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4320
__sust_b_1d_v4i32_clamp(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 4321
} else { 
# 4322
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4323
__sust_b_1d_v4i32_zero(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 4324
}  }  }  
# 4325
} 
#endif
# 4327 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4328
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4338
::exit(___);}
#if 0
# 4328
{ 
# 4329
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4330
__sust_b_1d_v4i32_trap(surfObject, x, data); 
# 4331
} else { 
# 4332
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4333
__sust_b_1d_v4i32_clamp(surfObject, x, data); 
# 4334
} else { 
# 4335
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4336
__sust_b_1d_v4i32_zero(surfObject, x, data); 
# 4337
}  }  }  
# 4338
} 
#endif
# 4340 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
# 4341
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4354
::exit(___);}
#if 0
# 4341
{ 
# 4342
union { float4 f; uint4 i; } cvt; 
# 4343
(cvt.f) = data; 
# 4345
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4346
__sust_b_1d_v4i32_trap(surfObject, x, cvt.i); 
# 4347
} else { 
# 4348
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4349
__sust_b_1d_v4i32_clamp(surfObject, x, cvt.i); 
# 4350
} else { 
# 4351
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4352
__sust_b_1d_v4i32_zero(surfObject, x, cvt.i); 
# 4353
}  }  }  
# 4354
} 
#endif
# 4362 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4363
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4373
::exit(___);}
#if 0
# 4363
{ 
# 4364
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4365
__sust_b_2d_i8_trap(surfObject, x, y, data); 
# 4366
} else { 
# 4367
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4368
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
# 4369
} else { 
# 4370
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4371
__sust_b_2d_i8_zero(surfObject, x, y, data); 
# 4372
}  }  }  
# 4373
} 
#endif
# 4375 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4376
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4386
::exit(___);}
#if 0
# 4376
{ 
# 4377
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4378
__sust_b_2d_i8_trap(surfObject, x, y, data); 
# 4379
} else { 
# 4380
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4381
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
# 4382
} else { 
# 4383
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4384
__sust_b_2d_i8_zero(surfObject, x, y, data); 
# 4385
}  }  }  
# 4386
} 
#endif
# 4388 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4389
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4399
::exit(___);}
#if 0
# 4389
{ 
# 4390
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4391
__sust_b_2d_i8_trap(surfObject, x, y, data.x); 
# 4392
} else { 
# 4393
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4394
__sust_b_2d_i8_clamp(surfObject, x, y, data.x); 
# 4395
} else { 
# 4396
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4397
__sust_b_2d_i8_zero(surfObject, x, y, data.x); 
# 4398
}  }  }  
# 4399
} 
#endif
# 4401 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4402
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4412
::exit(___);}
#if 0
# 4402
{ 
# 4403
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4404
__sust_b_2d_i8_trap(surfObject, x, y, data); 
# 4405
} else { 
# 4406
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4407
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
# 4408
} else { 
# 4409
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4410
__sust_b_2d_i8_zero(surfObject, x, y, data); 
# 4411
}  }  }  
# 4412
} 
#endif
# 4414 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4415
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4425
::exit(___);}
#if 0
# 4415
{ 
# 4416
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4417
__sust_b_2d_i8_trap(surfObject, x, y, data.x); 
# 4418
} else { 
# 4419
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4420
__sust_b_2d_i8_clamp(surfObject, x, y, data.x); 
# 4421
} else { 
# 4422
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4423
__sust_b_2d_i8_zero(surfObject, x, y, data.x); 
# 4424
}  }  }  
# 4425
} 
#endif
# 4427 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4428
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4438
::exit(___);}
#if 0
# 4428
{ 
# 4429
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4430
__sust_b_2d_i16_trap(surfObject, x, y, data); 
# 4431
} else { 
# 4432
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4433
__sust_b_2d_i16_clamp(surfObject, x, y, data); 
# 4434
} else { 
# 4435
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4436
__sust_b_2d_i16_zero(surfObject, x, y, data); 
# 4437
}  }  }  
# 4438
} 
#endif
# 4440 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4441
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4451
::exit(___);}
#if 0
# 4441
{ 
# 4442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4443
__sust_b_2d_i16_trap(surfObject, x, y, data.x); 
# 4444
} else { 
# 4445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4446
__sust_b_2d_i16_clamp(surfObject, x, y, data.x); 
# 4447
} else { 
# 4448
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4449
__sust_b_2d_i16_zero(surfObject, x, y, data.x); 
# 4450
}  }  }  
# 4451
} 
#endif
# 4453 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4454
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4464
::exit(___);}
#if 0
# 4454
{ 
# 4455
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4456
__sust_b_2d_i16_trap(surfObject, x, y, data); 
# 4457
} else { 
# 4458
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4459
__sust_b_2d_i16_clamp(surfObject, x, y, data); 
# 4460
} else { 
# 4461
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4462
__sust_b_2d_i16_zero(surfObject, x, y, data); 
# 4463
}  }  }  
# 4464
} 
#endif
# 4466 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4467
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4477
::exit(___);}
#if 0
# 4467
{ 
# 4468
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4469
__sust_b_2d_i16_trap(surfObject, x, y, data.x); 
# 4470
} else { 
# 4471
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4472
__sust_b_2d_i16_clamp(surfObject, x, y, data.x); 
# 4473
} else { 
# 4474
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4475
__sust_b_2d_i16_zero(surfObject, x, y, data.x); 
# 4476
}  }  }  
# 4477
} 
#endif
# 4479 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4480
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4490
::exit(___);}
#if 0
# 4480
{ 
# 4481
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4482
__sust_b_2d_i32_trap(surfObject, x, y, data); 
# 4483
} else { 
# 4484
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4485
__sust_b_2d_i32_clamp(surfObject, x, y, data); 
# 4486
} else { 
# 4487
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4488
__sust_b_2d_i32_zero(surfObject, x, y, data); 
# 4489
}  }  }  
# 4490
} 
#endif
# 4492 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4493
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4503
::exit(___);}
#if 0
# 4493
{ 
# 4494
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4495
__sust_b_2d_i32_trap(surfObject, x, y, data.x); 
# 4496
} else { 
# 4497
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4498
__sust_b_2d_i32_clamp(surfObject, x, y, data.x); 
# 4499
} else { 
# 4500
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4501
__sust_b_2d_i32_zero(surfObject, x, y, data.x); 
# 4502
}  }  }  
# 4503
} 
#endif
# 4505 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4506
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4516
::exit(___);}
#if 0
# 4506
{ 
# 4507
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4508
__sust_b_2d_i32_trap(surfObject, x, y, data); 
# 4509
} else { 
# 4510
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4511
__sust_b_2d_i32_clamp(surfObject, x, y, data); 
# 4512
} else { 
# 4513
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4514
__sust_b_2d_i32_zero(surfObject, x, y, data); 
# 4515
}  }  }  
# 4516
} 
#endif
# 4518 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4519
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4529
::exit(___);}
#if 0
# 4519
{ 
# 4520
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4521
__sust_b_2d_i32_trap(surfObject, x, y, data.x); 
# 4522
} else { 
# 4523
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4524
__sust_b_2d_i32_clamp(surfObject, x, y, data.x); 
# 4525
} else { 
# 4526
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4527
__sust_b_2d_i32_zero(surfObject, x, y, data.x); 
# 4528
}  }  }  
# 4529
} 
#endif
# 4531 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4532
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4542
::exit(___);}
#if 0
# 4532
{ 
# 4533
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4534
__sust_b_2d_i64_trap(surfObject, x, y, data); 
# 4535
} else { 
# 4536
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4537
__sust_b_2d_i64_clamp(surfObject, x, y, data); 
# 4538
} else { 
# 4539
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4540
__sust_b_2d_i64_zero(surfObject, x, y, data); 
# 4541
}  }  }  
# 4542
} 
#endif
# 4544 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4545
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4555
::exit(___);}
#if 0
# 4545
{ 
# 4546
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4547
__sust_b_2d_i64_trap(surfObject, x, y, data.x); 
# 4548
} else { 
# 4549
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4550
__sust_b_2d_i64_clamp(surfObject, x, y, data.x); 
# 4551
} else { 
# 4552
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4553
__sust_b_2d_i64_zero(surfObject, x, y, data.x); 
# 4554
}  }  }  
# 4555
} 
#endif
# 4557 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4558
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4568
::exit(___);}
#if 0
# 4558
{ 
# 4559
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4560
__sust_b_2d_i64_trap(surfObject, x, y, data); 
# 4561
} else { 
# 4562
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4563
__sust_b_2d_i64_clamp(surfObject, x, y, data); 
# 4564
} else { 
# 4565
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4566
__sust_b_2d_i64_zero(surfObject, x, y, data); 
# 4567
}  }  }  
# 4568
} 
#endif
# 4570 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4571
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4581
::exit(___);}
#if 0
# 4571
{ 
# 4572
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4573
__sust_b_2d_i64_trap(surfObject, x, y, data.x); 
# 4574
} else { 
# 4575
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4576
__sust_b_2d_i64_clamp(surfObject, x, y, data.x); 
# 4577
} else { 
# 4578
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4579
__sust_b_2d_i64_zero(surfObject, x, y, data.x); 
# 4580
}  }  }  
# 4581
} 
#endif
# 4583 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4584
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4597
::exit(___);}
#if 0
# 4584
{ 
# 4585
union { float f; unsigned i; } cvt; 
# 4586
(cvt.f) = data; 
# 4588
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4589
__sust_b_2d_i32_trap(surfObject, x, y, cvt.i); 
# 4590
} else { 
# 4591
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4592
__sust_b_2d_i32_clamp(surfObject, x, y, cvt.i); 
# 4593
} else { 
# 4594
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4595
__sust_b_2d_i32_zero(surfObject, x, y, cvt.i); 
# 4596
}  }  }  
# 4597
} 
#endif
# 4599 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4600
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4613
::exit(___);}
#if 0
# 4600
{ 
# 4601
union { float f; unsigned i; } cvt; 
# 4602
(cvt.f) = (data.x); 
# 4604
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4605
__sust_b_2d_i32_trap(surfObject, x, y, cvt.i); 
# 4606
} else { 
# 4607
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4608
__sust_b_2d_i32_clamp(surfObject, x, y, cvt.i); 
# 4609
} else { 
# 4610
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4611
__sust_b_2d_i32_zero(surfObject, x, y, cvt.i); 
# 4612
}  }  }  
# 4613
} 
#endif
# 4621 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4622
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4632
::exit(___);}
#if 0
# 4622
{ 
# 4623
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4624
__sust_b_2d_v2i8_trap(surfObject, x, y, make_uchar2(data.x, data.y)); 
# 4625
} else { 
# 4626
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4627
__sust_b_2d_v2i8_clamp(surfObject, x, y, make_uchar2(data.x, data.y)); 
# 4628
} else { 
# 4629
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4630
__sust_b_2d_v2i8_zero(surfObject, x, y, make_uchar2(data.x, data.y)); 
# 4631
}  }  }  
# 4632
} 
#endif
# 4634 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4635
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4645
::exit(___);}
#if 0
# 4635
{ 
# 4636
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4637
__sust_b_2d_v2i8_trap(surfObject, x, y, data); 
# 4638
} else { 
# 4639
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4640
__sust_b_2d_v2i8_clamp(surfObject, x, y, data); 
# 4641
} else { 
# 4642
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4643
__sust_b_2d_v2i8_zero(surfObject, x, y, data); 
# 4644
}  }  }  
# 4645
} 
#endif
# 4647 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4648
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4658
::exit(___);}
#if 0
# 4648
{ 
# 4649
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4650
__sust_b_2d_v2i16_trap(surfObject, x, y, make_ushort2(data.x, data.y)); 
# 4651
} else { 
# 4652
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4653
__sust_b_2d_v2i16_clamp(surfObject, x, y, make_ushort2(data.x, data.y)); 
# 4654
} else { 
# 4655
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4656
__sust_b_2d_v2i16_zero(surfObject, x, y, make_ushort2(data.x, data.y)); 
# 4657
}  }  }  
# 4658
} 
#endif
# 4660 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4661
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4671
::exit(___);}
#if 0
# 4661
{ 
# 4662
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4663
__sust_b_2d_v2i16_trap(surfObject, x, y, data); 
# 4664
} else { 
# 4665
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4666
__sust_b_2d_v2i16_clamp(surfObject, x, y, data); 
# 4667
} else { 
# 4668
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4669
__sust_b_2d_v2i16_zero(surfObject, x, y, data); 
# 4670
}  }  }  
# 4671
} 
#endif
# 4673 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4674
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4684
::exit(___);}
#if 0
# 4674
{ 
# 4675
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4676
__sust_b_2d_v2i32_trap(surfObject, x, y, make_uint2(data.x, data.y)); 
# 4677
} else { 
# 4678
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4679
__sust_b_2d_v2i32_clamp(surfObject, x, y, make_uint2(data.x, data.y)); 
# 4680
} else { 
# 4681
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4682
__sust_b_2d_v2i32_zero(surfObject, x, y, make_uint2(data.x, data.y)); 
# 4683
}  }  }  
# 4684
} 
#endif
# 4686 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4687
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4697
::exit(___);}
#if 0
# 4687
{ 
# 4688
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4689
__sust_b_2d_v2i32_trap(surfObject, x, y, data); 
# 4690
} else { 
# 4691
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4692
__sust_b_2d_v2i32_clamp(surfObject, x, y, data); 
# 4693
} else { 
# 4694
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4695
__sust_b_2d_v2i32_zero(surfObject, x, y, data); 
# 4696
}  }  }  
# 4697
} 
#endif
# 4699 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4700
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4710
::exit(___);}
#if 0
# 4700
{ 
# 4701
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4702
__sust_b_2d_v2i64_trap(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
# 4703
} else { 
# 4704
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4705
__sust_b_2d_v2i64_clamp(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
# 4706
} else { 
# 4707
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4708
__sust_b_2d_v2i64_zero(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
# 4709
}  }  }  
# 4710
} 
#endif
# 4712 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4713
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4723
::exit(___);}
#if 0
# 4713
{ 
# 4714
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4715
__sust_b_2d_v2i64_trap(surfObject, x, y, data); 
# 4716
} else { 
# 4717
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4718
__sust_b_2d_v2i64_clamp(surfObject, x, y, data); 
# 4719
} else { 
# 4720
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4721
__sust_b_2d_v2i64_zero(surfObject, x, y, data); 
# 4722
}  }  }  
# 4723
} 
#endif
# 4725 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4726
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4739
::exit(___);}
#if 0
# 4726
{ 
# 4727
union { float2 f; uint2 i; } cvt; 
# 4728
(cvt.f) = data; 
# 4730
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4731
__sust_b_2d_v2i32_trap(surfObject, x, y, cvt.i); 
# 4732
} else { 
# 4733
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4734
__sust_b_2d_v2i32_clamp(surfObject, x, y, cvt.i); 
# 4735
} else { 
# 4736
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4737
__sust_b_2d_v2i32_zero(surfObject, x, y, cvt.i); 
# 4738
}  }  }  
# 4739
} 
#endif
# 4747 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4748
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4758
::exit(___);}
#if 0
# 4748
{ 
# 4749
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4750
__sust_b_2d_v4i8_trap(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4751
} else { 
# 4752
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4753
__sust_b_2d_v4i8_clamp(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4754
} else { 
# 4755
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4756
__sust_b_2d_v4i8_zero(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 4757
}  }  }  
# 4758
} 
#endif
# 4760 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4761
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4771
::exit(___);}
#if 0
# 4761
{ 
# 4762
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4763
__sust_b_2d_v4i8_trap(surfObject, x, y, data); 
# 4764
} else { 
# 4765
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4766
__sust_b_2d_v4i8_clamp(surfObject, x, y, data); 
# 4767
} else { 
# 4768
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4769
__sust_b_2d_v4i8_zero(surfObject, x, y, data); 
# 4770
}  }  }  
# 4771
} 
#endif
# 4773 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4774
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4784
::exit(___);}
#if 0
# 4774
{ 
# 4775
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4776
__sust_b_2d_v4i16_trap(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4777
} else { 
# 4778
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4779
__sust_b_2d_v4i16_clamp(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4780
} else { 
# 4781
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4782
__sust_b_2d_v4i16_zero(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 4783
}  }  }  
# 4784
} 
#endif
# 4786 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4787
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4797
::exit(___);}
#if 0
# 4787
{ 
# 4788
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4789
__sust_b_2d_v4i16_trap(surfObject, x, y, data); 
# 4790
} else { 
# 4791
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4792
__sust_b_2d_v4i16_clamp(surfObject, x, y, data); 
# 4793
} else { 
# 4794
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4795
__sust_b_2d_v4i16_zero(surfObject, x, y, data); 
# 4796
}  }  }  
# 4797
} 
#endif
# 4799 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4800
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4810
::exit(___);}
#if 0
# 4800
{ 
# 4801
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4802
__sust_b_2d_v4i32_trap(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 4803
} else { 
# 4804
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4805
__sust_b_2d_v4i32_clamp(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 4806
} else { 
# 4807
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4808
__sust_b_2d_v4i32_zero(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 4809
}  }  }  
# 4810
} 
#endif
# 4812 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4813
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4823
::exit(___);}
#if 0
# 4813
{ 
# 4814
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4815
__sust_b_2d_v4i32_trap(surfObject, x, y, data); 
# 4816
} else { 
# 4817
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4818
__sust_b_2d_v4i32_clamp(surfObject, x, y, data); 
# 4819
} else { 
# 4820
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4821
__sust_b_2d_v4i32_zero(surfObject, x, y, data); 
# 4822
}  }  }  
# 4823
} 
#endif
# 4825 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
# 4826
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4839
::exit(___);}
#if 0
# 4826
{ 
# 4827
union { float4 f; uint4 i; } cvt; 
# 4828
(cvt.f) = data; 
# 4830
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4831
__sust_b_2d_v4i32_trap(surfObject, x, y, cvt.i); 
# 4832
} else { 
# 4833
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4834
__sust_b_2d_v4i32_clamp(surfObject, x, y, cvt.i); 
# 4835
} else { 
# 4836
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4837
__sust_b_2d_v4i32_zero(surfObject, x, y, cvt.i); 
# 4838
}  }  }  
# 4839
} 
#endif
# 4848 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4849
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4859
::exit(___);}
#if 0
# 4849
{ 
# 4850
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4851
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
# 4852
} else { 
# 4853
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4854
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
# 4855
} else { 
# 4856
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4857
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
# 4858
}  }  }  
# 4859
} 
#endif
# 4861 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4862
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4872
::exit(___);}
#if 0
# 4862
{ 
# 4863
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4864
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
# 4865
} else { 
# 4866
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4867
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
# 4868
} else { 
# 4869
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4870
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
# 4871
}  }  }  
# 4872
} 
#endif
# 4874 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4875
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4885
::exit(___);}
#if 0
# 4875
{ 
# 4876
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4877
__sust_b_3d_i8_trap(surfObject, x, y, z, data.x); 
# 4878
} else { 
# 4879
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4880
__sust_b_3d_i8_clamp(surfObject, x, y, z, data.x); 
# 4881
} else { 
# 4882
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4883
__sust_b_3d_i8_zero(surfObject, x, y, z, data.x); 
# 4884
}  }  }  
# 4885
} 
#endif
# 4887 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4888
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4898
::exit(___);}
#if 0
# 4888
{ 
# 4889
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4890
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
# 4891
} else { 
# 4892
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4893
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
# 4894
} else { 
# 4895
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4896
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
# 4897
}  }  }  
# 4898
} 
#endif
# 4900 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4901
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4911
::exit(___);}
#if 0
# 4901
{ 
# 4902
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4903
__sust_b_3d_i8_trap(surfObject, x, y, z, data.x); 
# 4904
} else { 
# 4905
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4906
__sust_b_3d_i8_clamp(surfObject, x, y, z, data.x); 
# 4907
} else { 
# 4908
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4909
__sust_b_3d_i8_zero(surfObject, x, y, z, data.x); 
# 4910
}  }  }  
# 4911
} 
#endif
# 4913 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4914
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4924
::exit(___);}
#if 0
# 4914
{ 
# 4915
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4916
__sust_b_3d_i16_trap(surfObject, x, y, z, data); 
# 4917
} else { 
# 4918
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4919
__sust_b_3d_i16_clamp(surfObject, x, y, z, data); 
# 4920
} else { 
# 4921
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4922
__sust_b_3d_i16_zero(surfObject, x, y, z, data); 
# 4923
}  }  }  
# 4924
} 
#endif
# 4926 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4927
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4937
::exit(___);}
#if 0
# 4927
{ 
# 4928
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4929
__sust_b_3d_i16_trap(surfObject, x, y, z, data.x); 
# 4930
} else { 
# 4931
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4932
__sust_b_3d_i16_clamp(surfObject, x, y, z, data.x); 
# 4933
} else { 
# 4934
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4935
__sust_b_3d_i16_zero(surfObject, x, y, z, data.x); 
# 4936
}  }  }  
# 4937
} 
#endif
# 4939 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4940
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4950
::exit(___);}
#if 0
# 4940
{ 
# 4941
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4942
__sust_b_3d_i16_trap(surfObject, x, y, z, data); 
# 4943
} else { 
# 4944
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4945
__sust_b_3d_i16_clamp(surfObject, x, y, z, data); 
# 4946
} else { 
# 4947
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4948
__sust_b_3d_i16_zero(surfObject, x, y, z, data); 
# 4949
}  }  }  
# 4950
} 
#endif
# 4952 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4953
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4963
::exit(___);}
#if 0
# 4953
{ 
# 4954
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4955
__sust_b_3d_i16_trap(surfObject, x, y, z, data.x); 
# 4956
} else { 
# 4957
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4958
__sust_b_3d_i16_clamp(surfObject, x, y, z, data.x); 
# 4959
} else { 
# 4960
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4961
__sust_b_3d_i16_zero(surfObject, x, y, z, data.x); 
# 4962
}  }  }  
# 4963
} 
#endif
# 4965 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4966
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4976
::exit(___);}
#if 0
# 4966
{ 
# 4967
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4968
__sust_b_3d_i32_trap(surfObject, x, y, z, data); 
# 4969
} else { 
# 4970
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4971
__sust_b_3d_i32_clamp(surfObject, x, y, z, data); 
# 4972
} else { 
# 4973
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4974
__sust_b_3d_i32_zero(surfObject, x, y, z, data); 
# 4975
}  }  }  
# 4976
} 
#endif
# 4978 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4979
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4989
::exit(___);}
#if 0
# 4979
{ 
# 4980
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4981
__sust_b_3d_i32_trap(surfObject, x, y, z, data.x); 
# 4982
} else { 
# 4983
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4984
__sust_b_3d_i32_clamp(surfObject, x, y, z, data.x); 
# 4985
} else { 
# 4986
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4987
__sust_b_3d_i32_zero(surfObject, x, y, z, data.x); 
# 4988
}  }  }  
# 4989
} 
#endif
# 4991 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 4992
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5002
::exit(___);}
#if 0
# 4992
{ 
# 4993
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4994
__sust_b_3d_i32_trap(surfObject, x, y, z, data); 
# 4995
} else { 
# 4996
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4997
__sust_b_3d_i32_clamp(surfObject, x, y, z, data); 
# 4998
} else { 
# 4999
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5000
__sust_b_3d_i32_zero(surfObject, x, y, z, data); 
# 5001
}  }  }  
# 5002
} 
#endif
# 5004 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5005
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5015
::exit(___);}
#if 0
# 5005
{ 
# 5006
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5007
__sust_b_3d_i32_trap(surfObject, x, y, z, data.x); 
# 5008
} else { 
# 5009
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5010
__sust_b_3d_i32_clamp(surfObject, x, y, z, data.x); 
# 5011
} else { 
# 5012
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5013
__sust_b_3d_i32_zero(surfObject, x, y, z, data.x); 
# 5014
}  }  }  
# 5015
} 
#endif
# 5017 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5018
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5028
::exit(___);}
#if 0
# 5018
{ 
# 5019
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5020
__sust_b_3d_i64_trap(surfObject, x, y, z, data); 
# 5021
} else { 
# 5022
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5023
__sust_b_3d_i64_clamp(surfObject, x, y, z, data); 
# 5024
} else { 
# 5025
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5026
__sust_b_3d_i64_zero(surfObject, x, y, z, data); 
# 5027
}  }  }  
# 5028
} 
#endif
# 5030 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5031
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5041
::exit(___);}
#if 0
# 5031
{ 
# 5032
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5033
__sust_b_3d_i64_trap(surfObject, x, y, z, data.x); 
# 5034
} else { 
# 5035
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5036
__sust_b_3d_i64_clamp(surfObject, x, y, z, data.x); 
# 5037
} else { 
# 5038
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5039
__sust_b_3d_i64_zero(surfObject, x, y, z, data.x); 
# 5040
}  }  }  
# 5041
} 
#endif
# 5043 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5044
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5054
::exit(___);}
#if 0
# 5044
{ 
# 5045
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5046
__sust_b_3d_i64_trap(surfObject, x, y, z, data); 
# 5047
} else { 
# 5048
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5049
__sust_b_3d_i64_clamp(surfObject, x, y, z, data); 
# 5050
} else { 
# 5051
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5052
__sust_b_3d_i64_zero(surfObject, x, y, z, data); 
# 5053
}  }  }  
# 5054
} 
#endif
# 5056 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5057
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5067
::exit(___);}
#if 0
# 5057
{ 
# 5058
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5059
__sust_b_3d_i64_trap(surfObject, x, y, z, data.x); 
# 5060
} else { 
# 5061
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5062
__sust_b_3d_i64_clamp(surfObject, x, y, z, data.x); 
# 5063
} else { 
# 5064
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5065
__sust_b_3d_i64_zero(surfObject, x, y, z, data.x); 
# 5066
}  }  }  
# 5067
} 
#endif
# 5069 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5070
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5083
::exit(___);}
#if 0
# 5070
{ 
# 5071
union { float f; unsigned i; } cvt; 
# 5072
(cvt.f) = data; 
# 5074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5075
__sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i); 
# 5076
} else { 
# 5077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5078
__sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i); 
# 5079
} else { 
# 5080
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5081
__sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i); 
# 5082
}  }  }  
# 5083
} 
#endif
# 5085 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5086
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5099
::exit(___);}
#if 0
# 5086
{ 
# 5087
union { float f; unsigned i; } cvt; 
# 5088
(cvt.f) = (data.x); 
# 5090
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5091
__sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i); 
# 5092
} else { 
# 5093
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5094
__sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i); 
# 5095
} else { 
# 5096
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5097
__sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i); 
# 5098
}  }  }  
# 5099
} 
#endif
# 5107 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5108
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5118
::exit(___);}
#if 0
# 5108
{ 
# 5109
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5110
__sust_b_3d_v2i8_trap(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
# 5111
} else { 
# 5112
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5113
__sust_b_3d_v2i8_clamp(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
# 5114
} else { 
# 5115
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5116
__sust_b_3d_v2i8_zero(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
# 5117
}  }  }  
# 5118
} 
#endif
# 5120 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5121
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5131
::exit(___);}
#if 0
# 5121
{ 
# 5122
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5123
__sust_b_3d_v2i8_trap(surfObject, x, y, z, data); 
# 5124
} else { 
# 5125
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5126
__sust_b_3d_v2i8_clamp(surfObject, x, y, z, data); 
# 5127
} else { 
# 5128
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5129
__sust_b_3d_v2i8_zero(surfObject, x, y, z, data); 
# 5130
}  }  }  
# 5131
} 
#endif
# 5133 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5134
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5144
::exit(___);}
#if 0
# 5134
{ 
# 5135
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5136
__sust_b_3d_v2i16_trap(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
# 5137
} else { 
# 5138
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5139
__sust_b_3d_v2i16_clamp(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
# 5140
} else { 
# 5141
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5142
__sust_b_3d_v2i16_zero(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
# 5143
}  }  }  
# 5144
} 
#endif
# 5146 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5147
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5157
::exit(___);}
#if 0
# 5147
{ 
# 5148
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5149
__sust_b_3d_v2i16_trap(surfObject, x, y, z, data); 
# 5150
} else { 
# 5151
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5152
__sust_b_3d_v2i16_clamp(surfObject, x, y, z, data); 
# 5153
} else { 
# 5154
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5155
__sust_b_3d_v2i16_zero(surfObject, x, y, z, data); 
# 5156
}  }  }  
# 5157
} 
#endif
# 5159 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5160
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5170
::exit(___);}
#if 0
# 5160
{ 
# 5161
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5162
__sust_b_3d_v2i32_trap(surfObject, x, y, z, make_uint2(data.x, data.y)); 
# 5163
} else { 
# 5164
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5165
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, make_uint2(data.x, data.y)); 
# 5166
} else { 
# 5167
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5168
__sust_b_3d_v2i32_zero(surfObject, x, y, z, make_uint2(data.x, data.y)); 
# 5169
}  }  }  
# 5170
} 
#endif
# 5172 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5173
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5183
::exit(___);}
#if 0
# 5173
{ 
# 5174
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5175
__sust_b_3d_v2i32_trap(surfObject, x, y, z, data); 
# 5176
} else { 
# 5177
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5178
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, data); 
# 5179
} else { 
# 5180
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5181
__sust_b_3d_v2i32_zero(surfObject, x, y, z, data); 
# 5182
}  }  }  
# 5183
} 
#endif
# 5185 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5186
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5196
::exit(___);}
#if 0
# 5186
{ 
# 5187
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5188
__sust_b_3d_v2i64_trap(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
# 5189
} else { 
# 5190
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5191
__sust_b_3d_v2i64_clamp(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
# 5192
} else { 
# 5193
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5194
__sust_b_3d_v2i64_zero(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
# 5195
}  }  }  
# 5196
} 
#endif
# 5198 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5199
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5209
::exit(___);}
#if 0
# 5199
{ 
# 5200
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5201
__sust_b_3d_v2i64_trap(surfObject, x, y, z, data); 
# 5202
} else { 
# 5203
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5204
__sust_b_3d_v2i64_clamp(surfObject, x, y, z, data); 
# 5205
} else { 
# 5206
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5207
__sust_b_3d_v2i64_zero(surfObject, x, y, z, data); 
# 5208
}  }  }  
# 5209
} 
#endif
# 5211 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5212
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5225
::exit(___);}
#if 0
# 5212
{ 
# 5213
union { float2 f; uint2 i; } cvt; 
# 5214
(cvt.f) = data; 
# 5216
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5217
__sust_b_3d_v2i32_trap(surfObject, x, y, z, cvt.i); 
# 5218
} else { 
# 5219
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5220
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, cvt.i); 
# 5221
} else { 
# 5222
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5223
__sust_b_3d_v2i32_zero(surfObject, x, y, z, cvt.i); 
# 5224
}  }  }  
# 5225
} 
#endif
# 5233 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5234
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5244
::exit(___);}
#if 0
# 5234
{ 
# 5235
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5236
__sust_b_3d_v4i8_trap(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5237
} else { 
# 5238
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5239
__sust_b_3d_v4i8_clamp(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5240
} else { 
# 5241
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5242
__sust_b_3d_v4i8_zero(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5243
}  }  }  
# 5244
} 
#endif
# 5246 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5247
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5257
::exit(___);}
#if 0
# 5247
{ 
# 5248
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5249
__sust_b_3d_v4i8_trap(surfObject, x, y, z, data); 
# 5250
} else { 
# 5251
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5252
__sust_b_3d_v4i8_clamp(surfObject, x, y, z, data); 
# 5253
} else { 
# 5254
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5255
__sust_b_3d_v4i8_zero(surfObject, x, y, z, data); 
# 5256
}  }  }  
# 5257
} 
#endif
# 5259 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5260
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5270
::exit(___);}
#if 0
# 5260
{ 
# 5261
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5262
__sust_b_3d_v4i16_trap(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5263
} else { 
# 5264
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5265
__sust_b_3d_v4i16_clamp(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5266
} else { 
# 5267
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5268
__sust_b_3d_v4i16_zero(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5269
}  }  }  
# 5270
} 
#endif
# 5272 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5273
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5283
::exit(___);}
#if 0
# 5273
{ 
# 5274
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5275
__sust_b_3d_v4i16_trap(surfObject, x, y, z, data); 
# 5276
} else { 
# 5277
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5278
__sust_b_3d_v4i16_clamp(surfObject, x, y, z, data); 
# 5279
} else { 
# 5280
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5281
__sust_b_3d_v4i16_zero(surfObject, x, y, z, data); 
# 5282
}  }  }  
# 5283
} 
#endif
# 5285 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5286
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5296
::exit(___);}
#if 0
# 5286
{ 
# 5287
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5288
__sust_b_3d_v4i32_trap(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
# 5289
} else { 
# 5290
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5291
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
# 5292
} else { 
# 5293
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5294
__sust_b_3d_v4i32_zero(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
# 5295
}  }  }  
# 5296
} 
#endif
# 5298 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5299
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5309
::exit(___);}
#if 0
# 5299
{ 
# 5300
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5301
__sust_b_3d_v4i32_trap(surfObject, x, y, z, data); 
# 5302
} else { 
# 5303
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5304
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, data); 
# 5305
} else { 
# 5306
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5307
__sust_b_3d_v4i32_zero(surfObject, x, y, z, data); 
# 5308
}  }  }  
# 5309
} 
#endif
# 5311 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
# 5312
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5325
::exit(___);}
#if 0
# 5312
{ 
# 5313
union { float4 f; uint4 i; } cvt; 
# 5314
(cvt.f) = data; 
# 5316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5317
__sust_b_3d_v4i32_trap(surfObject, x, y, z, cvt.i); 
# 5318
} else { 
# 5319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5320
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, cvt.i); 
# 5321
} else { 
# 5322
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5323
__sust_b_3d_v4i32_zero(surfObject, x, y, z, cvt.i); 
# 5324
}  }  }  
# 5325
} 
#endif
# 5333 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5334
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5344
::exit(___);}
#if 0
# 5334
{ 
# 5335
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5336
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
# 5337
} else { 
# 5338
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5339
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
# 5340
} else { 
# 5341
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5342
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
# 5343
}  }  }  
# 5344
} 
#endif
# 5346 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5347
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5357
::exit(___);}
#if 0
# 5347
{ 
# 5348
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5349
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
# 5350
} else { 
# 5351
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5352
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
# 5353
} else { 
# 5354
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5355
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
# 5356
}  }  }  
# 5357
} 
#endif
# 5359 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5360
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5370
::exit(___);}
#if 0
# 5360
{ 
# 5361
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5362
__sust_b_1d_array_i8_trap(surfObject, layer, x, data.x); 
# 5363
} else { 
# 5364
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5365
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x); 
# 5366
} else { 
# 5367
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5368
__sust_b_1d_array_i8_zero(surfObject, layer, x, data.x); 
# 5369
}  }  }  
# 5370
} 
#endif
# 5372 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5373
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5383
::exit(___);}
#if 0
# 5373
{ 
# 5374
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5375
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
# 5376
} else { 
# 5377
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5378
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
# 5379
} else { 
# 5380
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5381
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
# 5382
}  }  }  
# 5383
} 
#endif
# 5385 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5386
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5396
::exit(___);}
#if 0
# 5386
{ 
# 5387
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5388
__sust_b_1d_array_i8_trap(surfObject, layer, x, data.x); 
# 5389
} else { 
# 5390
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5391
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x); 
# 5392
} else { 
# 5393
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5394
__sust_b_1d_array_i8_zero(surfObject, layer, x, data.x); 
# 5395
}  }  }  
# 5396
} 
#endif
# 5398 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5399
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5409
::exit(___);}
#if 0
# 5399
{ 
# 5400
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5401
__sust_b_1d_array_i16_trap(surfObject, layer, x, data); 
# 5402
} else { 
# 5403
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5404
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data); 
# 5405
} else { 
# 5406
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5407
__sust_b_1d_array_i16_zero(surfObject, layer, x, data); 
# 5408
}  }  }  
# 5409
} 
#endif
# 5411 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5412
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5422
::exit(___);}
#if 0
# 5412
{ 
# 5413
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5414
__sust_b_1d_array_i16_trap(surfObject, layer, x, data.x); 
# 5415
} else { 
# 5416
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5417
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x); 
# 5418
} else { 
# 5419
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5420
__sust_b_1d_array_i16_zero(surfObject, layer, x, data.x); 
# 5421
}  }  }  
# 5422
} 
#endif
# 5424 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5425
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5435
::exit(___);}
#if 0
# 5425
{ 
# 5426
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5427
__sust_b_1d_array_i16_trap(surfObject, layer, x, data); 
# 5428
} else { 
# 5429
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5430
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data); 
# 5431
} else { 
# 5432
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5433
__sust_b_1d_array_i16_zero(surfObject, layer, x, data); 
# 5434
}  }  }  
# 5435
} 
#endif
# 5437 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5438
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5448
::exit(___);}
#if 0
# 5438
{ 
# 5439
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5440
__sust_b_1d_array_i16_trap(surfObject, layer, x, data.x); 
# 5441
} else { 
# 5442
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5443
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x); 
# 5444
} else { 
# 5445
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5446
__sust_b_1d_array_i16_zero(surfObject, layer, x, data.x); 
# 5447
}  }  }  
# 5448
} 
#endif
# 5450 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5451
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5461
::exit(___);}
#if 0
# 5451
{ 
# 5452
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5453
__sust_b_1d_array_i32_trap(surfObject, layer, x, data); 
# 5454
} else { 
# 5455
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5456
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data); 
# 5457
} else { 
# 5458
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5459
__sust_b_1d_array_i32_zero(surfObject, layer, x, data); 
# 5460
}  }  }  
# 5461
} 
#endif
# 5463 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5464
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5474
::exit(___);}
#if 0
# 5464
{ 
# 5465
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5466
__sust_b_1d_array_i32_trap(surfObject, layer, x, data.x); 
# 5467
} else { 
# 5468
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5469
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x); 
# 5470
} else { 
# 5471
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5472
__sust_b_1d_array_i32_zero(surfObject, layer, x, data.x); 
# 5473
}  }  }  
# 5474
} 
#endif
# 5476 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5477
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5487
::exit(___);}
#if 0
# 5477
{ 
# 5478
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5479
__sust_b_1d_array_i32_trap(surfObject, layer, x, data); 
# 5480
} else { 
# 5481
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5482
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data); 
# 5483
} else { 
# 5484
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5485
__sust_b_1d_array_i32_zero(surfObject, layer, x, data); 
# 5486
}  }  }  
# 5487
} 
#endif
# 5489 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5490
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5500
::exit(___);}
#if 0
# 5490
{ 
# 5491
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5492
__sust_b_1d_array_i32_trap(surfObject, layer, x, data.x); 
# 5493
} else { 
# 5494
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5495
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x); 
# 5496
} else { 
# 5497
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5498
__sust_b_1d_array_i32_zero(surfObject, layer, x, data.x); 
# 5499
}  }  }  
# 5500
} 
#endif
# 5502 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5503
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5513
::exit(___);}
#if 0
# 5503
{ 
# 5504
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5505
__sust_b_1d_array_i64_trap(surfObject, layer, x, data); 
# 5506
} else { 
# 5507
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5508
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data); 
# 5509
} else { 
# 5510
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5511
__sust_b_1d_array_i64_zero(surfObject, layer, x, data); 
# 5512
}  }  }  
# 5513
} 
#endif
# 5515 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5516
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5526
::exit(___);}
#if 0
# 5516
{ 
# 5517
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5518
__sust_b_1d_array_i64_trap(surfObject, layer, x, data.x); 
# 5519
} else { 
# 5520
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5521
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x); 
# 5522
} else { 
# 5523
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5524
__sust_b_1d_array_i64_zero(surfObject, layer, x, data.x); 
# 5525
}  }  }  
# 5526
} 
#endif
# 5528 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5529
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5539
::exit(___);}
#if 0
# 5529
{ 
# 5530
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5531
__sust_b_1d_array_i64_trap(surfObject, layer, x, data); 
# 5532
} else { 
# 5533
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5534
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data); 
# 5535
} else { 
# 5536
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5537
__sust_b_1d_array_i64_zero(surfObject, layer, x, data); 
# 5538
}  }  }  
# 5539
} 
#endif
# 5541 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5542
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5552
::exit(___);}
#if 0
# 5542
{ 
# 5543
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5544
__sust_b_1d_array_i64_trap(surfObject, layer, x, data.x); 
# 5545
} else { 
# 5546
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5547
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x); 
# 5548
} else { 
# 5549
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5550
__sust_b_1d_array_i64_zero(surfObject, layer, x, data.x); 
# 5551
}  }  }  
# 5552
} 
#endif
# 5554 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5555
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5568
::exit(___);}
#if 0
# 5555
{ 
# 5556
union { float f; unsigned i; } cvt; 
# 5557
(cvt.f) = data; 
# 5559
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5560
__sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i); 
# 5561
} else { 
# 5562
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5563
__sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i); 
# 5564
} else { 
# 5565
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5566
__sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i); 
# 5567
}  }  }  
# 5568
} 
#endif
# 5570 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5571
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5584
::exit(___);}
#if 0
# 5571
{ 
# 5572
union { float f; unsigned i; } cvt; 
# 5573
(cvt.f) = (data.x); 
# 5575
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5576
__sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i); 
# 5577
} else { 
# 5578
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5579
__sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i); 
# 5580
} else { 
# 5581
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5582
__sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i); 
# 5583
}  }  }  
# 5584
} 
#endif
# 5592 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5593
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5603
::exit(___);}
#if 0
# 5593
{ 
# 5594
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5595
__sust_b_1d_array_v2i8_trap(surfObject, layer, x, make_uchar2(data.x, data.y)); 
# 5596
} else { 
# 5597
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5598
__sust_b_1d_array_v2i8_clamp(surfObject, layer, x, make_uchar2(data.x, data.y)); 
# 5599
} else { 
# 5600
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5601
__sust_b_1d_array_v2i8_zero(surfObject, layer, x, make_uchar2(data.x, data.y)); 
# 5602
}  }  }  
# 5603
} 
#endif
# 5605 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5606
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5616
::exit(___);}
#if 0
# 5606
{ 
# 5607
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5608
__sust_b_1d_array_v2i8_trap(surfObject, layer, x, data); 
# 5609
} else { 
# 5610
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5611
__sust_b_1d_array_v2i8_clamp(surfObject, layer, x, data); 
# 5612
} else { 
# 5613
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5614
__sust_b_1d_array_v2i8_zero(surfObject, layer, x, data); 
# 5615
}  }  }  
# 5616
} 
#endif
# 5618 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5619
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5629
::exit(___);}
#if 0
# 5619
{ 
# 5620
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5621
__sust_b_1d_array_v2i16_trap(surfObject, layer, x, make_ushort2(data.x, data.y)); 
# 5622
} else { 
# 5623
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5624
__sust_b_1d_array_v2i16_clamp(surfObject, layer, x, make_ushort2(data.x, data.y)); 
# 5625
} else { 
# 5626
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5627
__sust_b_1d_array_v2i16_zero(surfObject, layer, x, make_ushort2(data.x, data.y)); 
# 5628
}  }  }  
# 5629
} 
#endif
# 5631 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5632
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5642
::exit(___);}
#if 0
# 5632
{ 
# 5633
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5634
__sust_b_1d_array_v2i16_trap(surfObject, layer, x, data); 
# 5635
} else { 
# 5636
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5637
__sust_b_1d_array_v2i16_clamp(surfObject, layer, x, data); 
# 5638
} else { 
# 5639
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5640
__sust_b_1d_array_v2i16_zero(surfObject, layer, x, data); 
# 5641
}  }  }  
# 5642
} 
#endif
# 5644 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5645
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5655
::exit(___);}
#if 0
# 5645
{ 
# 5646
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5647
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, make_uint2(data.x, data.y)); 
# 5648
} else { 
# 5649
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5650
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, make_uint2(data.x, data.y)); 
# 5651
} else { 
# 5652
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5653
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, make_uint2(data.x, data.y)); 
# 5654
}  }  }  
# 5655
} 
#endif
# 5657 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5658
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5668
::exit(___);}
#if 0
# 5658
{ 
# 5659
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5660
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, data); 
# 5661
} else { 
# 5662
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5663
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, data); 
# 5664
} else { 
# 5665
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5666
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, data); 
# 5667
}  }  }  
# 5668
} 
#endif
# 5670 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5671
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5681
::exit(___);}
#if 0
# 5671
{ 
# 5672
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5673
__sust_b_1d_array_v2i64_trap(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
# 5674
} else { 
# 5675
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5676
__sust_b_1d_array_v2i64_clamp(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
# 5677
} else { 
# 5678
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5679
__sust_b_1d_array_v2i64_zero(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
# 5680
}  }  }  
# 5681
} 
#endif
# 5683 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5684
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5694
::exit(___);}
#if 0
# 5684
{ 
# 5685
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5686
__sust_b_1d_array_v2i64_trap(surfObject, layer, x, data); 
# 5687
} else { 
# 5688
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5689
__sust_b_1d_array_v2i64_clamp(surfObject, layer, x, data); 
# 5690
} else { 
# 5691
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5692
__sust_b_1d_array_v2i64_zero(surfObject, layer, x, data); 
# 5693
}  }  }  
# 5694
} 
#endif
# 5696 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5697
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5710
::exit(___);}
#if 0
# 5697
{ 
# 5698
union { float2 f; uint2 i; } cvt; 
# 5699
(cvt.f) = data; 
# 5701
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5702
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, cvt.i); 
# 5703
} else { 
# 5704
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5705
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, cvt.i); 
# 5706
} else { 
# 5707
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5708
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, cvt.i); 
# 5709
}  }  }  
# 5710
} 
#endif
# 5718 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5719
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5729
::exit(___);}
#if 0
# 5719
{ 
# 5720
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5721
__sust_b_1d_array_v4i8_trap(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5722
} else { 
# 5723
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5724
__sust_b_1d_array_v4i8_clamp(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5725
} else { 
# 5726
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5727
__sust_b_1d_array_v4i8_zero(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
# 5728
}  }  }  
# 5729
} 
#endif
# 5731 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5732
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5742
::exit(___);}
#if 0
# 5732
{ 
# 5733
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5734
__sust_b_1d_array_v4i8_trap(surfObject, layer, x, data); 
# 5735
} else { 
# 5736
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5737
__sust_b_1d_array_v4i8_clamp(surfObject, layer, x, data); 
# 5738
} else { 
# 5739
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5740
__sust_b_1d_array_v4i8_zero(surfObject, layer, x, data); 
# 5741
}  }  }  
# 5742
} 
#endif
# 5744 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5745
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5755
::exit(___);}
#if 0
# 5745
{ 
# 5746
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5747
__sust_b_1d_array_v4i16_trap(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5748
} else { 
# 5749
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5750
__sust_b_1d_array_v4i16_clamp(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5751
} else { 
# 5752
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5753
__sust_b_1d_array_v4i16_zero(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
# 5754
}  }  }  
# 5755
} 
#endif
# 5757 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5758
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5768
::exit(___);}
#if 0
# 5758
{ 
# 5759
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5760
__sust_b_1d_array_v4i16_trap(surfObject, layer, x, data); 
# 5761
} else { 
# 5762
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5763
__sust_b_1d_array_v4i16_clamp(surfObject, layer, x, data); 
# 5764
} else { 
# 5765
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5766
__sust_b_1d_array_v4i16_zero(surfObject, layer, x, data); 
# 5767
}  }  }  
# 5768
} 
#endif
# 5770 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5771
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5781
::exit(___);}
#if 0
# 5771
{ 
# 5772
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5773
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 5774
} else { 
# 5775
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5776
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 5777
} else { 
# 5778
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5779
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
# 5780
}  }  }  
# 5781
} 
#endif
# 5783 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5784
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5794
::exit(___);}
#if 0
# 5784
{ 
# 5785
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5786
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, data); 
# 5787
} else { 
# 5788
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5789
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, data); 
# 5790
} else { 
# 5791
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5792
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, data); 
# 5793
}  }  }  
# 5794
} 
#endif
# 5796 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5797
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5810
::exit(___);}
#if 0
# 5797
{ 
# 5798
union { float4 f; uint4 i; } cvt; 
# 5799
(cvt.f) = data; 
# 5801
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5802
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, cvt.i); 
# 5803
} else { 
# 5804
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5805
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, cvt.i); 
# 5806
} else { 
# 5807
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5808
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, cvt.i); 
# 5809
}  }  }  
# 5810
} 
#endif
# 5818 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5819
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5829
::exit(___);}
#if 0
# 5819
{ 
# 5820
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5821
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
# 5822
} else { 
# 5823
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5824
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
# 5825
} else { 
# 5826
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5827
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
# 5828
}  }  }  
# 5829
} 
#endif
# 5831 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5832
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5842
::exit(___);}
#if 0
# 5832
{ 
# 5833
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5834
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
# 5835
} else { 
# 5836
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5837
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
# 5838
} else { 
# 5839
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5840
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
# 5841
}  }  }  
# 5842
} 
#endif
# 5844 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5845
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5855
::exit(___);}
#if 0
# 5845
{ 
# 5846
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5847
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x); 
# 5848
} else { 
# 5849
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5850
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x); 
# 5851
} else { 
# 5852
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5853
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x); 
# 5854
}  }  }  
# 5855
} 
#endif
# 5857 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5858
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5868
::exit(___);}
#if 0
# 5858
{ 
# 5859
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5860
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
# 5861
} else { 
# 5862
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5863
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
# 5864
} else { 
# 5865
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5866
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
# 5867
}  }  }  
# 5868
} 
#endif
# 5870 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5871
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5881
::exit(___);}
#if 0
# 5871
{ 
# 5872
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5873
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x); 
# 5874
} else { 
# 5875
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5876
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x); 
# 5877
} else { 
# 5878
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5879
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x); 
# 5880
}  }  }  
# 5881
} 
#endif
# 5883 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5884
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5894
::exit(___);}
#if 0
# 5884
{ 
# 5885
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5886
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data); 
# 5887
} else { 
# 5888
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5889
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data); 
# 5890
} else { 
# 5891
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5892
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data); 
# 5893
}  }  }  
# 5894
} 
#endif
# 5896 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5897
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5907
::exit(___);}
#if 0
# 5897
{ 
# 5898
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5899
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x); 
# 5900
} else { 
# 5901
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5902
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x); 
# 5903
} else { 
# 5904
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5905
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x); 
# 5906
}  }  }  
# 5907
} 
#endif
# 5909 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5910
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5920
::exit(___);}
#if 0
# 5910
{ 
# 5911
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5912
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data); 
# 5913
} else { 
# 5914
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5915
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data); 
# 5916
} else { 
# 5917
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5918
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data); 
# 5919
}  }  }  
# 5920
} 
#endif
# 5922 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5923
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5933
::exit(___);}
#if 0
# 5923
{ 
# 5924
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5925
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x); 
# 5926
} else { 
# 5927
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5928
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x); 
# 5929
} else { 
# 5930
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5931
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x); 
# 5932
}  }  }  
# 5933
} 
#endif
# 5935 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5936
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5946
::exit(___);}
#if 0
# 5936
{ 
# 5937
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5938
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data); 
# 5939
} else { 
# 5940
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5941
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data); 
# 5942
} else { 
# 5943
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5944
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data); 
# 5945
}  }  }  
# 5946
} 
#endif
# 5948 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5949
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5959
::exit(___);}
#if 0
# 5949
{ 
# 5950
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5951
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x); 
# 5952
} else { 
# 5953
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5954
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x); 
# 5955
} else { 
# 5956
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5957
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x); 
# 5958
}  }  }  
# 5959
} 
#endif
# 5961 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5962
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5972
::exit(___);}
#if 0
# 5962
{ 
# 5963
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5964
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data); 
# 5965
} else { 
# 5966
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5967
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data); 
# 5968
} else { 
# 5969
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5970
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data); 
# 5971
}  }  }  
# 5972
} 
#endif
# 5974 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5975
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5985
::exit(___);}
#if 0
# 5975
{ 
# 5976
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5977
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x); 
# 5978
} else { 
# 5979
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5980
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x); 
# 5981
} else { 
# 5982
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5983
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x); 
# 5984
}  }  }  
# 5985
} 
#endif
# 5987 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 5988
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5998
::exit(___);}
#if 0
# 5988
{ 
# 5989
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5990
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data); 
# 5991
} else { 
# 5992
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5993
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data); 
# 5994
} else { 
# 5995
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5996
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data); 
# 5997
}  }  }  
# 5998
} 
#endif
# 6000 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6001
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6011
::exit(___);}
#if 0
# 6001
{ 
# 6002
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6003
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x); 
# 6004
} else { 
# 6005
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6006
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x); 
# 6007
} else { 
# 6008
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6009
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x); 
# 6010
}  }  }  
# 6011
} 
#endif
# 6013 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6014
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6024
::exit(___);}
#if 0
# 6014
{ 
# 6015
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6016
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data); 
# 6017
} else { 
# 6018
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6019
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data); 
# 6020
} else { 
# 6021
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6022
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data); 
# 6023
}  }  }  
# 6024
} 
#endif
# 6026 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6027
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6037
::exit(___);}
#if 0
# 6027
{ 
# 6028
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6029
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x); 
# 6030
} else { 
# 6031
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6032
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x); 
# 6033
} else { 
# 6034
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6035
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x); 
# 6036
}  }  }  
# 6037
} 
#endif
# 6039 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6040
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6053
::exit(___);}
#if 0
# 6040
{ 
# 6041
union { float f; unsigned i; } cvt; 
# 6042
(cvt.f) = data; 
# 6044
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6045
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i); 
# 6046
} else { 
# 6047
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6048
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i); 
# 6049
} else { 
# 6050
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6051
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i); 
# 6052
}  }  }  
# 6053
} 
#endif
# 6055 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6056
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6069
::exit(___);}
#if 0
# 6056
{ 
# 6057
union { float f; unsigned i; } cvt; 
# 6058
(cvt.f) = (data.x); 
# 6060
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6061
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i); 
# 6062
} else { 
# 6063
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6064
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i); 
# 6065
} else { 
# 6066
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6067
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i); 
# 6068
}  }  }  
# 6069
} 
#endif
# 6077 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6078
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6088
::exit(___);}
#if 0
# 6078
{ 
# 6079
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6080
__sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
# 6081
} else { 
# 6082
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6083
__sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
# 6084
} else { 
# 6085
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6086
__sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
# 6087
}  }  }  
# 6088
} 
#endif
# 6090 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6091
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6101
::exit(___);}
#if 0
# 6091
{ 
# 6092
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6093
__sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, data); 
# 6094
} else { 
# 6095
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6096
__sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, data); 
# 6097
} else { 
# 6098
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6099
__sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, data); 
# 6100
}  }  }  
# 6101
} 
#endif
# 6103 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6104
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6114
::exit(___);}
#if 0
# 6104
{ 
# 6105
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6106
__sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
# 6107
} else { 
# 6108
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6109
__sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
# 6110
} else { 
# 6111
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6112
__sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
# 6113
}  }  }  
# 6114
} 
#endif
# 6116 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6117
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6127
::exit(___);}
#if 0
# 6117
{ 
# 6118
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6119
__sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, data); 
# 6120
} else { 
# 6121
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6122
__sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, data); 
# 6123
} else { 
# 6124
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6125
__sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, data); 
# 6126
}  }  }  
# 6127
} 
#endif
# 6129 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6130
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6140
::exit(___);}
#if 0
# 6130
{ 
# 6131
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6132
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
# 6133
} else { 
# 6134
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6135
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
# 6136
} else { 
# 6137
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6138
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
# 6139
}  }  }  
# 6140
} 
#endif
# 6142 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6143
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6153
::exit(___);}
#if 0
# 6143
{ 
# 6144
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6145
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, data); 
# 6146
} else { 
# 6147
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6148
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, data); 
# 6149
} else { 
# 6150
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6151
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, data); 
# 6152
}  }  }  
# 6153
} 
#endif
# 6155 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6156
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6166
::exit(___);}
#if 0
# 6156
{ 
# 6157
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6158
__sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
# 6159
} else { 
# 6160
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6161
__sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
# 6162
} else { 
# 6163
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6164
__sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
# 6165
}  }  }  
# 6166
} 
#endif
# 6168 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6169
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6179
::exit(___);}
#if 0
# 6169
{ 
# 6170
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6171
__sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, data); 
# 6172
} else { 
# 6173
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6174
__sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, data); 
# 6175
} else { 
# 6176
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6177
__sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, data); 
# 6178
}  }  }  
# 6179
} 
#endif
# 6181 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6182
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6195
::exit(___);}
#if 0
# 6182
{ 
# 6183
union { float2 f; uint2 i; } cvt; 
# 6184
(cvt.f) = data; 
# 6186
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6187
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, cvt.i); 
# 6188
} else { 
# 6189
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6190
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, cvt.i); 
# 6191
} else { 
# 6192
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6193
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, cvt.i); 
# 6194
}  }  }  
# 6195
} 
#endif
# 6203 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6204
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6214
::exit(___);}
#if 0
# 6204
{ 
# 6205
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6206
__sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6207
} else { 
# 6208
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6209
__sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6210
} else { 
# 6211
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6212
__sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6213
}  }  }  
# 6214
} 
#endif
# 6216 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6217
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6227
::exit(___);}
#if 0
# 6217
{ 
# 6218
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6219
__sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, data); 
# 6220
} else { 
# 6221
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6222
__sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, data); 
# 6223
} else { 
# 6224
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6225
__sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, data); 
# 6226
}  }  }  
# 6227
} 
#endif
# 6229 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6230
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6240
::exit(___);}
#if 0
# 6230
{ 
# 6231
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6232
__sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6233
} else { 
# 6234
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6235
__sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6236
} else { 
# 6237
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6238
__sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6239
}  }  }  
# 6240
} 
#endif
# 6242 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6243
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6253
::exit(___);}
#if 0
# 6243
{ 
# 6244
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6245
__sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, data); 
# 6246
} else { 
# 6247
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6248
__sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, data); 
# 6249
} else { 
# 6250
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6251
__sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, data); 
# 6252
}  }  }  
# 6253
} 
#endif
# 6255 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6256
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6266
::exit(___);}
#if 0
# 6256
{ 
# 6257
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6258
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6259
} else { 
# 6260
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6261
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6262
} else { 
# 6263
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6264
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6265
}  }  }  
# 6266
} 
#endif
# 6268 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6269
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6279
::exit(___);}
#if 0
# 6269
{ 
# 6270
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6271
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, data); 
# 6272
} else { 
# 6273
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6274
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, data); 
# 6275
} else { 
# 6276
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6277
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, data); 
# 6278
}  }  }  
# 6279
} 
#endif
# 6281 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
# 6282
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6295
::exit(___);}
#if 0
# 6282
{ 
# 6283
union { float4 f; uint4 i; } cvt; 
# 6284
(cvt.f) = data; 
# 6286
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6287
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, cvt.i); 
# 6288
} else { 
# 6289
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6290
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, cvt.i); 
# 6291
} else { 
# 6292
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6293
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, cvt.i); 
# 6294
}  }  }  
# 6295
} 
#endif
# 6303 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6304
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6314
::exit(___);}
#if 0
# 6304
{ 
# 6305
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6306
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
# 6307
} else { 
# 6308
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6309
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
# 6310
} else { 
# 6311
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6312
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
# 6313
}  }  }  
# 6314
} 
#endif
# 6316 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6317
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6327
::exit(___);}
#if 0
# 6317
{ 
# 6318
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6319
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
# 6320
} else { 
# 6321
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6322
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
# 6323
} else { 
# 6324
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6325
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
# 6326
}  }  }  
# 6327
} 
#endif
# 6329 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6330
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6340
::exit(___);}
#if 0
# 6330
{ 
# 6331
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6332
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x); 
# 6333
} else { 
# 6334
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6335
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x); 
# 6336
} else { 
# 6337
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6338
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x); 
# 6339
}  }  }  
# 6340
} 
#endif
# 6342 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6343
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6353
::exit(___);}
#if 0
# 6343
{ 
# 6344
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6345
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
# 6346
} else { 
# 6347
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6348
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
# 6349
} else { 
# 6350
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6351
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
# 6352
}  }  }  
# 6353
} 
#endif
# 6355 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6356
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6366
::exit(___);}
#if 0
# 6356
{ 
# 6357
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6358
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x); 
# 6359
} else { 
# 6360
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6361
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x); 
# 6362
} else { 
# 6363
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6364
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x); 
# 6365
}  }  }  
# 6366
} 
#endif
# 6368 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6369
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6379
::exit(___);}
#if 0
# 6369
{ 
# 6370
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6371
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data); 
# 6372
} else { 
# 6373
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6374
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data); 
# 6375
} else { 
# 6376
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6377
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data); 
# 6378
}  }  }  
# 6379
} 
#endif
# 6381 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6382
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6392
::exit(___);}
#if 0
# 6382
{ 
# 6383
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6384
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x); 
# 6385
} else { 
# 6386
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6387
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x); 
# 6388
} else { 
# 6389
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6390
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x); 
# 6391
}  }  }  
# 6392
} 
#endif
# 6394 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6395
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6405
::exit(___);}
#if 0
# 6395
{ 
# 6396
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6397
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data); 
# 6398
} else { 
# 6399
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6400
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data); 
# 6401
} else { 
# 6402
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6403
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data); 
# 6404
}  }  }  
# 6405
} 
#endif
# 6407 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6408
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6418
::exit(___);}
#if 0
# 6408
{ 
# 6409
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6410
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x); 
# 6411
} else { 
# 6412
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6413
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x); 
# 6414
} else { 
# 6415
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6416
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x); 
# 6417
}  }  }  
# 6418
} 
#endif
# 6420 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6421
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6431
::exit(___);}
#if 0
# 6421
{ 
# 6422
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6423
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data); 
# 6424
} else { 
# 6425
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6426
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data); 
# 6427
} else { 
# 6428
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6429
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data); 
# 6430
}  }  }  
# 6431
} 
#endif
# 6433 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6434
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6444
::exit(___);}
#if 0
# 6434
{ 
# 6435
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6436
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x); 
# 6437
} else { 
# 6438
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6439
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x); 
# 6440
} else { 
# 6441
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6442
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x); 
# 6443
}  }  }  
# 6444
} 
#endif
# 6446 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6447
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6457
::exit(___);}
#if 0
# 6447
{ 
# 6448
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6449
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data); 
# 6450
} else { 
# 6451
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6452
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data); 
# 6453
} else { 
# 6454
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6455
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data); 
# 6456
}  }  }  
# 6457
} 
#endif
# 6459 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6460
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6470
::exit(___);}
#if 0
# 6460
{ 
# 6461
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6462
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x); 
# 6463
} else { 
# 6464
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6465
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x); 
# 6466
} else { 
# 6467
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6468
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x); 
# 6469
}  }  }  
# 6470
} 
#endif
# 6472 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6473
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6483
::exit(___);}
#if 0
# 6473
{ 
# 6474
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6475
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data); 
# 6476
} else { 
# 6477
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6478
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data); 
# 6479
} else { 
# 6480
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6481
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data); 
# 6482
}  }  }  
# 6483
} 
#endif
# 6485 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6486
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6496
::exit(___);}
#if 0
# 6486
{ 
# 6487
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6488
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x); 
# 6489
} else { 
# 6490
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6491
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x); 
# 6492
} else { 
# 6493
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6494
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x); 
# 6495
}  }  }  
# 6496
} 
#endif
# 6498 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6499
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6509
::exit(___);}
#if 0
# 6499
{ 
# 6500
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6501
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data); 
# 6502
} else { 
# 6503
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6504
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data); 
# 6505
} else { 
# 6506
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6507
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data); 
# 6508
}  }  }  
# 6509
} 
#endif
# 6511 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6512
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6522
::exit(___);}
#if 0
# 6512
{ 
# 6513
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6514
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x); 
# 6515
} else { 
# 6516
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6517
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x); 
# 6518
} else { 
# 6519
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6520
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x); 
# 6521
}  }  }  
# 6522
} 
#endif
# 6524 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6525
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6538
::exit(___);}
#if 0
# 6525
{ 
# 6526
union { float f; unsigned i; } cvt; 
# 6527
(cvt.f) = data; 
# 6529
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6530
__sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i); 
# 6531
} else { 
# 6532
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6533
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i); 
# 6534
} else { 
# 6535
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6536
__sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i); 
# 6537
}  }  }  
# 6538
} 
#endif
# 6540 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6541
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6554
::exit(___);}
#if 0
# 6541
{ 
# 6542
union { float f; unsigned i; } cvt; 
# 6543
(cvt.f) = (data.x); 
# 6545
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6546
__sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i); 
# 6547
} else { 
# 6548
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6549
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i); 
# 6550
} else { 
# 6551
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6552
__sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i); 
# 6553
}  }  }  
# 6554
} 
#endif
# 6562 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6563
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6573
::exit(___);}
#if 0
# 6563
{ 
# 6564
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6565
__sust_b_2d_array_v2i8_trap(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
# 6566
} else { 
# 6567
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6568
__sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
# 6569
} else { 
# 6570
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6571
__sust_b_2d_array_v2i8_zero(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
# 6572
}  }  }  
# 6573
} 
#endif
# 6575 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6576
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6586
::exit(___);}
#if 0
# 6576
{ 
# 6577
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6578
__sust_b_2d_array_v2i8_trap(surfObject, face, x, y, data); 
# 6579
} else { 
# 6580
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6581
__sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, data); 
# 6582
} else { 
# 6583
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6584
__sust_b_2d_array_v2i8_zero(surfObject, face, x, y, data); 
# 6585
}  }  }  
# 6586
} 
#endif
# 6588 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6589
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6599
::exit(___);}
#if 0
# 6589
{ 
# 6590
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6591
__sust_b_2d_array_v2i16_trap(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
# 6592
} else { 
# 6593
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6594
__sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
# 6595
} else { 
# 6596
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6597
__sust_b_2d_array_v2i16_zero(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
# 6598
}  }  }  
# 6599
} 
#endif
# 6601 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6602
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6612
::exit(___);}
#if 0
# 6602
{ 
# 6603
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6604
__sust_b_2d_array_v2i16_trap(surfObject, face, x, y, data); 
# 6605
} else { 
# 6606
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6607
__sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, data); 
# 6608
} else { 
# 6609
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6610
__sust_b_2d_array_v2i16_zero(surfObject, face, x, y, data); 
# 6611
}  }  }  
# 6612
} 
#endif
# 6614 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6615
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6625
::exit(___);}
#if 0
# 6615
{ 
# 6616
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6617
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, make_uint2(data.x, data.y)); 
# 6618
} else { 
# 6619
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6620
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, make_uint2(data.x, data.y)); 
# 6621
} else { 
# 6622
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6623
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, make_uint2(data.x, data.y)); 
# 6624
}  }  }  
# 6625
} 
#endif
# 6627 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6628
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6638
::exit(___);}
#if 0
# 6628
{ 
# 6629
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6630
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, data); 
# 6631
} else { 
# 6632
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6633
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, data); 
# 6634
} else { 
# 6635
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6636
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, data); 
# 6637
}  }  }  
# 6638
} 
#endif
# 6640 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6641
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6651
::exit(___);}
#if 0
# 6641
{ 
# 6642
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6643
__sust_b_2d_array_v2i64_trap(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
# 6644
} else { 
# 6645
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6646
__sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
# 6647
} else { 
# 6648
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6649
__sust_b_2d_array_v2i64_zero(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
# 6650
}  }  }  
# 6651
} 
#endif
# 6653 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6654
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6664
::exit(___);}
#if 0
# 6654
{ 
# 6655
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6656
__sust_b_2d_array_v2i64_trap(surfObject, face, x, y, data); 
# 6657
} else { 
# 6658
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6659
__sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, data); 
# 6660
} else { 
# 6661
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6662
__sust_b_2d_array_v2i64_zero(surfObject, face, x, y, data); 
# 6663
}  }  }  
# 6664
} 
#endif
# 6666 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6667
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6680
::exit(___);}
#if 0
# 6667
{ 
# 6668
union { float2 f; uint2 i; } cvt; 
# 6669
(cvt.f) = data; 
# 6671
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6672
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, cvt.i); 
# 6673
} else { 
# 6674
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6675
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, cvt.i); 
# 6676
} else { 
# 6677
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6678
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, cvt.i); 
# 6679
}  }  }  
# 6680
} 
#endif
# 6688 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6689
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6699
::exit(___);}
#if 0
# 6689
{ 
# 6690
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6691
__sust_b_2d_array_v4i8_trap(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6692
} else { 
# 6693
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6694
__sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6695
} else { 
# 6696
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6697
__sust_b_2d_array_v4i8_zero(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 6698
}  }  }  
# 6699
} 
#endif
# 6701 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6702
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6712
::exit(___);}
#if 0
# 6702
{ 
# 6703
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6704
__sust_b_2d_array_v4i8_trap(surfObject, face, x, y, data); 
# 6705
} else { 
# 6706
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6707
__sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, data); 
# 6708
} else { 
# 6709
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6710
__sust_b_2d_array_v4i8_zero(surfObject, face, x, y, data); 
# 6711
}  }  }  
# 6712
} 
#endif
# 6714 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6715
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6725
::exit(___);}
#if 0
# 6715
{ 
# 6716
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6717
__sust_b_2d_array_v4i16_trap(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6718
} else { 
# 6719
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6720
__sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6721
} else { 
# 6722
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6723
__sust_b_2d_array_v4i16_zero(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 6724
}  }  }  
# 6725
} 
#endif
# 6727 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6728
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6738
::exit(___);}
#if 0
# 6728
{ 
# 6729
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6730
__sust_b_2d_array_v4i16_trap(surfObject, face, x, y, data); 
# 6731
} else { 
# 6732
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6733
__sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, data); 
# 6734
} else { 
# 6735
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6736
__sust_b_2d_array_v4i16_zero(surfObject, face, x, y, data); 
# 6737
}  }  }  
# 6738
} 
#endif
# 6740 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6741
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6751
::exit(___);}
#if 0
# 6741
{ 
# 6742
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6743
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6744
} else { 
# 6745
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6746
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6747
} else { 
# 6748
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6749
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 6750
}  }  }  
# 6751
} 
#endif
# 6753 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6754
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6764
::exit(___);}
#if 0
# 6754
{ 
# 6755
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6756
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, data); 
# 6757
} else { 
# 6758
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6759
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, data); 
# 6760
} else { 
# 6761
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6762
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, data); 
# 6763
}  }  }  
# 6764
} 
#endif
# 6766 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
# 6767
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6780
::exit(___);}
#if 0
# 6767
{ 
# 6768
union { float4 f; uint4 i; } cvt; 
# 6769
(cvt.f) = data; 
# 6771
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6772
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, cvt.i); 
# 6773
} else { 
# 6774
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6775
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, cvt.i); 
# 6776
} else { 
# 6777
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6778
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, cvt.i); 
# 6779
}  }  }  
# 6780
} 
#endif
# 6788 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6789
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6799
::exit(___);}
#if 0
# 6789
{ 
# 6790
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6791
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
# 6792
} else { 
# 6793
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6794
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
# 6795
} else { 
# 6796
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6797
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
# 6798
}  }  }  
# 6799
} 
#endif
# 6801 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6802
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6812
::exit(___);}
#if 0
# 6802
{ 
# 6803
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6804
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
# 6805
} else { 
# 6806
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6807
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
# 6808
} else { 
# 6809
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6810
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
# 6811
}  }  }  
# 6812
} 
#endif
# 6814 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6815
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6825
::exit(___);}
#if 0
# 6815
{ 
# 6816
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6817
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x); 
# 6818
} else { 
# 6819
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6820
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x); 
# 6821
} else { 
# 6822
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6823
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x); 
# 6824
}  }  }  
# 6825
} 
#endif
# 6827 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6828
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6838
::exit(___);}
#if 0
# 6828
{ 
# 6829
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6830
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
# 6831
} else { 
# 6832
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6833
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
# 6834
} else { 
# 6835
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6836
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
# 6837
}  }  }  
# 6838
} 
#endif
# 6840 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6841
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6851
::exit(___);}
#if 0
# 6841
{ 
# 6842
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6843
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x); 
# 6844
} else { 
# 6845
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6846
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x); 
# 6847
} else { 
# 6848
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6849
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x); 
# 6850
}  }  }  
# 6851
} 
#endif
# 6853 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6854
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6864
::exit(___);}
#if 0
# 6854
{ 
# 6855
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6856
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data); 
# 6857
} else { 
# 6858
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6859
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data); 
# 6860
} else { 
# 6861
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6862
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data); 
# 6863
}  }  }  
# 6864
} 
#endif
# 6866 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6867
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6877
::exit(___);}
#if 0
# 6867
{ 
# 6868
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6869
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x); 
# 6870
} else { 
# 6871
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6872
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x); 
# 6873
} else { 
# 6874
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6875
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x); 
# 6876
}  }  }  
# 6877
} 
#endif
# 6879 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6880
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6890
::exit(___);}
#if 0
# 6880
{ 
# 6881
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6882
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data); 
# 6883
} else { 
# 6884
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6885
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data); 
# 6886
} else { 
# 6887
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6888
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data); 
# 6889
}  }  }  
# 6890
} 
#endif
# 6892 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6893
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6903
::exit(___);}
#if 0
# 6893
{ 
# 6894
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6895
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x); 
# 6896
} else { 
# 6897
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6898
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x); 
# 6899
} else { 
# 6900
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6901
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x); 
# 6902
}  }  }  
# 6903
} 
#endif
# 6905 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6906
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6916
::exit(___);}
#if 0
# 6906
{ 
# 6907
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6908
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data); 
# 6909
} else { 
# 6910
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6911
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data); 
# 6912
} else { 
# 6913
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6914
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data); 
# 6915
}  }  }  
# 6916
} 
#endif
# 6918 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6919
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6929
::exit(___);}
#if 0
# 6919
{ 
# 6920
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6921
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x); 
# 6922
} else { 
# 6923
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6924
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x); 
# 6925
} else { 
# 6926
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6927
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x); 
# 6928
}  }  }  
# 6929
} 
#endif
# 6931 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6932
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6942
::exit(___);}
#if 0
# 6932
{ 
# 6933
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6934
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data); 
# 6935
} else { 
# 6936
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6937
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data); 
# 6938
} else { 
# 6939
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6940
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data); 
# 6941
}  }  }  
# 6942
} 
#endif
# 6944 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6945
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6955
::exit(___);}
#if 0
# 6945
{ 
# 6946
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6947
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x); 
# 6948
} else { 
# 6949
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6950
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x); 
# 6951
} else { 
# 6952
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6953
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x); 
# 6954
}  }  }  
# 6955
} 
#endif
# 6957 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6958
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6968
::exit(___);}
#if 0
# 6958
{ 
# 6959
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6960
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data); 
# 6961
} else { 
# 6962
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6963
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data); 
# 6964
} else { 
# 6965
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6966
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data); 
# 6967
}  }  }  
# 6968
} 
#endif
# 6970 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6971
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6981
::exit(___);}
#if 0
# 6971
{ 
# 6972
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6973
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x); 
# 6974
} else { 
# 6975
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6976
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x); 
# 6977
} else { 
# 6978
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6979
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x); 
# 6980
}  }  }  
# 6981
} 
#endif
# 6983 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6984
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6994
::exit(___);}
#if 0
# 6984
{ 
# 6985
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6986
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data); 
# 6987
} else { 
# 6988
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6989
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data); 
# 6990
} else { 
# 6991
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6992
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data); 
# 6993
}  }  }  
# 6994
} 
#endif
# 6996 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 6997
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7007
::exit(___);}
#if 0
# 6997
{ 
# 6998
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6999
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x); 
# 7000
} else { 
# 7001
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7002
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x); 
# 7003
} else { 
# 7004
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7005
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x); 
# 7006
}  }  }  
# 7007
} 
#endif
# 7009 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7010
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7023
::exit(___);}
#if 0
# 7010
{ 
# 7011
union { float f; unsigned i; } cvt; 
# 7012
(cvt.f) = data; 
# 7014
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7015
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i); 
# 7016
} else { 
# 7017
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7018
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i); 
# 7019
} else { 
# 7020
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7021
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i); 
# 7022
}  }  }  
# 7023
} 
#endif
# 7025 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7026
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7039
::exit(___);}
#if 0
# 7026
{ 
# 7027
union { float f; unsigned i; } cvt; 
# 7028
(cvt.f) = (data.x); 
# 7030
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7031
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i); 
# 7032
} else { 
# 7033
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7034
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i); 
# 7035
} else { 
# 7036
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7037
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i); 
# 7038
}  }  }  
# 7039
} 
#endif
# 7047 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7048
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7058
::exit(___);}
#if 0
# 7048
{ 
# 7049
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7050
__sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
# 7051
} else { 
# 7052
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7053
__sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
# 7054
} else { 
# 7055
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7056
__sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
# 7057
}  }  }  
# 7058
} 
#endif
# 7060 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7061
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7071
::exit(___);}
#if 0
# 7061
{ 
# 7062
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7063
__sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, data); 
# 7064
} else { 
# 7065
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7066
__sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, data); 
# 7067
} else { 
# 7068
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7069
__sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, data); 
# 7070
}  }  }  
# 7071
} 
#endif
# 7073 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7074
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7084
::exit(___);}
#if 0
# 7074
{ 
# 7075
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7076
__sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
# 7077
} else { 
# 7078
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7079
__sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
# 7080
} else { 
# 7081
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7082
__sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
# 7083
}  }  }  
# 7084
} 
#endif
# 7086 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7087
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7097
::exit(___);}
#if 0
# 7087
{ 
# 7088
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7089
__sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, data); 
# 7090
} else { 
# 7091
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7092
__sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, data); 
# 7093
} else { 
# 7094
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7095
__sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, data); 
# 7096
}  }  }  
# 7097
} 
#endif
# 7099 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7100
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7110
::exit(___);}
#if 0
# 7100
{ 
# 7101
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7102
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
# 7103
} else { 
# 7104
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7105
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
# 7106
} else { 
# 7107
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7108
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
# 7109
}  }  }  
# 7110
} 
#endif
# 7112 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7113
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7123
::exit(___);}
#if 0
# 7113
{ 
# 7114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7115
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, data); 
# 7116
} else { 
# 7117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7118
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, data); 
# 7119
} else { 
# 7120
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7121
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, data); 
# 7122
}  }  }  
# 7123
} 
#endif
# 7125 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7126
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7136
::exit(___);}
#if 0
# 7126
{ 
# 7127
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7128
__sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
# 7129
} else { 
# 7130
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7131
__sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
# 7132
} else { 
# 7133
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7134
__sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
# 7135
}  }  }  
# 7136
} 
#endif
# 7138 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7139
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7149
::exit(___);}
#if 0
# 7139
{ 
# 7140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7141
__sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, data); 
# 7142
} else { 
# 7143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7144
__sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, data); 
# 7145
} else { 
# 7146
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7147
__sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, data); 
# 7148
}  }  }  
# 7149
} 
#endif
# 7151 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7152
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7165
::exit(___);}
#if 0
# 7152
{ 
# 7153
union { float2 f; uint2 i; } cvt; 
# 7154
(cvt.f) = data; 
# 7156
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7157
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, cvt.i); 
# 7158
} else { 
# 7159
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7160
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, cvt.i); 
# 7161
} else { 
# 7162
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7163
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, cvt.i); 
# 7164
}  }  }  
# 7165
} 
#endif
# 7173 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7174
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7184
::exit(___);}
#if 0
# 7174
{ 
# 7175
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7176
__sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 7177
} else { 
# 7178
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7179
__sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 7180
} else { 
# 7181
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7182
__sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
# 7183
}  }  }  
# 7184
} 
#endif
# 7186 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7187
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7197
::exit(___);}
#if 0
# 7187
{ 
# 7188
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7189
__sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, data); 
# 7190
} else { 
# 7191
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7192
__sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, data); 
# 7193
} else { 
# 7194
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7195
__sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, data); 
# 7196
}  }  }  
# 7197
} 
#endif
# 7199 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7200
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7210
::exit(___);}
#if 0
# 7200
{ 
# 7201
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7202
__sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 7203
} else { 
# 7204
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7205
__sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 7206
} else { 
# 7207
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7208
__sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
# 7209
}  }  }  
# 7210
} 
#endif
# 7212 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7213
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7223
::exit(___);}
#if 0
# 7213
{ 
# 7214
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7215
__sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, data); 
# 7216
} else { 
# 7217
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7218
__sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, data); 
# 7219
} else { 
# 7220
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7221
__sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, data); 
# 7222
}  }  }  
# 7223
} 
#endif
# 7225 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7226
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7236
::exit(___);}
#if 0
# 7226
{ 
# 7227
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7228
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 7229
} else { 
# 7230
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7231
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 7232
} else { 
# 7233
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7234
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
# 7235
}  }  }  
# 7236
} 
#endif
# 7238 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7239
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7249
::exit(___);}
#if 0
# 7239
{ 
# 7240
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7241
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, data); 
# 7242
} else { 
# 7243
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7244
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, data); 
# 7245
} else { 
# 7246
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7247
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, data); 
# 7248
}  }  }  
# 7249
} 
#endif
# 7251 "/usr/local/cuda-7.0//include/surface_indirect_functions.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
# 7252
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7265
::exit(___);}
#if 0
# 7252
{ 
# 7253
union { float4 f; uint4 i; } cvt; 
# 7254
(cvt.f) = data; 
# 7256
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7257
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, cvt.i); 
# 7258
} else { 
# 7259
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7260
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, cvt.i); 
# 7261
} else { 
# 7262
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7263
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, cvt.i); 
# 7264
}  }  }  
# 7265
} 
#endif
# 71 "/usr/local/cuda-7.0//include/device_launch_parameters.h"
extern "C" { extern const uint3 __device_builtin_variable_threadIdx; } 
# 72
extern "C" { extern const uint3 __device_builtin_variable_blockIdx; } 
# 73
extern "C" { extern const dim3 __device_builtin_variable_blockDim; } 
# 74
extern "C" { extern const dim3 __device_builtin_variable_gridDim; } 
# 75
extern "C" { extern const int __device_builtin_variable_warpSize; } 
# 164 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 165
cudaLaunchKernel(const T *
# 166
func, dim3 
# 167
gridDim, dim3 
# 168
blockDim, void **
# 169
args, size_t 
# 170
sharedMem = 0, cudaStream_t 
# 171
stream = 0) 
# 173
{ 
# 174
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 175
} 
# 202 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 203
cudaSetupArgument(T 
# 204
arg, size_t 
# 205
offset) 
# 207
{ 
# 208
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
# 209
} 
# 241 "/usr/local/cuda-7.0//include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 242
event, unsigned 
# 243
flags) 
# 245
{ 
# 246
return ::cudaEventCreateWithFlags(event, flags); 
# 247
} 
# 304 "/usr/local/cuda-7.0//include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 305
ptr, size_t 
# 306
size, unsigned 
# 307
flags) 
# 309
{ 
# 310
return ::cudaHostAlloc(ptr, size, flags); 
# 311
} 
# 313
template< class T> static inline cudaError_t 
# 314
cudaHostAlloc(T **
# 315
ptr, size_t 
# 316
size, unsigned 
# 317
flags) 
# 319
{ 
# 320
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 321
} 
# 323
template< class T> static inline cudaError_t 
# 324
cudaHostGetDevicePointer(T **
# 325
pDevice, void *
# 326
pHost, unsigned 
# 327
flags) 
# 329
{ 
# 330
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 331
} 
# 402 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 403
cudaMallocManaged(T **
# 404
devPtr, size_t 
# 405
size, unsigned 
# 406
flags = 1) 
# 408
{ 
# 409
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 410
} 
# 478 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 479
cudaStreamAttachMemAsync(cudaStream_t 
# 480
stream, T *
# 481
devPtr, size_t 
# 482
length = 0, unsigned 
# 483
flags = 4) 
# 485
{ 
# 486
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 487
} 
# 489
template< class T> inline cudaError_t 
# 490
cudaMalloc(T **
# 491
devPtr, size_t 
# 492
size) 
# 494
{ 
# 495
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 496
} 
# 498
template< class T> static inline cudaError_t 
# 499
cudaMallocHost(T **
# 500
ptr, size_t 
# 501
size, unsigned 
# 502
flags = 0) 
# 504
{ 
# 505
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 506
} 
# 508
template< class T> static inline cudaError_t 
# 509
cudaMallocPitch(T **
# 510
devPtr, size_t *
# 511
pitch, size_t 
# 512
width, size_t 
# 513
height) 
# 515
{ 
# 516
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 517
} 
# 554 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 555
cudaMemcpyToSymbol(const T &
# 556
symbol, const void *
# 557
src, size_t 
# 558
count, size_t 
# 559
offset = 0, cudaMemcpyKind 
# 560
kind = cudaMemcpyHostToDevice) 
# 562
{ 
# 563
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 564
} 
# 606 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 607
cudaMemcpyToSymbolAsync(const T &
# 608
symbol, const void *
# 609
src, size_t 
# 610
count, size_t 
# 611
offset = 0, cudaMemcpyKind 
# 612
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 613
stream = 0) 
# 615
{ 
# 616
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 617
} 
# 652 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 653
cudaMemcpyFromSymbol(void *
# 654
dst, const T &
# 655
symbol, size_t 
# 656
count, size_t 
# 657
offset = 0, cudaMemcpyKind 
# 658
kind = cudaMemcpyDeviceToHost) 
# 660
{ 
# 661
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 662
} 
# 704 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 705
cudaMemcpyFromSymbolAsync(void *
# 706
dst, const T &
# 707
symbol, size_t 
# 708
count, size_t 
# 709
offset = 0, cudaMemcpyKind 
# 710
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 711
stream = 0) 
# 713
{ 
# 714
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 715
} 
# 737 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 738
cudaGetSymbolAddress(void **
# 739
devPtr, const T &
# 740
symbol) 
# 742
{ 
# 743
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 744
} 
# 766 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 767
cudaGetSymbolSize(size_t *
# 768
size, const T &
# 769
symbol) 
# 771
{ 
# 772
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 773
} 
# 809 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 810
cudaBindTexture(size_t *
# 811
offset, const texture< T, dim, readMode>  &
# 812
tex, const void *
# 813
devPtr, const cudaChannelFormatDesc &
# 814
desc, size_t 
# 815
size = ((2147483647) * 2U) + 1U) 
# 817
{ 
# 818
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 819
} 
# 854 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 855
cudaBindTexture(size_t *
# 856
offset, const texture< T, dim, readMode>  &
# 857
tex, const void *
# 858
devPtr, size_t 
# 859
size = ((2147483647) * 2U) + 1U) 
# 861
{ 
# 862
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 863
} 
# 910 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 911
cudaBindTexture2D(size_t *
# 912
offset, const texture< T, dim, readMode>  &
# 913
tex, const void *
# 914
devPtr, const cudaChannelFormatDesc &
# 915
desc, size_t 
# 916
width, size_t 
# 917
height, size_t 
# 918
pitch) 
# 920
{ 
# 921
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 922
} 
# 968 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 969
cudaBindTexture2D(size_t *
# 970
offset, const texture< T, dim, readMode>  &
# 971
tex, const void *
# 972
devPtr, size_t 
# 973
width, size_t 
# 974
height, size_t 
# 975
pitch) 
# 977
{ 
# 978
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 979
} 
# 1010 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1011
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1012
tex, cudaArray_const_t 
# 1013
array, const cudaChannelFormatDesc &
# 1014
desc) 
# 1016
{ 
# 1017
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1018
} 
# 1048 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1049
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1050
tex, cudaArray_const_t 
# 1051
array) 
# 1053
{ 
# 1054
cudaChannelFormatDesc desc; 
# 1055
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1057
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1058
} 
# 1089 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1090
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1091
tex, cudaMipmappedArray_const_t 
# 1092
mipmappedArray, const cudaChannelFormatDesc &
# 1093
desc) 
# 1095
{ 
# 1096
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1097
} 
# 1127 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1128
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1129
tex, cudaMipmappedArray_const_t 
# 1130
mipmappedArray) 
# 1132
{ 
# 1133
cudaChannelFormatDesc desc; 
# 1134
cudaArray_t levelArray; 
# 1135
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1137
if (err != (cudaSuccess)) { 
# 1138
return err; 
# 1139
}  
# 1140
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1142
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1143
} 
# 1166 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1167
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1168
tex) 
# 1170
{ 
# 1171
return ::cudaUnbindTexture(&tex); 
# 1172
} 
# 1200 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1201
cudaGetTextureAlignmentOffset(size_t *
# 1202
offset, const texture< T, dim, readMode>  &
# 1203
tex) 
# 1205
{ 
# 1206
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1207
} 
# 1252 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1253
cudaFuncSetCacheConfig(T *
# 1254
func, cudaFuncCache 
# 1255
cacheConfig) 
# 1257
{ 
# 1258
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1259
} 
# 1261
template< class T> static inline cudaError_t 
# 1262
cudaFuncSetSharedMemConfig(T *
# 1263
func, cudaSharedMemConfig 
# 1264
config) 
# 1266
{ 
# 1267
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1268
} 
# 1297 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1298
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1299
numBlocks, T 
# 1300
func, int 
# 1301
blockSize, size_t 
# 1302
dynamicSMemSize) 
# 1303
{ 
# 1304
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1305
} 
# 1348 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1349
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1350
numBlocks, T 
# 1351
func, int 
# 1352
blockSize, size_t 
# 1353
dynamicSMemSize, unsigned 
# 1354
flags) 
# 1355
{ 
# 1356
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1357
} 
# 1362
class __cudaOccupancyB2DHelper { 
# 1363
size_t n; 
# 1365
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1366
size_t operator()(int) 
# 1367
{ 
# 1368
return n; 
# 1369
} 
# 1370
}; 
# 1417 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1418
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1419
minGridSize, int *
# 1420
blockSize, T 
# 1421
func, UnaryFunction 
# 1422
blockSizeToDynamicSMemSize, int 
# 1423
blockSizeLimit = 0, unsigned 
# 1424
flags = 0) 
# 1425
{ 
# 1426
cudaError_t status; 
# 1429
int device; 
# 1430
cudaFuncAttributes attr; 
# 1433
int maxThreadsPerMultiProcessor; 
# 1434
int warpSize; 
# 1435
int devMaxThreadsPerBlock; 
# 1436
int multiProcessorCount; 
# 1437
int funcMaxThreadsPerBlock; 
# 1438
int occupancyLimit; 
# 1439
int granularity; 
# 1442
int maxBlockSize = 0; 
# 1443
int numBlocks = 0; 
# 1444
int maxOccupancy = 0; 
# 1447
int blockSizeToTryAligned; 
# 1448
int blockSizeToTry; 
# 1449
int blockSizeLimitAligned; 
# 1450
int occupancyInBlocks; 
# 1451
int occupancyInThreads; 
# 1452
int dynamicSMemSize; 
# 1458
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1459
return cudaErrorInvalidValue; 
# 1460
}  
# 1466
status = ::cudaGetDevice(&device); 
# 1467
if (status != (cudaSuccess)) { 
# 1468
return status; 
# 1469
}  
# 1471
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1475
if (status != (cudaSuccess)) { 
# 1476
return status; 
# 1477
}  
# 1479
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1483
if (status != (cudaSuccess)) { 
# 1484
return status; 
# 1485
}  
# 1487
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1491
if (status != (cudaSuccess)) { 
# 1492
return status; 
# 1493
}  
# 1495
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1499
if (status != (cudaSuccess)) { 
# 1500
return status; 
# 1501
}  
# 1503
status = cudaFuncGetAttributes(&attr, func); 
# 1504
if (status != (cudaSuccess)) { 
# 1505
return status; 
# 1506
}  
# 1508
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1514
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1515
granularity = warpSize; 
# 1517
if (blockSizeLimit == 0) { 
# 1518
blockSizeLimit = devMaxThreadsPerBlock; 
# 1519
}  
# 1521
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1522
blockSizeLimit = devMaxThreadsPerBlock; 
# 1523
}  
# 1525
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1526
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1527
}  
# 1529
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1531
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1535
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1536
blockSizeToTry = blockSizeLimit; 
# 1537
} else { 
# 1538
blockSizeToTry = blockSizeToTryAligned; 
# 1539
}  
# 1541
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1543
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1550
if (status != (cudaSuccess)) { 
# 1551
return status; 
# 1552
}  
# 1554
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1556
if (occupancyInThreads > maxOccupancy) { 
# 1557
maxBlockSize = blockSizeToTry; 
# 1558
numBlocks = occupancyInBlocks; 
# 1559
maxOccupancy = occupancyInThreads; 
# 1560
}  
# 1564
if (occupancyLimit == maxOccupancy) { 
# 1565
break; 
# 1566
}  
# 1567
}  
# 1575
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1576
(*blockSize) = maxBlockSize; 
# 1578
return status; 
# 1579
} 
# 1615 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1616
cudaOccupancyMaxPotentialBlockSize(int *
# 1617
minGridSize, int *
# 1618
blockSize, T 
# 1619
func, size_t 
# 1620
dynamicSMemSize = 0, int 
# 1621
blockSizeLimit = 0) 
# 1622
{ 
# 1623
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1624
} 
# 1674 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1675
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 1676
minGridSize, int *
# 1677
blockSize, T 
# 1678
func, size_t 
# 1679
dynamicSMemSize = 0, int 
# 1680
blockSizeLimit = 0, unsigned 
# 1681
flags = 0) 
# 1682
{ 
# 1683
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 1684
} 
# 1717 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1718
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1719
minGridSize, int *
# 1720
blockSize, T 
# 1721
func, UnaryFunction 
# 1722
blockSizeToDynamicSMemSize, int 
# 1723
blockSizeLimit = 0) 
# 1724
{ 
# 1725
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1726
} 
# 1764 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1765
cudaLaunch(T *
# 1766
func) 
# 1768
{ 
# 1769
return ::cudaLaunch((const void *)func); 
# 1770
} 
# 1801 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1802
cudaFuncGetAttributes(cudaFuncAttributes *
# 1803
attr, T *
# 1804
entry) 
# 1806
{ 
# 1807
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 1808
} 
# 1830 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim> static inline cudaError_t 
# 1831
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1832
surf, cudaArray_const_t 
# 1833
array, const cudaChannelFormatDesc &
# 1834
desc) 
# 1836
{ 
# 1837
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 1838
} 
# 1859 "/usr/local/cuda-7.0//include/cuda_runtime.h"
template< class T, int dim> static inline cudaError_t 
# 1860
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1861
surf, cudaArray_const_t 
# 1862
array) 
# 1864
{ 
# 1865
cudaChannelFormatDesc desc; 
# 1866
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1868
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 1869
} 
# 2 "ksync_uint_dep128.cu"
extern "C" void K_SYNC_UINT_DEP128(unsigned *ts, unsigned *out, unsigned p1, unsigned p2, int its) ;
#if 0
# 3
{ 
# 4
} 
#endif

# 1 "ksync_uint_dep128.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__25_ksync_uint_dep128_cpp1_ii_27cf04ef
# 1 "ksync_uint_dep128.cudafe1.stub.c"
#include "ksync_uint_dep128.cudafe1.stub.c"
# 1 "ksync_uint_dep128.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
